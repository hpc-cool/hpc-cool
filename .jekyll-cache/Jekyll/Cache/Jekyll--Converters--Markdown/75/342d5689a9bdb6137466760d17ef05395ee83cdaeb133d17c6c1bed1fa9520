I"<p>团队的设计师喜欢输出 SVG 格式的图片，而咱如果想要在 WPF 中高性能呈现出来，最好还是转换为 XAML 代码。本文来安利大家一些 SVG 转 XAML 的工具</p>

<!--more-->

<!-- CreateTime:2021/4/12 19:47:35 -->

<!-- 发布 -->

<p>本文将按照推荐的顺序，最前面的是最推荐的，来告诉大家一些工具</p>

<h2 id="sharpvectors">SharpVectors</h2>

<p>这是名气很大的工具，当然这也是一个库。通过这个库可以在 dotnet 系的客户端应用，如 WPF 和 UWP 等呈现 SVG 内容，这个库里面不单包含了 SVG 的呈现，还包括了转换逻辑。其中的一个 demo 就是 SVG 转换 XAML 的工具</p>

<p>以下是工具的界面，可以拖入 SVG 格式的图片</p>

<!-- ![](image/WPF 将 SVG 转 XAML 的工具/WPF 将 SVG 转 XAML 的工具0.png) -->

<p><img src="http://image.acmx.xyz/lindexi%2F2021413832301944.jpg" alt="" /></p>

<p>可以在设置中勾选 Show Output File 打开 XAML 输出界面，可以看到的 XAML 输出界面如下</p>

<!-- ![](image/WPF 将 SVG 转 XAML 的工具/WPF 将 SVG 转 XAML 的工具1.png) -->

<p><img src="http://image.acmx.xyz/lindexi%2F202141383381426.jpg" alt="" /></p>

<p>这个工具可以通过开源的 SharpVectors 仓库 <a href="https://github.com/ElinamLLC/SharpVectors">https://github.com/ElinamLLC/SharpVectors</a> 里面的 WpfTestSvgSample 测试项目构建获取</p>

<p>这个工具生成的 XAML 文件里面，会包含一些在 SharpVectors 仓库提供的附加属性用来提供更多的功能，如果不想要在生成的时候带上这部分信息，请在设置里面，去掉 Include support for SharpVectors Runtime library 选项就可以，此时生成的就是纯 Geometry 的 Path 内容。当然也会丢失一些 SVG 的功能</p>

<h2 id="sharpvectors-svgxaml">SharpVectors-SvgXaml</h2>

<p>这也是 SharpVectors 系列的工具，同样在 GitHub 上完全开源，请看 <a href="https://github.com/ElinamLLC/SharpVectors-SvgXaml">https://github.com/ElinamLLC/SharpVectors-SvgXaml</a></p>

<p>提供批量的 SVG 转换功能，如下图</p>

<!-- ![](image/WPF 将 SVG 转 XAML 的工具/WPF 将 SVG 转 XAML 的工具2.png) -->

<p><img src="http://image.acmx.xyz/lindexi%2F2021413840447807.jpg" alt="" /></p>

<p>这个工具适合在设计师给一堆图片的时候，批量转换为 XAML 文件</p>

<p>这个工具需要你自己去下载开源代码然后自己构建</p>

<h2 id="svg2xamltool">Svg2XamlTool</h2>

<p>这是 dotnetCampus.Svg2XamlTool 工具，这个工具对比上面的工具毫无优势，唯一会列出来的原因是因为这是自己团队内的工具。这是由驸马爷开发，工具人林德熙帮忙开源发布的工具</p>

<p>这个工具通过 dotnet tool 发布，可以使用如下命令进行安装</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>dotnet tool install -g dotnetCampus.Svg2XamlTool
</code></pre></div></div>

<p>使用如下命令即可打开使用</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Svg2Xaml
</code></pre></div></div>

<p>我推荐新建一个 bat 文件，里面放如下代码，这样就可以通过双击 bat 文件自动更新打开工具</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@echo off
cd %~dp0
cd ..
@echo App starting... Please waiting. Code: https://github.com/dotnet-campus/dotnetCampus.Svg2XamlTool

dotnet tool update -g dotnetCampus.Svg2XamlTool

Svg2Xaml
</code></pre></div></div>

<p>工具界面如下，可以拖入 SVG 文件，自动转换为 XAML 文件打开</p>

<!-- ![](image/WPF 将 SVG 转 XAML 的工具/WPF 将 SVG 转 XAML 的工具3.png) -->

<p><img src="http://image.acmx.xyz/lindexi%2F202141384520490.jpg" alt="" /></p>

<p>这个工具在 GitHub 上完全开源，请看 <a href="https://github.com/dotnet-campus/dotnetCampus.Svg2XamlTool">https://github.com/dotnet-campus/dotnetCampus.Svg2XamlTool</a></p>

<p>另外，这个工具有编辑 XAML 的 Geometry 的 Path 显示的功能，但是这部分编辑功能很弱</p>

<p>如果对此工具有任何的想法或者建议，都欢迎在 GitHub 上讨论</p>

<p>这个工具的核心是依赖 <a href="https://github.com/ElinamLLC/SharpVectors">https://github.com/ElinamLLC/SharpVectors</a> 提供的功能，因此和使用 <a href="https://github.com/ElinamLLC/SharpVectors">https://github.com/ElinamLLC/SharpVectors</a> 没有什么解析上的差别</p>

<p>额外，在 Blend 的旧版本还提供了转换的工具，但是在新版本干掉了这个功能</p>

<p>在 WPF 里面，如果不转换为 XAML 而通过 <a href="https://github.com/ElinamLLC/SharpVectors">https://github.com/ElinamLLC/SharpVectors</a> 库也可以渲染 SVG 图片</p>

:ET