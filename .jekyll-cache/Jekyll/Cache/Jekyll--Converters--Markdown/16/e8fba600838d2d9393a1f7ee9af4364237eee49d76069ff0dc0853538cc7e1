I"3<p>在进行文件读写时，如果进行单元测试，是需要很多设计，因为本地的文件可能因为单元测试之间的占用，以及还原数据，会影响业务。本文告诉大家使用注入的方式，让文件读写一个抽象的对象</p>

<!--more-->

<!-- CreateTime:2019/12/10 19:44:16 -->

<p>单元测试文件读写的难点是构建出测试的文件，如要求文件的权限是用户不可读，如要求文件的长度很长，如要求文件的修改时间。而 System.IO.Abstractions 这个库提供了注入抽象的文件，所有属性都可以设置</p>

<p>首先安装 System.IO.Abstractions 库，这个库提供了 IFileSystem 接口，使用这个接口提供的文件读写方法代替静态类 File 等方法。这样通过注入 IFileSystem 接口，可以进行文件读写测试</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Install</span><span class="p">-</span><span class="n">Package</span> <span class="n">System</span><span class="p">.</span><span class="n">IO</span><span class="p">.</span><span class="n">Abstractions</span>
</code></pre></div></div>

<p>在使用 System.IO.Abstractions 库进行注入，需要对代码进行一些修改，如将 <code class="language-plaintext highlighter-rouge">File.ReadAllText</code> 的代码修改为 <code class="language-plaintext highlighter-rouge">fileSystem.File.ReadAllText</code> 这里的 fileSystem 是 IFileSystem 进行注入</p>

<p>在进行单元测试的注入，可选的是构造注入等方法，通过注入的 IFileSystem 属性进行文件读写</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">public</span> <span class="k">class</span> <span class="nc">Foo</span>
    <span class="p">{</span>
        <span class="c1">/// &lt;inheritdoc /&gt;</span>
        <span class="k">public</span> <span class="nf">Foo</span><span class="p">(</span><span class="n">IFileSystem</span> <span class="n">fileSystem</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">FileSystem</span> <span class="p">=</span> <span class="n">fileSystem</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="n">IFileSystem</span> <span class="n">FileSystem</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
</code></pre></div></div>

<p>之后的文件读写，大概修改如 File.ReadAllText 和 FileStream 代码</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>            <span class="n">IFileSystem</span> <span class="n">fileSystem</span> <span class="p">=</span> <span class="n">FileSystem</span><span class="p">;</span>

            <span class="n">File</span><span class="p">.</span><span class="nf">ReadAllText</span><span class="p">(</span><span class="s">"lindexi.txt"</span><span class="p">);</span>
            <span class="n">fileSystem</span><span class="p">.</span><span class="n">File</span><span class="p">.</span><span class="nf">ReadAllText</span><span class="p">(</span><span class="s">"lindexi.txt"</span><span class="p">);</span>
</code></pre></div></div>

<p>也就是将 File.ReadAllText 替换 fileSystem.File.ReadAllText 方法</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>            <span class="k">new</span> <span class="nf">FileStream</span><span class="p">(</span><span class="s">"blog.lindexi.com"</span><span class="p">,</span> <span class="n">FileMode</span><span class="p">.</span><span class="n">Create</span><span class="p">);</span>
            <span class="n">fileSystem</span><span class="p">.</span><span class="n">FileStream</span><span class="p">.</span><span class="nf">Create</span><span class="p">(</span><span class="s">"blog.lindexi.com"</span><span class="p">,</span> <span class="n">FileMode</span><span class="p">.</span><span class="n">Create</span><span class="p">);</span>
</code></pre></div></div>

<p>此时进行单元测试注入，这里用 Mock 的方法创建一个抽象的对象</p>

<p>单元测试需要按照 System.IO.Abstractions.TestingHelpers 库</p>

<p>注入 IFileSystem 方法</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>            <span class="kt">var</span> <span class="n">mockFileSystem</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">MockFileSystem</span><span class="p">(</span><span class="k">new</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="n">MockFileData</span><span class="p">&gt;()</span>
            <span class="p">{</span>
                <span class="p">{</span>
                    <span class="s">"文件路径"</span><span class="p">,</span> <span class="k">new</span> <span class="nf">MockFileData</span><span class="p">(</span><span class="s">"文件内容"</span><span class="p">)</span>
                <span class="p">},</span>
                <span class="p">{</span> <span class="s">"文件夹"</span><span class="p">,</span> <span class="k">new</span> <span class="nf">MockDirectoryData</span><span class="p">()</span> <span class="p">}</span>
            <span class="p">});</span>

            <span class="kt">var</span> <span class="n">foo</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Foo</span><span class="p">(</span><span class="n">mockFileSystem</span><span class="p">);</span>
</code></pre></div></div>

<p>在 MockFileSystem 支持设置文件或文件夹的属性，不需要存在实际的文件</p>

<p>如果需要虚拟更多接口，请使用 Mock 方法</p>

:ET