I"><p>在 C# 7.2 提供了一系列的方法用于方法参数传输的时候减少对结构体的复制从而可以高效使用内存同时提高性能</p>

<!--more-->

<!-- CreateTime:2018/12/25 9:24:06 -->

<p>在开始阅读之前，希望读者对 C# 的值类型、引用类型有比较深刻的认知。</p>

<p>在 C# 中，如果对内存有严格的要求，同时需要减少 GC 的情况，推荐此时使用结构体。但是结构体有一个缺点在于，结构体在每次调用方法作为参数传递的时候都会新建一个副本，这对于性能要求特别高的情况是不适合的。</p>

<p>定义一个值类型</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">struct</span> <span class="nc">Int256</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nf">Int256</span><span class="p">(</span><span class="kt">long</span> <span class="n">bits0</span><span class="p">,</span> <span class="kt">long</span> <span class="n">bits1</span><span class="p">,</span> <span class="kt">long</span> <span class="n">bits2</span><span class="p">,</span> <span class="kt">long</span> <span class="n">bits3</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Bits0</span> <span class="p">=</span> <span class="n">bits0</span><span class="p">;</span>
            <span class="n">Bits1</span> <span class="p">=</span> <span class="n">bits1</span><span class="p">;</span>
            <span class="n">Bits2</span> <span class="p">=</span> <span class="n">bits2</span><span class="p">;</span>
            <span class="n">Bits3</span> <span class="p">=</span> <span class="n">bits3</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="kt">long</span> <span class="n">Bits0</span> <span class="p">{</span> <span class="k">set</span><span class="p">;</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">long</span> <span class="n">Bits1</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">long</span> <span class="n">Bits2</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">long</span> <span class="n">Bits3</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
</code></pre></div></div>

<p>此时通过一个简单的赋值就可以获取复制</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Int256</span> <span class="n">f1</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Int256</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">1</span><span class="p">);</span>
<span class="kt">var</span> <span class="n">f2</span> <span class="p">=</span> <span class="n">f1</span><span class="p">;</span>
<span class="n">f2</span><span class="p">.</span><span class="n">Bits0</span> <span class="p">=</span> <span class="m">2</span><span class="p">;</span>
<span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">$"f1.bits0=</span><span class="p">{</span><span class="n">f1</span><span class="p">.</span><span class="n">Bits0</span><span class="p">}</span><span class="s"> f2.bits0=</span><span class="p">{</span><span class="n">f2</span><span class="p">.</span><span class="n">Bits0</span><span class="p">}</span><span class="s">"</span><span class="p">);</span>
<span class="c1">//f1.bits0=0 f2.bits0=2</span>
</code></pre></div></div>

<p>在调用方法的时候也一样，传入参数就是复制一个新的值</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Int256</span> <span class="n">f1</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Int256</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">1</span><span class="p">);</span>
            <span class="nf">Foo</span><span class="p">(</span><span class="n">f1</span><span class="p">);</span>
            <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">$"</span><span class="p">{</span><span class="n">f1</span><span class="p">.</span><span class="n">Bits0</span><span class="p">}</span><span class="s">"</span><span class="p">);</span> <span class="c1">// 0</span>
        <span class="p">}</span>

        <span class="k">private</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Foo</span><span class="p">(</span><span class="n">Int256</span> <span class="n">foo</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">foo</span><span class="p">.</span><span class="n">Bits0</span> <span class="p">=</span> <span class="m">2</span><span class="p">;</span>
        <span class="p">}</span>
</code></pre></div></div>

<p>对于很小的值类型，如果小于 IntPtr.Size 的传输，会比引用传递的复制速度快，但是对比比较大的值类型，如上面定义的，复制一次需要的时间会比较长</p>

<p>特别是存在很多次的值传递的时候，如下面的代码，会调用 1000 次的值传递。除了性能的问题，还存在堆栈的内存的问题</p>

<p>定义一个很大的值类型，里面包含 10000 个 double 看起来就很大</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">struct</span> <span class="nc">Double10000</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">double</span> <span class="n">Double0</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">double</span> <span class="n">Double1</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">double</span> <span class="n">Double2</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
        <span class="err">……</span>
        <span class="k">public</span> <span class="kt">double</span> <span class="n">Double9999</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>        
    <span class="p">}</span>
</code></pre></div></div>

<p>用递归的方式进行调用，运行的时候很快就可以看到堆栈都被申请的值传递使用，同时 CPU 的使用很高</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Double10000</span> <span class="n">foo</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Double10000</span><span class="p">();</span>
            <span class="nf">Foo</span><span class="p">(</span><span class="n">foo</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">private</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Foo</span><span class="p">(</span><span class="n">Double10000</span> <span class="n">foo</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span> <span class="p">=</span> <span class="m">100</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="p">==</span> <span class="n">foo</span><span class="p">.</span><span class="n">Double0</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="nf">Foo</span><span class="p">(</span><span class="n">foo</span><span class="p">,</span> <span class="n">n</span> <span class="p">-</span> <span class="m">1</span><span class="p">);</span>
        <span class="p">}</span>
</code></pre></div></div>

<!-- ![](image/C# 7.2 通过 in 和 readonly struct 减少方法值复制提高性能/C# 7.2 通过 in 和 readonly struct 减少方法值复制提高性能0.png) -->

<p><img src="http://image.acmx.xyz/lindexi%2F2018112417237984" alt="" /></p>

<p>如果可以让值类型和引用一样传递，是不是就可以减少值类型的复制同时减少堆栈的使用，请注意不要纠结值类型是分配在堆中还是栈中的问题，上面的代码更多的是方法的递归</p>

<p>对比内存的使用，更多的时候关心的是运行的速度。添加一些代码用来测试性能，同时减少调用</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>            <span class="kt">var</span> <span class="n">st</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Stopwatch</span><span class="p">();</span>
            <span class="n">st</span><span class="p">.</span><span class="nf">Start</span><span class="p">();</span>
            <span class="nf">Foo</span><span class="p">(</span><span class="n">foo</span><span class="p">);</span>
            <span class="n">st</span><span class="p">.</span><span class="nf">Stop</span><span class="p">();</span>
            <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="n">st</span><span class="p">.</span><span class="n">ElapsedTicks</span><span class="p">);</span>
</code></pre></div></div>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="k">private</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Foo</span><span class="p">(</span><span class="n">Double10000</span> <span class="n">foo</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span> <span class="p">=</span> <span class="m">10</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="p">==</span> <span class="n">foo</span><span class="p">.</span><span class="n">Double0</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="nf">Foo</span><span class="p">(</span><span class="n">foo</span><span class="p">,</span> <span class="n">n</span> <span class="p">-</span> <span class="m">1</span><span class="p">);</span>
        <span class="p">}</span>
</code></pre></div></div>

<p>这里输出的 ElapsedTicks 的单位是 100ns 需要知道 <code class="language-plaintext highlighter-rouge">1ms=1000000ns</code> 也就是 1w 的 tick 就是 1 毫秒，下面我运行 3 次代码，收集到的值</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="m">10991</span>
<span class="m">14950</span>
<span class="m">16183</span>
</code></pre></div></div>

<p>在 C# 7.2 可以使用 in 关键字告诉 VisualStudio 当前的方法不会对传进来的结构体进行修改，当前这样写只是语法层面。如果有一些厉害的黑客，可能还继续这样写入，于是为了防止真的进行修改，在底层还是复制了一份。</p>

<p>也就是只是在参数里面使用了 in 是不够的，具体请看<a href="http://www.cnblogs.com/BeanHsiang/p/8687780.html">这个拖后腿的“in” - Bean.Hsiang - 博客园</a></p>

<p>如果想要更好的使用内存同时提高性能，只有在可以被标记为只读的结构体的时候使用 in 才可以</p>

<p>先将 Double100 标记为 readonly 如果一个值类型标记为 readonly 也就无法对里面的字段或属性进行设置了</p>

<p>在 Foo 传入的方法参数标记 in 这样就完成了，因为 in 表示对参数不进行修改，而传入的是 readonly struct 本来就不能被修改，于是就传入 struct 的引用</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">readonly</span> <span class="k">struct</span> <span class="nc">Double10000</span>

        <span class="k">private</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Foo</span><span class="p">(</span><span class="k">in</span> <span class="n">Double10000</span> <span class="n">foo</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span> <span class="p">=</span> <span class="m">10</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="p">==</span> <span class="n">foo</span><span class="p">.</span><span class="n">Double0</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="nf">Foo</span><span class="p">(</span><span class="n">foo</span><span class="p">,</span> <span class="n">n</span> <span class="p">-</span> <span class="m">1</span><span class="p">);</span>
        <span class="p">}</span>
</code></pre></div></div>

<p>同样运行 3 次，可以看到速度是原来的 10 倍</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="m">2052</span>
<span class="m">1837</span>
<span class="m">1683</span>
</code></pre></div></div>

<p>同时占用的堆栈更小，可以使用更多的递归，修改 Foo 函数调用次数为 1000 可以看到还能运行，但是如果去掉了参数 in 最多只能调用 20 次</p>

<p>没有加 in 的参数，运行了 17 次</p>

<!-- ![](image/C# 7.2 通过 in 和 readonly struct 减少方法值复制提高性能/C# 7.2 通过 in 和 readonly struct 减少方法值复制提高性能1.png) -->

<p><img src="http://image.acmx.xyz/lindexi%2F2018112417237984" alt="" /></p>

<p>添加了 in 之后因为不需要复制值，减少内存的时候，此时运行了 1000 次递归都可以，在使用in之后速度和使用内存都比较好</p>

<p>在很多次方法调用使用参数的时候，如果传入的值是值类型，如果此时的 struct 里面的属性都是只读属性，推荐将 struct 标记为 readonly 同时在方法参数标记 in 这样可以让 struct 作为引用传递，也就是复制的只是指针，只要 struct 的长度比指针小就推荐这个方法</p>

:ET