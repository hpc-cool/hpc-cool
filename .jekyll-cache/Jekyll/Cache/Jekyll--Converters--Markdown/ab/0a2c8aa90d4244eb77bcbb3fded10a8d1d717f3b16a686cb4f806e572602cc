I"I5<p>本文告诉大家如何在 asp dotnet core 支持客户端上传文件</p>

<!--more-->

<!-- CreateTime:2019/8/31 16:55:58 -->

<p>新建一个 asp dotnet core 程序，创建一个新的类，用于给客户端上传文件的信息</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">public</span> <span class="k">class</span> <span class="nc">KanajeaLolowge</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="n">IFormFile</span> <span class="n">File</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="kt">string</span> <span class="n">Sha</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
</code></pre></div></div>

<p>这个类包含两个信息，一个是 File 文件，另一个是文件校验，这个类可以随意命名，属性也可以随意命名，只要在客户端可以相同</p>

<p>打开一个 controller 添加一个新的函数</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="p">[</span><span class="nf">HttpPost</span><span class="p">(</span><span class="s">"UploadPackage"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">StatusCodeResult</span><span class="p">&gt;</span> <span class="nf">UploadPackage</span><span class="p">([</span><span class="n">FromForm</span><span class="p">]</span><span class="n">KanajeaLolowge</span> <span class="n">file</span><span class="p">)</span>
        <span class="p">{</span>
      
            <span class="k">return</span> <span class="nf">Ok</span><span class="p">();</span>
        <span class="p">}</span>
</code></pre></div></div>

<p>在这个函数添加特性 HttpPost 里面的参数就是访问链接，如上面的代码，加入所在的类是这样定义</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"api/[controller]"</span><span class="p">)]</span>
    <span class="p">[</span><span class="n">ApiController</span><span class="p">]</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">GairKetemRairsemsController</span> <span class="p">:</span> <span class="n">ControllerBase</span>
</code></pre></div></div>

<p>那么可以通过 <code class="language-plaintext highlighter-rouge">api/GairKetemRairsems/UploadPackage</code> 访问这个函数</p>

<p>在函数传入的参数使用 <code class="language-plaintext highlighter-rouge">[FromForm]KanajeaLolowge file</code> 的意思是通过 Post 提交 Form 的方法拿到参数</p>

<p>所以在客户端通过 Form 提交包含 File 和 Sha 信息的 Form 就可以通过链接调用这个方法</p>

<p>请看在客户端如何写</p>

<p>假设已经拿到文件的 FileStream 和计算出文件的 Sha 拿到链接</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="k">private</span> <span class="k">static</span> <span class="k">async</span> <span class="n">Task</span> <span class="nf">Upload</span><span class="p">(</span><span class="n">FileStream</span> <span class="n">fileStream</span><span class="p">,</span> <span class="kt">string</span> <span class="n">sha</span><span class="p">,</span> <span class="kt">string</span> <span class="n">url</span><span class="p">)</span>

</code></pre></div></div>

<p>在这个方法上传文件，通过 MultipartFormDataContent 构造一个 Form 请看代码</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>            <span class="kt">var</span> <span class="n">multipartFormDataContent</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">MultipartFormDataContent</span><span class="p">();</span>
            <span class="n">multipartFormDataContent</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">StreamContent</span><span class="p">(</span><span class="n">fileStream</span><span class="p">),</span> <span class="s">"File"</span><span class="p">,</span> <span class="n">fileName</span><span class="p">:</span> <span class="s">"文件名.png"</span><span class="p">);</span>
            <span class="n">multipartFormDataContent</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">StringContent</span><span class="p">(</span><span class="n">sha</span><span class="p">),</span> <span class="s">"Sha"</span><span class="p">);</span>
</code></pre></div></div>

<p>文件通过 StreamContent 传入 Stream 的值，加上的 File 参数是和 asp dotnet core 的上传类对应的属性名，最后的一个 fileName 指的是文件名，因为传入的是 Stream 可能是内存流，这时就无法拿到文件名，需要用户传入</p>

<p>下面的值是传入一个 Key value 的值，这里的 key 是 <code class="language-plaintext highlighter-rouge">"Sha"</code> 值是 sha 的值</p>

<p>创建一个 HttpClient 上传 Form 代码</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>            <span class="kt">var</span> <span class="n">httpClient</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">HttpClient</span><span class="p">();</span>
            <span class="k">await</span> <span class="n">httpClient</span><span class="p">.</span><span class="nf">PostAsync</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">multipartFormDataContent</span><span class="p">);</span>
</code></pre></div></div>

<p>这样调用这个 PostAsync 在 Asp dotnet core 就调用 UploadPackage 方法</p>

<p>通过这个方法就可以做到在 asp dotnet core 上传文件</p>

<p>获取文件 Sha 的方法请看下面</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>            <span class="kt">var</span> <span class="n">fileStream</span> <span class="p">=</span> <span class="n">fileInfo</span><span class="p">.</span><span class="nf">OpenRead</span><span class="p">();</span>
            <span class="kt">string</span> <span class="n">fileSha</span><span class="p">;</span>
            <span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">sha</span> <span class="p">=</span> <span class="n">SHA256</span><span class="p">.</span><span class="nf">Create</span><span class="p">())</span>
            <span class="p">{</span>
                <span class="n">fileSha</span> <span class="p">=</span> <span class="n">Convert</span><span class="p">.</span><span class="nf">ToBase64String</span><span class="p">(</span><span class="n">sha</span><span class="p">.</span><span class="nf">ComputeHash</span><span class="p">(</span><span class="n">fileStream</span><span class="p">));</span>

                <span class="n">fileStream</span><span class="p">.</span><span class="nf">Seek</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="n">SeekOrigin</span><span class="p">.</span><span class="n">Begin</span><span class="p">);</span>
            <span class="p">}</span>
</code></pre></div></div>

<p>注意需要 fileStream 还原，也就是 <code class="language-plaintext highlighter-rouge">fileStream.Seek(0, SeekOrigin.Begin)</code> 如果没有添加，那么上传的 Stream 是没有长度</p>

<p>在 asp dotnet core 接收文件，然后校验文件的方法请看下面</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>       <span class="p">[</span><span class="nf">HttpPost</span><span class="p">(</span><span class="s">"UploadPackage"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">StatusCodeResult</span><span class="p">&gt;</span> <span class="nf">UploadPackage</span><span class="p">([</span><span class="n">FromForm</span><span class="p">]</span><span class="n">KanajeaLolowge</span> <span class="n">file</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">fileInfo</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">FileInfo</span><span class="p">(</span><span class="s">"E:\\1.png"</span><span class="p">);</span>

            <span class="kt">var</span> <span class="n">fileStream</span> <span class="p">=</span> <span class="n">fileInfo</span><span class="p">.</span><span class="nf">Open</span><span class="p">(</span><span class="n">FileMode</span><span class="p">.</span><span class="n">Create</span><span class="p">,</span> <span class="n">FileAccess</span><span class="p">.</span><span class="n">ReadWrite</span><span class="p">);</span>

            <span class="k">await</span> <span class="n">file</span><span class="p">.</span><span class="n">File</span><span class="p">.</span><span class="nf">CopyToAsync</span><span class="p">(</span><span class="n">fileStream</span><span class="p">);</span>

            <span class="n">fileStream</span><span class="p">.</span><span class="nf">Seek</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="n">SeekOrigin</span><span class="p">.</span><span class="n">Begin</span><span class="p">);</span>

            <span class="kt">string</span> <span class="n">fileSha</span><span class="p">;</span>
            <span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">sha</span> <span class="p">=</span> <span class="n">SHA256</span><span class="p">.</span><span class="nf">Create</span><span class="p">())</span>
            <span class="p">{</span>
                <span class="n">fileSha</span> <span class="p">=</span> <span class="n">Convert</span><span class="p">.</span><span class="nf">ToBase64String</span><span class="p">(</span><span class="n">sha</span><span class="p">.</span><span class="nf">ComputeHash</span><span class="p">(</span><span class="n">fileStream</span><span class="p">));</span>

                <span class="n">fileStream</span><span class="p">.</span><span class="nf">Seek</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="n">SeekOrigin</span><span class="p">.</span><span class="n">Begin</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">fileSha</span> <span class="p">==</span> <span class="n">file</span><span class="p">.</span><span class="n">Sha</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="nf">Ok</span><span class="p">();</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="nf">BadRequest</span><span class="p">();</span>
        <span class="p">}</span>
</code></pre></div></div>

<p>如果需要将文件保存在 ContentRoot 可以通过在 controller 的构造函数添加 IHostingEnvironment 参数，在 IHostingEnvironment 参数拿到 ContentRootPath 值</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="k">public</span> <span class="nf">GairKetemRairsemsController</span><span class="p">(</span><span class="n">IHostingEnvironment</span> <span class="n">hostingEnvironment</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_context</span> <span class="p">=</span> <span class="n">context</span><span class="p">;</span>
            <span class="n">_hostingEnvironment</span> <span class="p">=</span> <span class="n">hostingEnvironment</span><span class="p">;</span>
        <span class="p">}</span>
       
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">IHostingEnvironment</span> <span class="n">_hostingEnvironment</span><span class="p">;</span>
</code></pre></div></div>

<p>在保存文件可以使用下面代码</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>            <span class="kt">var</span> <span class="n">fileInfo</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">FileInfo</span><span class="p">(</span><span class="n">Path</span><span class="p">.</span><span class="nf">Combine</span><span class="p">(</span><span class="n">_hostingEnvironment</span><span class="p">.</span><span class="n">ContentRootPath</span><span class="p">,</span> <span class="s">"1.png"</span><span class="p">));</span>

</code></pre></div></div>

<p><a href="https://www.cnblogs.com/GuZhenYin/p/8194726.html">ASP.NET Core文件上传与下载(多种上传方式) - GuZhenYin - 博客园</a></p>

<p><a href="https://docs.microsoft.com/en-us/aspnet/core/mvc/models/file-uploads?view=aspnetcore-2.2">File uploads in ASP.NET Core</a></p>

:ET