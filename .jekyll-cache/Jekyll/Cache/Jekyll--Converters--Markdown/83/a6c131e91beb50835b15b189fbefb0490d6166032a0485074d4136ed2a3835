I">=<p>小伙伴绑定了一个属性，但是发现属性在更新的时候没有同步到后台，他说在 WPF 绑定的默认值是什么？为什么没有设置 Mode 的属性，有的是双向有的是单向？本文就来告诉大家在 WPF 定义的依赖属性是如何控制绑定的是双向还是单向的方法</p>

<!--more-->

<!-- CreateTime:2019/4/12 9:38:58 -->

<!-- csdn -->

<p>在依赖属性或附加属性，都可以在定义的时候传入 FrameworkPropertyMetadata 请看代码</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
        <span class="k">public</span> <span class="k">static</span> <span class="k">readonly</span> <span class="n">DependencyProperty</span> <span class="n">TwoWayProperty</span> <span class="p">=</span>
            <span class="n">DependencyProperty</span><span class="p">.</span><span class="nf">Register</span><span class="p">(</span><span class="s">"TwoWay"</span><span class="p">,</span> <span class="k">typeof</span><span class="p">(</span><span class="kt">string</span><span class="p">),</span> <span class="k">typeof</span><span class="p">(</span><span class="n">MainWindow</span><span class="p">),</span> <span class="k">new</span> <span class="nf">FrameworkPropertyMetadata</span><span class="p">(</span><span class="s">""</span><span class="p">));</span>
</code></pre></div></div>

<p>上面代码的使用和默认不相同，修改 PropertyMetadata 为 FrameworkPropertyMetadata 虽然传入的默认值参数都是一样的，但是 FrameworkPropertyMetadata 可以传入更多的参数，如可以传入 FrameworkPropertyMetadataOptions 变量</p>

<p>在 FrameworkPropertyMetadataOptions 变量可以通过设置 BindsTwoWayByDefault 指定这个值默认的绑定是双向的</p>

<p>虽然从 Binding 的 Mode 的枚举的定义是</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">public</span> <span class="k">enum</span> <span class="n">BindingMode</span>
    <span class="p">{</span>
        <span class="n">TwoWay</span><span class="p">,</span>
        <span class="n">OneWay</span><span class="p">,</span>
        <span class="n">OneTime</span><span class="p">,</span>
        <span class="n">OneWayToSource</span><span class="p">,</span>
        <span class="n">Default</span>
    <span class="p">}</span>
</code></pre></div></div>

<p>默认的枚举值 0 是 TwoWay 但是在 Mode 属性通过特性设置了默认的值是 Default 而如果设置默认的值是 Default 就会读取绑定的属性的对应的 FrameworkPropertyMetadata 是否有设置默认是双向</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="p">[</span><span class="nf">DefaultValue</span><span class="p">(</span><span class="n">BindingMode</span><span class="p">.</span><span class="n">Default</span><span class="p">)]</span>

</code></pre></div></div>

<p>在 TextBlock 这些控件，有很多属性的绑定都是双向的，但是如果是小伙伴定义的控件，他可以定义出默认是双向绑定的或没有的</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      <span class="k">public</span> <span class="kt">string</span> <span class="n">TwoWay</span>
        <span class="p">{</span>
            <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="p">(</span><span class="kt">string</span><span class="p">)</span> <span class="nf">GetValue</span><span class="p">(</span><span class="n">TwoWayProperty</span><span class="p">);</span> <span class="p">}</span>
            <span class="k">set</span> <span class="p">{</span> <span class="nf">SetValue</span><span class="p">(</span><span class="n">TwoWayProperty</span><span class="p">,</span> <span class="k">value</span><span class="p">);</span> <span class="p">}</span>
        <span class="p">}</span>


        <span class="k">public</span> <span class="k">static</span> <span class="k">readonly</span> <span class="n">DependencyProperty</span> <span class="n">TwoWayProperty</span> <span class="p">=</span>
            <span class="n">DependencyProperty</span><span class="p">.</span><span class="nf">Register</span><span class="p">(</span><span class="s">"TwoWay"</span><span class="p">,</span> <span class="k">typeof</span><span class="p">(</span><span class="kt">string</span><span class="p">),</span> <span class="k">typeof</span><span class="p">(</span><span class="n">MainWindow</span><span class="p">),</span> <span class="k">new</span> <span class="nf">FrameworkPropertyMetadata</span><span class="p">(</span><span class="s">""</span><span class="p">,</span> <span class="n">FrameworkPropertyMetadataOptions</span><span class="p">.</span><span class="n">BindsTwoWayByDefault</span><span class="p">));</span>

        <span class="k">public</span> <span class="kt">string</span> <span class="n">OneWay</span>
        <span class="p">{</span>
            <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="p">(</span><span class="kt">string</span><span class="p">)</span> <span class="nf">GetValue</span><span class="p">(</span><span class="n">OneWayProperty</span><span class="p">);</span> <span class="p">}</span>
            <span class="k">set</span> <span class="p">{</span> <span class="nf">SetValue</span><span class="p">(</span><span class="n">OneWayProperty</span><span class="p">,</span> <span class="k">value</span><span class="p">);</span> <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">static</span> <span class="k">readonly</span> <span class="n">DependencyProperty</span> <span class="n">OneWayProperty</span> <span class="p">=</span>
            <span class="n">DependencyProperty</span><span class="p">.</span><span class="nf">Register</span><span class="p">(</span><span class="s">"OneWay"</span><span class="p">,</span> <span class="k">typeof</span><span class="p">(</span><span class="kt">string</span><span class="p">),</span> <span class="k">typeof</span><span class="p">(</span><span class="n">MainWindow</span><span class="p">),</span> <span class="k">new</span> <span class="nf">FrameworkPropertyMetadata</span><span class="p">(</span><span class="s">""</span><span class="p">,</span> <span class="n">FrameworkPropertyMetadataOptions</span><span class="p">.</span><span class="n">AffectsArrange</span><span class="p">));</span>
       
</code></pre></div></div>

<p>尝试再定义两个属性，绑定依赖属性</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>       <span class="k">public</span> <span class="kt">string</span> <span class="n">Property1</span>
        <span class="p">{</span>
            <span class="k">get</span> <span class="p">=&gt;</span> <span class="n">_property</span><span class="p">;</span> 
            <span class="k">set</span>
            <span class="p">{</span>
                <span class="n">_property</span> <span class="p">=</span> <span class="k">value</span><span class="p">;</span>
                <span class="nf">OnPropertyChanged</span><span class="p">();</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="kt">string</span> <span class="n">Property2</span>
        <span class="p">{</span>
            <span class="k">get</span> <span class="p">=&gt;</span> <span class="n">_property2</span><span class="p">;</span> 
            <span class="k">set</span>
            <span class="p">{</span>
                <span class="n">_property2</span> <span class="p">=</span> <span class="k">value</span><span class="p">;</span>
                <span class="nf">OnPropertyChanged</span><span class="p">();</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">private</span> <span class="kt">string</span> <span class="n">_property</span><span class="p">;</span>
        <span class="k">private</span> <span class="kt">string</span> <span class="n">_property2</span><span class="p">;</span>

        <span class="k">public</span> <span class="k">event</span> <span class="n">PropertyChangedEventHandler</span> <span class="n">PropertyChanged</span><span class="p">;</span>

        <span class="k">private</span> <span class="k">void</span> <span class="nf">OnPropertyChanged</span><span class="p">([</span><span class="n">CallerMemberName</span><span class="p">]</span><span class="kt">string</span> <span class="n">name</span> <span class="p">=</span> <span class="s">""</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">PropertyChanged</span><span class="p">?.</span><span class="nf">Invoke</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="k">new</span> <span class="nf">PropertyChangedEventArgs</span><span class="p">(</span><span class="n">name</span><span class="p">));</span>
        <span class="p">}</span>
</code></pre></div></div>

<p>在构造函数绑定属性</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>       <span class="k">public</span> <span class="nf">MainWindow</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="n">DataContext</span> <span class="p">=</span> <span class="k">this</span><span class="p">;</span>
            <span class="nf">InitializeComponent</span><span class="p">();</span>

            <span class="n">Binding</span> <span class="n">binding</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Binding</span>
            <span class="p">{</span>
                <span class="n">Path</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">PropertyPath</span><span class="p">(</span><span class="s">"Property1"</span><span class="p">),</span>
                <span class="n">Mode</span> <span class="p">=</span> <span class="n">BindingMode</span><span class="p">.</span><span class="n">Default</span>
            <span class="p">};</span>

            <span class="n">BindingOperations</span><span class="p">.</span><span class="nf">SetBinding</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="n">TwoWayProperty</span><span class="p">,</span> <span class="n">binding</span><span class="p">);</span>

            <span class="n">binding</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Binding</span>
            <span class="p">{</span>
                <span class="n">Path</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">PropertyPath</span><span class="p">(</span><span class="s">"Property2"</span><span class="p">),</span>
                <span class="n">Mode</span> <span class="p">=</span> <span class="n">BindingMode</span><span class="p">.</span><span class="n">Default</span>
            <span class="p">};</span>

            <span class="n">BindingOperations</span><span class="p">.</span><span class="nf">SetBinding</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="n">OneWayProperty</span><span class="p">,</span> <span class="n">binding</span><span class="p">);</span>
        <span class="p">}</span>
</code></pre></div></div>

<p>在界面绑定一下属性就知道属性是否修改</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="p">&lt;</span><span class="n">StackPanel</span> <span class="n">VerticalAlignment</span><span class="p">=</span><span class="s">"Center"</span> <span class="n">HorizontalAlignment</span><span class="p">=</span><span class="s">"Center"</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="n">TextBlock</span> <span class="n">Margin</span><span class="p">=</span><span class="s">"10,10,10,10"</span> <span class="n">Text</span><span class="p">=</span><span class="s">"{Binding Property1}"</span><span class="p">&gt;&lt;/</span><span class="n">TextBlock</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="n">TextBlock</span> <span class="n">Text</span><span class="p">=</span><span class="s">"{Binding Property2}"</span> <span class="n">Margin</span><span class="p">=</span><span class="s">"10,10,10,10"</span><span class="p">&gt;&lt;/</span><span class="n">TextBlock</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="n">TextBlock</span> <span class="n">x</span><span class="p">:</span><span class="n">Name</span><span class="p">=</span><span class="s">"Text"</span> <span class="n">Margin</span><span class="p">=</span><span class="s">"10,10,10,10"</span><span class="p">&gt;&lt;/</span><span class="n">TextBlock</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="n">Button</span> <span class="n">Content</span><span class="p">=</span><span class="s">"修改值"</span> <span class="n">Click</span><span class="p">=</span><span class="s">"Button_Click"</span><span class="p">&gt;&lt;/</span><span class="n">Button</span><span class="p">&gt;</span>
        <span class="p">&lt;/</span><span class="n">StackPanel</span><span class="p">&gt;</span>
</code></pre></div></div>

<p>界面的按钮点击的时候修改属性</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="k">private</span> <span class="k">void</span> <span class="nf">Button_Click</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">RoutedEventArgs</span> <span class="n">e</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Random</span> <span class="n">ran</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Random</span><span class="p">();</span>
            <span class="n">Text</span><span class="p">.</span><span class="n">Text</span> <span class="p">=</span> <span class="n">ran</span><span class="p">.</span><span class="nf">Next</span><span class="p">().</span><span class="nf">ToString</span><span class="p">();</span>
            <span class="n">OneWay</span> <span class="p">=</span> <span class="n">Text</span><span class="p">.</span><span class="n">Text</span><span class="p">;</span>
            <span class="n">TwoWay</span> <span class="p">=</span> <span class="n">Text</span><span class="p">.</span><span class="n">Text</span><span class="p">;</span>
        <span class="p">}</span>
</code></pre></div></div>

<p>运行代码点击按钮，可以发现只有 Property1 会修改</p>

<p>所有代码在 <a href="https://github.com/lindexi/lindexi_gd/tree/d8adec7d80ebcc5bd019c2695b9788793286b2c7/CelakercalbochallhiNerjufeeqalchelfu">github</a></p>

<p>建议只有在熟悉的属性才可以不写 Mode 防止翻车</p>

<p><a href="https://www.c-sharpcorner.com/article/explain-binding-mode-in-wpf/">Explain Binding Mode In WPF</a></p>

<p><a href="https://docs.microsoft.com/en-us/dotnet/api/system.windows.data.bindingmode?wt.mc_id=MVP">BindingMode Enum (System.Windows.Data)</a></p>

<p><a href="https://stackoverflow.com/questions/1797105/what-are-the-defaults-for-binding-mode-default-for-wpf-controls">.net - What are the defaults for Binding.Mode=Default for WPF controls? - Stack Overflow</a></p>

:ET