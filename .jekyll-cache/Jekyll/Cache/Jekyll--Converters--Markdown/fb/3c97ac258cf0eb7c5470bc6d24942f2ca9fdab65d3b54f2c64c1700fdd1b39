I";<p>经常我写一个类，作为一个工具类，小伙伴会问我这个类的性能，这时我就需要一个标准的工具进行测试。
本文告诉大家如何使用 benchmarkdotnet 做测试。</p>

<!--more-->

<!-- CreateTime:2019/6/11 8:36:22 -->

<p>现在在 github 提交代码，如果有小伙伴想要知道某个函数的性能，就会用 <a href="https://benchmarkdotnet.org/Guides/ChoosingRunStrategy.htm">BenchmarkDotNet</a> 进行测试。</p>

<p>例如我有一个函数 StooTer ，我定义这个函数的性能是非常高，我需要告诉大家在什么的设备运行，但是因为每个人的写法不一样，所以就比较难看。而且谁也不知道你是如何测试，也许使用 StopWatch 或 DateTime 来测试。</p>

<p>但是在 github 经常可以看到下面的测试</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
BenchmarkDotNet=v0.10.14, OS=Windows 10.0.17134
Intel Core i7-6700 CPU 3.40GHz (Skylake), 1 CPU, 8 logical and 4 physical cores
.NET Core SDK=2.1.201
  [Host]     : .NET Core 2.0.7 (CoreCLR 4.6.26328.01, CoreFX 4.6.26403.03), 64bit RyuJIT  [AttachedDebugger]
  DefaultJob : .NET Core 2.0.7 (CoreCLR 4.6.26328.01, CoreFX 4.6.26403.03), 64bit RyuJIT


</code></pre></div></div>

<table>
  <thead>
    <tr>
      <th>Method</th>
      <th style="text-align: right">Mean</th>
      <th style="text-align: right">Error</th>
      <th style="text-align: right">StdDev</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>StooTer</td>
      <td style="text-align: right">384.6 ns</td>
      <td style="text-align: right">7.687 ns</td>
      <td style="text-align: right">9.721 ns</td>
    </tr>
  </tbody>
</table>

<p>这就是使用工具 <a href="https://benchmarkdotnet.org/Guides/ChoosingRunStrategy.htm">BenchmarkDotNet</a> 进行测试。</p>

<p>下面让我告诉大家如何入门 BenchmarkDotNet 进行测试。</p>

<p>首先通过 Nuget 安装 BenchmarkDotNet ，推荐使用命令行安装的方法，因为VisualStudio的速度太慢</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Install</span><span class="p">-</span><span class="n">Package</span> <span class="n">BenchmarkDotNet</span>
</code></pre></div></div>

<p>先来写一个被测试的函数</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">public</span> <span class="k">class</span> <span class="nc">Foo</span>
    <span class="p">{</span>
        <span class="p">[</span><span class="n">Benchmark</span><span class="p">]</span>
        <span class="k">public</span> <span class="k">void</span> <span class="nf">StooTer</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">seenoserBojemchay</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Foo</span><span class="p">[</span><span class="m">1000</span><span class="p">];</span>
            <span class="kt">var</span> <span class="n">sowrornarLeedeLeetall</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Span</span><span class="p">&lt;</span><span class="n">Foo</span><span class="p">&gt;(</span><span class="n">seenoserBojemchay</span><span class="p">,</span> <span class="m">10</span><span class="p">,</span> <span class="m">100</span><span class="p">);</span>
            <span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">temp</span> <span class="k">in</span> <span class="n">sowrornarLeedeLeetall</span><span class="p">)</span>
            <span class="p">{</span>
                
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
</code></pre></div></div>

<p>在被测试的函数上面加上特性 <code class="language-plaintext highlighter-rouge">Benchmark</code> ，注意引用<code class="language-plaintext highlighter-rouge">using BenchmarkDotNet.Attributes</code>才可以这样写</p>

<p>函数用了 Span ，请看<a href="https://lindexi.oschina.io/lindexi/post/C-Span-%E5%85%A5%E9%97%A8.html">C# Span 入门</a></p>

<p>现在可以在 Main 函数使用下面代码进行测试</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>            <span class="kt">var</span> <span class="n">boKar</span> <span class="p">=</span> <span class="n">BenchmarkRunner</span><span class="p">.</span><span class="n">Run</span><span class="p">&lt;</span><span class="n">Foo</span><span class="p">&gt;();</span>
</code></pre></div></div>

<p>注意需要引用<code class="language-plaintext highlighter-rouge">using BenchmarkDotNet.Running</code>，并且在 Release 运行</p>

<p>运行的时候就可以看到显示很多测试，而且从输入的文件夹还可以找到这样的文件，这个文件放在 <code class="language-plaintext highlighter-rouge">$(bin)Release\$(TargetFramework)\BenchmarkDotNet.Artifacts\</code> 文件夹，直接打开就可以找到</p>

<!-- ![](image/C# 标准性能测试/C# 标准性能测试0.png) -->

<p><img src="http://image.acmx.xyz/lindexi%2F2018618164266938.jpg" alt="" /></p>

<p>这时看到的就是标准的测试，可以把这个测试告诉小伙伴</p>

<p>那么这个 benchmark 输出表格是什么意思，例如测试了 Csdn 方法，这时的输出表格请看下面</p>

<table>
  <thead>
    <tr>
      <th>Method</th>
      <th style="text-align: right">Mean</th>
      <th style="text-align: right">Error</th>
      <th style="text-align: right">StdDev</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Csdn</td>
      <td style="text-align: right">384.6 ns</td>
      <td style="text-align: right">7.687 ns</td>
      <td style="text-align: right">9.721 ns</td>
    </tr>
  </tbody>
</table>

<p>在使用 benchmark dotnet 的时候，输出的表格的含义包括了</p>

<ul>
  <li>
    <p>Mean 的意思是 Arithmetic mean of all measurements 所有测量的算术平均值</p>
  </li>
  <li>
    <p>Error 的意思是 Half of 99.9% confidence interval 99.9% 一半的置信度区间</p>
  </li>
  <li>
    <p>StdDev 是所有测量的标准偏差</p>
  </li>
</ul>

<p>在测试过程包括</p>

<p>Pilot： 决定运行几次。</p>

<p>IdleWarmup， IdleTarget：评估BenchmarkDotNet这个工具带来的额外开销。</p>

<p>MainWarmup：测试热身。</p>

<p>MainTarget：测试。</p>

<p>Result：测试结果减去BenchmarkDotNet带来的额外开销。</p>

<p>除了方法可以测试，静态方法也可以测试，使用方法和上面一样</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">public</span> <span class="k">class</span> <span class="nc">Foo</span>
    <span class="p">{</span>
        <span class="p">[</span><span class="n">Benchmark</span><span class="p">]</span>
        <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">StooTer</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">seenoserBojemchay</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Foo</span><span class="p">[</span><span class="m">1000</span><span class="p">];</span>
            <span class="kt">var</span> <span class="n">sowrornarLeedeLeetall</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Span</span><span class="p">&lt;</span><span class="n">Foo</span><span class="p">&gt;(</span><span class="n">seenoserBojemchay</span><span class="p">,</span> <span class="m">10</span><span class="p">,</span> <span class="m">100</span><span class="p">);</span>
            <span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">temp</span> <span class="k">in</span> <span class="n">sowrornarLeedeLeetall</span><span class="p">)</span>
            <span class="p">{</span>
                
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
</code></pre></div></div>

<h2 id="无法运行原因">无法运行原因</h2>

<p>如果在运行出现下面输出，那么请检查是否在 Release 运行，右击项目属性看是否开启优化代码</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Validating benchmarks:
Assembly MerRear which defines benchmarks is non-optimized
Benchmark was built without optimization enabled (most probably a DEBUG configuration). Please, build it in RELEASE
</code></pre></div></div>

<h2 id="单元测试">单元测试</h2>

<p>我写了一个有趣的代码，我需要在单元测试知道这个方法的性能</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">RijutorserMikede</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="k">void</span> <span class="nf">CuserXewafeze</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"德熙逗比"</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
</code></pre></div></div>

<p>这时我右击解决方案新建了一个项目，注意新建的是 XUnit 项目</p>

<!-- ![](image/C# 标准性能测试/C# 标准性能测试1.png) -->

<p><img src="http://image.acmx.xyz/lindexi%2F20186211141464158.jpg" alt="" /></p>

<p>在控制台输入下面的命令安装 xunit.performance.api</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Install</span><span class="p">-</span><span class="n">Package</span> <span class="n">xunit</span><span class="p">.</span><span class="n">performance</span><span class="p">.</span><span class="n">api</span> <span class="p">-</span><span class="n">Version</span> <span class="m">1.0</span><span class="p">.</span><span class="m">0</span><span class="p">-</span><span class="n">beta</span><span class="p">-</span><span class="n">build0019</span> <span class="p">-</span><span class="n">Source</span> <span class="n">https</span><span class="p">:</span><span class="c1">//dotnet.myget.org/F/dotnet-core/api/v3/index.json</span>
</code></pre></div></div>

<p>如果找不到nuget控制台，那么设置 Nuget 添加源 https://dotnet.myget.org/F/dotnet-core/api/v3/index.json</p>

<!-- ![](image/C# 标准性能测试/C# 标准性能测试2.png) -->

<p><img src="http://image.acmx.xyz/lindexi%2F20186211148241177.jpg" alt="" /></p>

<p>搜索 xunit  performance 然后安装，如果搜索不到，点击程序包源，选择全部</p>

<!-- ![](image/C# 标准性能测试/C# 标准性能测试3.png) -->

<p><img src="http://image.acmx.xyz/lindexi%2F20186211149128413.jpg" alt="" /></p>

<p>安装 Microsoft.Diagnostics.Tracing.TraceEvent 在 Nuget.org 就可以找到</p>

<p>创建一个默认的单元测试方法</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">public</span> <span class="k">class</span> <span class="nc">JeltrooWezair</span>
    <span class="p">{</span>
        <span class="p">[</span><span class="n">Fact</span><span class="p">]</span>
        <span class="k">public</span> <span class="k">void</span> <span class="nf">RojallCalja</span><span class="p">()</span>
        <span class="p">{</span>

        <span class="p">}</span>
    <span class="p">}</span>
</code></pre></div></div>

<p>这时需要把 <code class="language-plaintext highlighter-rouge">Fact</code> 修改为 <code class="language-plaintext highlighter-rouge">Benchmark</code> ，然后在函数里写代码</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">using</span> <span class="nn">JacearcairpoPunaimesowstel</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.Xunit.Performance</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Xunit</span><span class="p">;</span>

<span class="c1">// 省略代码</span>

        <span class="p">[</span><span class="n">Benchmark</span><span class="p">]</span>
        <span class="k">public</span> <span class="k">void</span> <span class="nf">RojallCalja</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">iteration</span> <span class="k">in</span> <span class="n">Benchmark</span><span class="p">.</span><span class="n">Iterations</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="c1">// Any per-iteration setup can go here.</span>
                <span class="k">using</span> <span class="p">(</span><span class="n">iteration</span><span class="p">.</span><span class="nf">StartMeasurement</span><span class="p">())</span>
                <span class="p">{</span>
                    <span class="kt">var</span> <span class="n">nepudeSesair</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">RijutorserMikede</span><span class="p">();</span>

                    <span class="n">nepudeSesair</span><span class="p">.</span><span class="nf">CuserXewafeze</span><span class="p">();</span>
                <span class="p">}</span>


                <span class="c1">// ...per-iteration cleanup</span>
            <span class="p">}</span>
        <span class="p">}</span>
</code></pre></div></div>

<p>现在就可以尝试使用 VisualStudio 运行，但是不要使用 Resharper 运行，因为没支持</p>

<p>更多请看<a href="https://github.com/Microsoft/xunit-performance">Microsoft/xunit-performance: Provides extensions over xUnit to author performance tests.</a></p>

<p>课件：<a href="https://r302.cc/5W9GVK">https://r302.cc/5W9GVK</a></p>

<p>参见：<a href="https://www.cnblogs.com/linezero/p/BenchmarkDotNet.html">.NET Core性能测试组件BenchmarkDotNet 支持.NET Framework Mono - LineZero - 博客园</a></p>

<p><a href="http://fresky.github.io/2016/03/06/use-benchmarkdotnet-for-csharp-benchmark/">用BenchmarkDotNet给C#程序做性能测试</a></p>

<p><a href="https://www.cnblogs.com/h82258652/p/8748345.html">使用 BenchmarkDotnet 测试代码性能 - h82258652 - 博客园</a></p>

<p><a href="https://dotnetcoretutorials.com/2017/12/04/benchmarking-net-core-code-benchmarkdotnet/">Benchmarking Your .NET Core Code With BenchmarkDotNet - .NET Core Tutorials</a></p>

<p><a href="https://lindexi.gitee.io/post/C-%E6%A0%87%E5%87%86%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95.html">C# 标准性能测试高级用法</a></p>

:ET