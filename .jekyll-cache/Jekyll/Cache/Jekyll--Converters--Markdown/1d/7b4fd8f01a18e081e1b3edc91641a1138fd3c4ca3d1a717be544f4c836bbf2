I"l<p>本文告诉大家如何在 UWP 中捕获全局的后台线程异常，在出现后台线程异常时，将会让 UWP 程序闪退，但是在退出之前还是可以执行自己的代码</p>

<!--more-->

<!-- CreateTime:2019/12/16 8:56:13 -->

<p>在 UWP 中，如果需要捕获前台线程，也就是 UI 线程的异常，可以参见 <a href="https://www.cnblogs.com/zhs852/p/uwp-global-error-handler.html">UWP 中的全局异常处理</a> 的方法</p>

<p>在 App 的构造函数添加 UnhandledException 事件，在事件方法里面通过参数 UnhandledExceptionEventArgs 可以设置当前这个异常是否被处理，如设置为 true 那么就是被处理的异常，此时的应用不会闪退</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="k">public</span> <span class="nf">App</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="nf">InitializeComponent</span><span class="p">();</span>
            <span class="k">this</span><span class="p">.</span><span class="n">Suspending</span> <span class="p">+=</span> <span class="n">OnSuspending</span><span class="p">;</span>
            <span class="n">UnhandledException</span> <span class="p">+=</span> <span class="n">App_UnhandledException</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">private</span> <span class="k">void</span> <span class="nf">App_UnhandledException</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">Windows</span><span class="p">.</span><span class="n">UI</span><span class="p">.</span><span class="n">Xaml</span><span class="p">.</span><span class="n">UnhandledExceptionEventArgs</span> <span class="n">e</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">e</span><span class="p">.</span><span class="n">Handled</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span><span class="c1">// 设置为 true 那么表示这个异常被处理，应用不会闪退</span>
        <span class="p">}</span>
</code></pre></div></div>

<p>如果是后台线程异常，需要使用 AppDomain.CurrentDomain.UnhandledException 事件</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="k">public</span> <span class="nf">App</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="nf">InitializeComponent</span><span class="p">();</span>
            <span class="k">this</span><span class="p">.</span><span class="n">Suspending</span> <span class="p">+=</span> <span class="n">OnSuspending</span><span class="p">;</span>
            <span class="n">AppDomain</span><span class="p">.</span><span class="n">CurrentDomain</span><span class="p">.</span><span class="n">UnhandledException</span> <span class="p">+=</span> <span class="n">CurrentDomain_UnhandledException</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">private</span> <span class="k">void</span> <span class="nf">CurrentDomain_UnhandledException</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">System</span><span class="p">.</span><span class="n">UnhandledExceptionEventArgs</span> <span class="n">e</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="c1">// 后台线程异常，执行到这里的应用就会闪退</span>
        <span class="p">}</span>
</code></pre></div></div>

<p>触发后台线程异常很简单，请看下面代码</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>            <span class="kt">var</span> <span class="n">thread</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Thread</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="k">throw</span> <span class="k">new</span> <span class="nf">Exception</span><span class="p">());</span>
            <span class="n">thread</span><span class="p">.</span><span class="nf">Start</span><span class="p">();</span>
</code></pre></div></div>

<p>执行到创建线程然后在线程抛出异常，将会进入 <code class="language-plaintext highlighter-rouge">CurrentDomain_UnhandledException</code> 方法，然后应用程序退出。通过这个方法可以在软件退出前做日志记录</p>

<p><a href="https://docs.microsoft.com/en-us/uwp/api/windows.ui.xaml.application.unhandledexception">Application.UnhandledException Event (Windows.UI.Xaml) </a></p>

<p><a href="https://www.cnblogs.com/zhs852/p/uwp-global-error-handler.html">UWP 中的全局异常处理</a></p>

:ET