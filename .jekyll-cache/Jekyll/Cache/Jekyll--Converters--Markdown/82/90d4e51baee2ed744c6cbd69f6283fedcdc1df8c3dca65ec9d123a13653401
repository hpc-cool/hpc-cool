I"5#<p>在 dotnet core 发布的时候，会使用很多文件，这样发给小伙伴使用的时候不是很清真，本文告诉大家一个非官方的方法通过 warp 将多个文件打包为一个文件</p>

<!--more-->

<!-- CreateTime:2020/1/21 9:11:22 -->

<!-- 标签：dotnet,dotnetcore -->

<p>使用非常简单，先和之前相同的方式发布一个 dotnet core 程序，记得需要使用 <code class="language-plaintext highlighter-rouge">--self-contained</code> 发布</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">dotnet</span> <span class="n">publish</span> <span class="p">-</span><span class="n">c</span> <span class="n">Release</span> <span class="p">--</span><span class="n">self</span><span class="p">-</span><span class="n">contained</span> <span class="p">-</span><span class="n">r</span> <span class="n">win</span><span class="p">-</span><span class="n">x86</span>
</code></pre></div></div>

<p>这时可以在输出的文件夹 bin 的 <code class="language-plaintext highlighter-rouge">Release\netcoreapp2.1\win-x86\publish</code> 文件夹看到输出的文件，可以看到输出的文件很多，这时通过 Powershell 下载 warp 工具</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="n">Net</span><span class="p">.</span><span class="n">ServicePointManager</span><span class="p">]::</span><span class="n">SecurityProtocol</span> <span class="p">=</span> <span class="s">"tls12, tls11, tls"</span> <span class="p">;</span> <span class="n">Invoke</span><span class="p">-</span><span class="n">WebRequest</span> <span class="n">https</span><span class="p">:</span><span class="c1">//github.com/dgiagio/warp/releases/download/v0.3.0/windows-x64.warp-packer.exe -OutFile warp-packer.exe</span>
</code></pre></div></div>

<p>当然这个下载方法有些诡异，同时国内的网速也不是很好，可以通过 <a href="https://github.com/dgiagio/warp/releases/download/v0.3.0/windows-x64.warp-packer.exe">官网</a> 或 <a href="https://download.csdn.net/download/lindexi_gd/10946976">csdn</a> 下载</p>

<p>下载之后将 warp-packer.exe 放在 Release\netcoreapp2.1\win-x86\publish 的上一级文件夹里面，就放在 Release\netcoreapp2.1\win-x86 文件夹</p>

<p>这样就可以通过下面的命令打包出一个 exe 包含里面的文件</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">当前的命令行路径是</span> <span class="n">Release</span><span class="err">\</span><span class="n">netcoreapp2</span><span class="p">.</span><span class="m">1</span><span class="err">\</span><span class="n">win</span><span class="p">-</span><span class="n">x86</span>

<span class="p">&gt;</span> <span class="p">.</span><span class="err">\</span><span class="n">warp</span><span class="p">-</span><span class="n">packer</span> <span class="p">--</span><span class="n">arch</span> <span class="n">windows</span><span class="p">-</span><span class="n">x64</span> <span class="p">--</span><span class="n">input_dir</span> <span class="p">.</span><span class="err">\</span><span class="n">publish</span><span class="err">\</span> <span class="p">--</span><span class="n">exec</span> <span class="err">在</span><span class="n">publish</span><span class="err">文件夹里面运行的程序</span> <span class="p">--</span><span class="n">output</span> <span class="err">输出的</span><span class="p">.</span><span class="n">exe</span>
</code></pre></div></div>

<p>如在 Release\netcoreapp2.1\win-x86 里面的可运行程序 exe 是 lindexi.exe 我可以通过下面的代码合并里面的文件为一个 exe 文件</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">.</span><span class="err">\</span><span class="n">warp</span><span class="p">-</span><span class="n">packer</span> <span class="p">--</span><span class="n">arch</span> <span class="n">windows</span><span class="p">-</span><span class="n">x64</span> <span class="p">--</span><span class="n">input_dir</span> <span class="p">.</span><span class="err">\</span><span class="n">publish</span><span class="err">\</span> <span class="p">--</span><span class="n">exec</span> <span class="n">lindexi</span><span class="p">.</span><span class="n">exe</span> <span class="p">--</span><span class="n">output</span> <span class="n">lindexi</span><span class="p">.</span><span class="n">exe</span>
</code></pre></div></div>

<!-- ![](image/dotnet core 发布只有一个 exe 的方法/dotnet core 发布只有一个 exe 的方法0.png) -->

<p><img src="http://image.acmx.xyz/lindexi%2F201921104230270" alt="" /></p>

<p>同时使用这个工具还有一个好处，就是对文件进行压缩</p>

<p>限制：</p>

<p>当前（2019年1月3日）只能发布 x64 的版本的程序，如 windows x64 和 linux x64 程序</p>

<h2 id="命令行工具">命令行工具</h2>

<p>现在可以通过 dotnet 工具使用 warp 发布，在使用之前先安装工具</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">dotnet</span> <span class="n">tool</span> <span class="n">install</span> <span class="p">--</span><span class="k">global</span> <span class="n">dotnet</span><span class="p">-</span><span class="n">warp</span>
</code></pre></div></div>

<p>安装完成可以在输出文件夹里面执行 <code class="language-plaintext highlighter-rouge">dotnet-warp</code> 就可以打包为单个exe文件</p>

<p>这个项目在<a href="https://github.com/dgiagio/warp">github</a>欢迎小伙伴访问</p>

<h2 id="使用-dotnet-命令行发布">使用 dotnet 命令行发布</h2>

<p>在 <a href="https://dotnet.microsoft.com/download/dotnet-core/3.0">dotnet core 3 preview5</a> 支持在命令行一键打包为一个文件</p>

<p>这个文件包含所有的依赖和资源文件，在启动的时候将所有依赖复制到临时文件夹，然后将这些依赖加载。这个解压只会在第一次运行，之后都可以快速启动</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">dotnet</span> <span class="n">publish</span> <span class="p">-</span><span class="n">r</span> <span class="n">win10</span><span class="p">-</span><span class="n">x64</span> <span class="p">/</span><span class="n">p</span><span class="p">:</span><span class="n">PublishSingleFile</span><span class="p">=</span><span class="k">true</span>
</code></pre></div></div>

<p>新建一个控制台创建使用上面命令发布为一个 exe 文件的大小大概是 67M 左右</p>

<p>第一次运行需要解压文件到临时文件夹的 <code class="language-plaintext highlighter-rouge">.net\程序集名\xx</code> 文件夹里面，然后再运行</p>

<h2 id="原理">原理</h2>

<p>其实 Warp 和 dotnet PublishSingleFile 都是一个自压缩包，在第一次运行会将文件解压缩到临时文件夹。如 warp 会解压缩到 <code class="language-plaintext highlighter-rouge">C:\Users\xxx\AppData\Local\warp\packages\app.exe</code> 文件夹，请将上面的 xxx 替换为你的用户名，将 app.exe 替换为实际的应用</p>

<p>特别感谢 <a href="https://github.com/zhusheping">ZhuShePing</a> 大佬告诉我文件解压的地方</p>

<h2 id="隐藏控制台">隐藏控制台</h2>

<p>用 Warp 的方法打包是做套壳，而外层程序是控制台程序，此时双击打开将会看到一个控制台。根据微软的文档，这个可执行的文件是 PE 格式，在 PE 格式的定义上用一个字段表示可执行文件属于控制台还是窗口应用，如果是控制台的就会显示控制台，如果是窗口应用就不会显示控制台。使用这个原理可以通过修改打包后的文件，让这个字段设置为窗口应用具体方法请看 <a href="https://lindexi.gitee.io/post/dotnet-core-%E9%80%9A%E8%BF%87%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6%E5%A4%B4%E7%9A%84%E6%96%B9%E5%BC%8F%E9%9A%90%E8%97%8F%E6%8E%A7%E5%88%B6%E5%8F%B0%E7%AA%97%E5%8F%A3.html">dotnet core 通过修改文件头的方式隐藏控制台窗口</a></p>

<p><a href="https://github.com/dgiagio/warp#windows-1">dgiagio/warp: Create self-contained single binary applications</a></p>

<p><a href="https://github.com/dotnet/corefx/issues/13329">Single exe self contained console app · Issue #13329 · dotnet/corefx</a></p>

<p><a href="https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0-preview-5/">Announcing .NET Core 3.0 Preview 5</a></p>

<p><a href="https://www.cnblogs.com/morang/p/10792109.html">dotnet-warp &amp;&amp; NSSM 部署 .net core 项目到 windows 服务 - 易墨 - 博客园</a></p>

<p><a href="https://www.cnblogs.com/viter/p/13608947.html">.NET5.0 单文件发布打包操作深度剖析 - Ron.Liang - 博客园</a></p>

:ET