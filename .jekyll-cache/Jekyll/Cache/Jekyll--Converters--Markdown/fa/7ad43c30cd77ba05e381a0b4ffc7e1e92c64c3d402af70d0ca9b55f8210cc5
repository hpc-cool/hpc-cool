I"]B<p>本文来聊聊在重写某个类的 GetHashCode 方法时，可以如何实现 GetHashCode 的返回值</p>

<!--more-->

<!-- CreateTime:2021/5/20 19:36:17 -->

<!-- 发布 -->

<p>按照 GetHashCode 方法的原则，要求两个对象如果 Equals 返回 true 那么一定要求 GetHashCode 也返回相同的值。当然，反过来不成立，也就是两个对象返回的 GetHashCode 的值相同，对象可以是不相等的</p>

<p>实现 GetHashCode 方法的方式有很多，最简单的就是通过调用基类的 GetHashCode 方法，代码如下</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="k">public</span> <span class="k">override</span> <span class="kt">int</span> <span class="nf">GetHashCode</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">base</span><span class="p">.</span><span class="nf">GetHashCode</span><span class="p">();</span>
        <span class="p">}</span>
</code></pre></div></div>

<p>第二个方法就是通过 RuntimeHelpers 静态类的 GetHashCode 方法，代码如下</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="k">public</span> <span class="k">override</span> <span class="kt">int</span> <span class="nf">GetHashCode</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">RuntimeHelpers</span><span class="p">.</span><span class="nf">GetHashCode</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
        <span class="p">}</span>
</code></pre></div></div>

<p>如果调用的 <code class="language-plaintext highlighter-rouge">base.GetHashCode</code> 的 base 是 object 类型的，也就是调用了 object 的 GetHashCode 方法，其实和调用 RuntimeHelpers 的 GetHashCode 方法是相同的，因为在 object 方法里面的 GetHashCode 定义如下</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="c1">// GetHashCode is intended to serve as a hash function for this object.</span>
        <span class="c1">// Based on the contents of the object, the hash function will return a suitable</span>
        <span class="c1">// value with a relatively random distribution over the various inputs.</span>
        <span class="c1">//</span>
        <span class="c1">// The default implementation returns the sync block index for this instance.</span>
        <span class="c1">// Calling it on the same object multiple times will return the same value, so</span>
        <span class="c1">// it will technically meet the needs of a hash function, but it's less than ideal.</span>
        <span class="c1">// Objects (&amp; especially value classes) should override this method.</span>
        <span class="k">public</span> <span class="k">virtual</span> <span class="kt">int</span> <span class="nf">GetHashCode</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">RuntimeHelpers</span><span class="p">.</span><span class="nf">GetHashCode</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
        <span class="p">}</span>
</code></pre></div></div>

<p>如果某个类型只有一个字段，期望是作为此字段的包装，那么可以通过返回此字段的 GetHashCode 的值</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">public</span> <span class="k">class</span> <span class="nc">Degree</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nf">Degree</span><span class="p">(</span><span class="kt">int</span> <span class="k">value</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">IntValue</span> <span class="p">=</span> <span class="k">value</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="kt">int</span> <span class="n">IntValue</span>
        <span class="p">{</span>
            <span class="k">get</span> <span class="p">=&gt;</span> <span class="n">_intValue</span><span class="p">;</span>
            <span class="k">private</span> <span class="k">set</span>
            <span class="p">{</span>
                <span class="kt">var</span> <span class="n">d</span> <span class="p">=</span> <span class="k">value</span> <span class="p">%</span> <span class="n">MaxDegreeValue</span><span class="p">;</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">d</span> <span class="p">&lt;</span> <span class="m">0</span><span class="p">)</span> <span class="n">d</span> <span class="p">+=</span> <span class="n">MaxDegreeValue</span><span class="p">;</span>

                <span class="n">_intValue</span> <span class="p">=</span> <span class="n">d</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>


        <span class="c1">/// &lt;inheritdoc /&gt;</span>
        <span class="k">public</span> <span class="k">override</span> <span class="kt">bool</span> <span class="nf">Equals</span><span class="p">(</span><span class="kt">object</span> <span class="n">obj</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">obj</span> <span class="p">==</span> <span class="k">null</span> <span class="p">||</span> <span class="nf">GetType</span><span class="p">()</span> <span class="p">!=</span> <span class="n">obj</span><span class="p">.</span><span class="nf">GetType</span><span class="p">())</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="k">false</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="kt">var</span> <span class="n">p</span> <span class="p">=</span> <span class="p">(</span><span class="n">Degree</span><span class="p">)</span> <span class="n">obj</span><span class="p">;</span>
            <span class="k">return</span> <span class="n">IntValue</span> <span class="p">==</span> <span class="n">p</span><span class="p">.</span><span class="n">IntValue</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">/// &lt;inheritdoc /&gt;</span>
        <span class="k">public</span> <span class="k">override</span> <span class="kt">int</span> <span class="nf">GetHashCode</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">IntValue</span><span class="p">.</span><span class="nf">GetHashCode</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">private</span> <span class="kt">int</span> <span class="n">_intValue</span><span class="p">;</span>
    <span class="p">}</span>
</code></pre></div></div>

<p>如上面代码，返回的就是 IntValue 的 GetHashCode 的值</p>

<p>而如果期望有自己的定制化，可以通过 HashCode 结构体实现定义，例如在 Program 类里面有属性定义如下</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="k">private</span> <span class="kt">double</span> <span class="n">Foo1</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
</code></pre></div></div>

<p>此时如需要将 Foo1 属性加入到 HashCode 可以使用如下代码</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>            <span class="kt">var</span> <span class="n">hashCode</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">HashCode</span><span class="p">();</span>
            <span class="n">hashCode</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">Foo1</span><span class="p">);</span>
            <span class="k">return</span> <span class="n">hashCode</span><span class="p">.</span><span class="nf">ToHashCode</span><span class="p">();</span>
</code></pre></div></div>

<p>在 HashCode 里面将会自动加上一套有趣的机制将传入的多个属性或字段计算出 HashCode 值</p>

<p>如果 HashCode 做不到自己需要的特殊需求，也可以自己动手，毕竟只要返回一个 int 值就可以，只要两个相等的对象返回的 int 值是相同的就没锅</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">public</span> <span class="k">readonly</span> <span class="k">struct</span> <span class="nc">FooInfo</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">TextImageFile</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">BackgroundImageFile</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">bool</span> <span class="n">IsValid</span> <span class="p">=&gt;</span> <span class="n">File</span><span class="p">.</span><span class="nf">Exists</span><span class="p">(</span><span class="n">TextImageFile</span><span class="p">)</span> <span class="p">&amp;&amp;</span> <span class="n">File</span><span class="p">.</span><span class="nf">Exists</span><span class="p">(</span><span class="n">BackgroundImageFile</span><span class="p">);</span>

        <span class="k">public</span> <span class="nf">FooInfo</span><span class="p">(</span><span class="kt">string</span> <span class="n">name</span><span class="p">,</span> <span class="kt">string</span> <span class="n">textImageFile</span><span class="p">,</span> <span class="kt">string</span> <span class="n">backgroundImageFile</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Name</span> <span class="p">=</span> <span class="n">name</span> <span class="p">??</span> <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentNullException</span><span class="p">(</span><span class="k">nameof</span><span class="p">(</span><span class="n">name</span><span class="p">));</span>
            <span class="n">TextImageFile</span> <span class="p">=</span> <span class="n">textImageFile</span> <span class="p">??</span> <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentNullException</span><span class="p">(</span><span class="k">nameof</span><span class="p">(</span><span class="n">textImageFile</span><span class="p">));</span>
            <span class="n">BackgroundImageFile</span> <span class="p">=</span> <span class="n">backgroundImageFile</span> <span class="p">??</span> <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentNullException</span><span class="p">(</span><span class="k">nameof</span><span class="p">(</span><span class="n">backgroundImageFile</span><span class="p">));</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">void</span> <span class="nf">Deconstruct</span><span class="p">(</span><span class="k">out</span> <span class="kt">string</span> <span class="n">name</span><span class="p">,</span> <span class="k">out</span> <span class="kt">string</span> <span class="n">textImageFile</span><span class="p">,</span> <span class="k">out</span> <span class="kt">string</span> <span class="n">backgroundImageFile</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">name</span> <span class="p">=</span> <span class="n">Name</span><span class="p">;</span>
            <span class="n">textImageFile</span> <span class="p">=</span> <span class="n">TextImageFile</span><span class="p">;</span>
            <span class="n">backgroundImageFile</span> <span class="p">=</span> <span class="n">BackgroundImageFile</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">override</span> <span class="kt">bool</span> <span class="nf">Equals</span><span class="p">(</span><span class="kt">object</span><span class="p">?</span> <span class="n">obj</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">obj</span> <span class="k">is</span> <span class="n">FooInfo</span> <span class="n">info</span> <span class="p">&amp;&amp;</span>
                <span class="kt">string</span><span class="p">.</span><span class="nf">Equals</span><span class="p">(</span><span class="n">Name</span><span class="p">,</span> <span class="n">info</span><span class="p">.</span><span class="n">Name</span><span class="p">,</span> <span class="n">StringComparison</span><span class="p">.</span><span class="n">Ordinal</span><span class="p">)</span> <span class="p">&amp;&amp;</span>
                <span class="kt">string</span><span class="p">.</span><span class="nf">Equals</span><span class="p">(</span><span class="n">TextImageFile</span><span class="p">,</span> <span class="n">info</span><span class="p">.</span><span class="n">TextImageFile</span><span class="p">,</span> <span class="n">StringComparison</span><span class="p">.</span><span class="n">OrdinalIgnoreCase</span><span class="p">)</span> <span class="p">&amp;&amp;</span>
                <span class="kt">string</span><span class="p">.</span><span class="nf">Equals</span><span class="p">(</span><span class="n">BackgroundImageFile</span><span class="p">,</span> <span class="n">info</span><span class="p">.</span><span class="n">BackgroundImageFile</span><span class="p">,</span> <span class="n">StringComparison</span><span class="p">.</span><span class="n">OrdinalIgnoreCase</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">override</span> <span class="kt">int</span> <span class="nf">GetHashCode</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">hashCode</span> <span class="p">=</span> <span class="p">-</span><span class="m">1405208737</span><span class="p">;</span>
            <span class="n">hashCode</span> <span class="p">=</span> <span class="n">hashCode</span> <span class="p">*</span> <span class="p">-</span><span class="m">1521134295</span> <span class="p">+</span> <span class="n">StringComparer</span><span class="p">.</span><span class="n">Ordinal</span><span class="p">.</span><span class="nf">GetHashCode</span><span class="p">(</span><span class="n">Name</span><span class="p">);</span>
            <span class="n">hashCode</span> <span class="p">=</span> <span class="n">hashCode</span> <span class="p">*</span> <span class="p">-</span><span class="m">1521134295</span> <span class="p">+</span> <span class="n">StringComparer</span><span class="p">.</span><span class="n">OrdinalIgnoreCase</span><span class="p">.</span><span class="nf">GetHashCode</span><span class="p">(</span><span class="n">TextImageFile</span><span class="p">);</span>
            <span class="n">hashCode</span> <span class="p">=</span> <span class="n">hashCode</span> <span class="p">*</span> <span class="p">-</span><span class="m">1521134295</span> <span class="p">+</span> <span class="n">StringComparer</span><span class="p">.</span><span class="n">OrdinalIgnoreCase</span><span class="p">.</span><span class="nf">GetHashCode</span><span class="p">(</span><span class="n">BackgroundImageFile</span><span class="p">);</span>
            <span class="k">return</span> <span class="n">hashCode</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
</code></pre></div></div>

<p>以上代码的 IsValid 属性没有影响判断相等，因此可以忽略不计。而 TextImageFile 和 BackgroundImageFile 都是路径字符串，应该忽略大小写，但 Name 属性是区分大小写的，通过 StringComparer 静态类的辅助可以协助计算出值</p>

<p>上面代码的常数都是随意写的值</p>

<p>本文所有代码放在 <a href="https://github.com/lindexi/lindexi_gd/tree/29e75275644d85845fe458c554c029a26cb4f72b/JerjowhibeaBirakereheewar">github</a> 和 <a href="https://gitee.com/lindexi/lindexi_gd/tree/29e75275644d85845fe458c554c029a26cb4f72b/JerjowhibeaBirakereheewar">gitee</a> 欢迎小伙伴访问</p>

:ET