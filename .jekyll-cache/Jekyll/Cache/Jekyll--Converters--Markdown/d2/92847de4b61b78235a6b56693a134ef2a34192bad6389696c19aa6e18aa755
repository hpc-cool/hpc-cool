I"l<p>在 asp dotnet core 3.0 默认的 webapi 返回接口都是返回 json 格式，同时这个 json 格式使用的是 CamelCase 属性名风格。如果想要兼容之前的格式，让 webapi 返回的 json 的属性名使用 PascalCase 格式，那么请看本文</p>

<!--more-->

<!-- CreateTime:2019/9/23 18:39:17 -->

<!-- csdn -->

<p>默认的 ASP.NET Core 3.0 的 WebAPI 的 json 返回值的属性使用首字符小写的 CamelCase 属性名风格，可以通过在 ConfigureServices 方法配置让返回值属性使用其他风格</p>

<p>最简单的方法是设置 PropertyNamingPolicy 属性，请看代码</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>            <span class="n">services</span><span class="p">.</span><span class="nf">AddControllers</span><span class="p">()</span>
                <span class="p">.</span><span class="nf">AddJsonOptions</span><span class="p">(</span><span class="n">options</span> <span class="p">=&gt;</span> <span class="n">options</span><span class="p">.</span><span class="n">JsonSerializerOptions</span><span class="p">.</span><span class="n">PropertyNamingPolicy</span> <span class="p">=</span> <span class="k">null</span><span class="p">);</span>
</code></pre></div></div>

<p>另一个是通过 NewtonsoftJson 设置</p>

<p>首先安装 <a href="https://nuget.org/packages/Microsoft.AspNetCore.Mvc.NewtonsoftJson">Microsoft.AspNetCore.Mvc.NewtonsoftJson</a> 库</p>

<p>安装之后可以在 Startup.cs 文件里面的 ConfigureServices 方法添加设置</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="k">public</span> <span class="k">void</span> <span class="nf">ConfigureServices</span><span class="p">(</span><span class="n">IServiceCollection</span> <span class="n">services</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">services</span><span class="p">.</span><span class="nf">AddControllers</span><span class="p">()</span>
                <span class="p">.</span><span class="nf">AddNewtonsoftJson</span><span class="p">(</span><span class="n">options</span> <span class="p">=&gt;</span> <span class="n">options</span><span class="p">.</span><span class="n">SerializerSettings</span><span class="p">.</span><span class="n">ContractResolver</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">DefaultContractResolver</span><span class="p">()</span> <span class="p">{</span> <span class="n">NamingStrategy</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">DefaultNamingStrategy</span><span class="p">()</span> <span class="p">});</span>
        <span class="p">}</span>
</code></pre></div></div>

<p>这样默认的 json 返回值属性使用首字符大写的 PascalCase 属性名风格</p>

<p>使用 DefaultContractResolver 就是 PascalCase 风格</p>

<p>使用 CamelCasePropertyNamesContractResolver 就是 CamelCase 风格</p>

<p>注意，在一些版本，可以是 AddMvc 方法，请看下面</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">services</span><span class="p">.</span><span class="nf">AddMvc</span><span class="p">()</span>
    <span class="p">.</span><span class="nf">AddNewtonsoftJson</span><span class="p">(</span><span class="n">options</span> <span class="p">=&gt;</span>
           <span class="n">options</span><span class="p">.</span><span class="n">SerializerSettings</span><span class="p">.</span><span class="n">ContractResolver</span> <span class="p">=</span>
              <span class="k">new</span> <span class="nf">DefaultContractResolver</span><span class="p">());</span>
</code></pre></div></div>

<p><a href="https://docs.microsoft.com/en-us/aspnet/core/migration/22-to-30?view=aspnetcore-2.2&amp;tabs=visual-studio&amp;WT.mc_id=WD-MVP-5003260">Migrate from ASP.NET Core 2.2 to 3.0 Preview</a></p>

<p><a href="https://andrewlock.net/serializing-a-pascalcase-newtonsoft-json-jobject-to-camelcase/?WT.mc_id=WD-MVP-5003260">Serializing a PascalCase Newtonsoft.Json JObject to camelCase</a></p>

:ET