I"Ëv<p>Here is my code to conver between OpenXML units.</p>

<!--more-->

<!-- CreateTime:2020/3/12 18:11:17 -->

<h2 id="define">Define</h2>

<p>If you use csharp language version lower than 7.0, please remove the readonly keyword from the C# code below</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">public</span> <span class="k">readonly</span> <span class="k">struct</span> <span class="nc">Cm</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nf">Cm</span><span class="p">(</span><span class="kt">double</span> <span class="k">value</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Value</span> <span class="p">=</span> <span class="k">value</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="kt">double</span> <span class="n">Value</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">readonly</span> <span class="k">struct</span> <span class="nc">Dxa</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nf">Dxa</span><span class="p">(</span><span class="kt">double</span> <span class="k">value</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Value</span> <span class="p">=</span> <span class="k">value</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="kt">double</span> <span class="n">Value</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">readonly</span> <span class="k">struct</span> <span class="nc">Emu</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nf">Emu</span><span class="p">(</span><span class="kt">double</span> <span class="k">value</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Value</span> <span class="p">=</span> <span class="k">value</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="kt">double</span> <span class="n">Value</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">readonly</span> <span class="k">struct</span> <span class="nc">FiftiethsOfAPercent</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nf">FiftiethsOfAPercent</span><span class="p">(</span><span class="kt">double</span> <span class="k">value</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Value</span> <span class="p">=</span> <span class="k">value</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="kt">double</span> <span class="n">Value</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">readonly</span> <span class="k">struct</span> <span class="nc">HalfPoint</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nf">HalfPoint</span><span class="p">(</span><span class="kt">double</span> <span class="k">value</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Value</span> <span class="p">=</span> <span class="k">value</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="kt">double</span> <span class="n">Value</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">readonly</span> <span class="k">struct</span> <span class="nc">Inch</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nf">Inch</span><span class="p">(</span><span class="kt">double</span> <span class="k">value</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Value</span> <span class="p">=</span> <span class="k">value</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="kt">double</span> <span class="n">Value</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">readonly</span> <span class="k">struct</span> <span class="nc">Mm</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nf">Mm</span><span class="p">(</span><span class="kt">double</span> <span class="k">value</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Value</span> <span class="p">=</span> <span class="k">value</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="kt">double</span> <span class="n">Value</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">readonly</span> <span class="k">struct</span> <span class="nc">Pixel</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nf">Pixel</span><span class="p">(</span><span class="kt">double</span> <span class="k">value</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Value</span> <span class="p">=</span> <span class="k">value</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="kt">double</span> <span class="n">Value</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">readonly</span> <span class="k">struct</span> <span class="nc">Pt</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nf">Pt</span><span class="p">(</span><span class="kt">double</span> <span class="k">value</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Value</span> <span class="p">=</span> <span class="k">value</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="kt">double</span> <span class="n">Value</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
</code></pre></div></div>

<h2 id="convert">Convert</h2>

<p>This is the code for converting different units of OpenXML</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">UnitConverter</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="k">const</span> <span class="kt">double</span> <span class="n">DefaultDpi</span> <span class="p">=</span> <span class="m">96</span><span class="p">;</span>

        <span class="err">#</span><span class="n">region</span> <span class="n">Pixel</span>

        <span class="k">public</span> <span class="k">static</span> <span class="n">Pixel</span> <span class="nf">ToPixel</span><span class="p">(</span><span class="k">this</span> <span class="n">Inch</span> <span class="n">inch</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="n">inch</span><span class="p">.</span><span class="nf">ToEmu</span><span class="p">().</span><span class="nf">ToPixel</span><span class="p">();</span>

        <span class="k">public</span> <span class="k">static</span> <span class="n">Inch</span> <span class="nf">ToInch</span><span class="p">(</span><span class="k">this</span> <span class="n">Pixel</span> <span class="n">pixel</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="n">pixel</span><span class="p">.</span><span class="nf">ToEmu</span><span class="p">().</span><span class="nf">ToInch</span><span class="p">();</span>

        <span class="err">#</span><span class="n">endregion</span>

        <span class="err">#</span><span class="n">region</span> <span class="n">Dxa</span>

        <span class="k">public</span> <span class="k">static</span> <span class="n">Pt</span> <span class="nf">ToPt</span><span class="p">(</span><span class="k">this</span> <span class="n">Dxa</span> <span class="n">dxa</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nf">Pt</span><span class="p">(</span><span class="n">dxa</span><span class="p">.</span><span class="n">Value</span> <span class="p">/</span> <span class="m">20</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">static</span> <span class="n">Dxa</span> <span class="nf">ToDxa</span><span class="p">(</span><span class="k">this</span> <span class="n">Pt</span> <span class="n">pt</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nf">Dxa</span><span class="p">(</span><span class="n">pt</span><span class="p">.</span><span class="n">Value</span> <span class="p">*</span> <span class="m">20</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">static</span> <span class="n">Inch</span> <span class="nf">ToInch</span><span class="p">(</span><span class="k">this</span> <span class="n">Dxa</span> <span class="n">dxa</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nf">Inch</span><span class="p">(</span><span class="n">dxa</span><span class="p">.</span><span class="n">Value</span> <span class="p">/</span> <span class="m">72</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">static</span> <span class="n">Dxa</span> <span class="nf">ToDxa</span><span class="p">(</span><span class="k">this</span> <span class="n">Inch</span> <span class="n">inch</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nf">Dxa</span><span class="p">(</span><span class="n">inch</span><span class="p">.</span><span class="n">Value</span> <span class="p">*</span> <span class="m">72</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="err">#</span><span class="n">endregion</span>

        <span class="err">#</span><span class="n">region</span> <span class="n">Mm</span>

        <span class="k">public</span> <span class="k">static</span> <span class="n">Cm</span> <span class="nf">ToCm</span><span class="p">(</span><span class="k">this</span> <span class="n">Mm</span> <span class="n">mm</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nf">Cm</span><span class="p">(</span><span class="n">mm</span><span class="p">.</span><span class="n">Value</span> <span class="p">/</span> <span class="m">10</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">static</span> <span class="n">Mm</span> <span class="nf">ToMm</span><span class="p">(</span><span class="k">this</span> <span class="n">Cm</span> <span class="n">cm</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nf">Mm</span><span class="p">(</span><span class="n">cm</span><span class="p">.</span><span class="n">Value</span> <span class="p">*</span> <span class="m">10</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="err">#</span><span class="n">endregion</span>

        <span class="err">#</span><span class="n">region</span> <span class="n">Pt</span>

        <span class="k">public</span> <span class="k">static</span> <span class="n">Cm</span> <span class="nf">ToCm</span><span class="p">(</span><span class="k">this</span> <span class="n">Pt</span> <span class="n">pt</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">pt</span><span class="p">.</span><span class="nf">ToEmu</span><span class="p">().</span><span class="nf">ToCm</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">static</span> <span class="n">Pt</span> <span class="nf">ToPt</span><span class="p">(</span><span class="k">this</span> <span class="n">Cm</span> <span class="n">cm</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">cm</span><span class="p">.</span><span class="nf">ToEmu</span><span class="p">().</span><span class="nf">ToPt</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">static</span> <span class="n">Mm</span> <span class="nf">ToMm</span><span class="p">(</span><span class="k">this</span> <span class="n">Pt</span> <span class="n">pt</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">pt</span><span class="p">.</span><span class="nf">ToCm</span><span class="p">().</span><span class="nf">ToMm</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">static</span> <span class="n">Pt</span> <span class="nf">ToPt</span><span class="p">(</span><span class="k">this</span> <span class="n">Mm</span> <span class="n">mm</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">mm</span><span class="p">.</span><span class="nf">ToCm</span><span class="p">().</span><span class="nf">ToPt</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">static</span> <span class="n">Pt</span> <span class="nf">ToPt</span><span class="p">(</span><span class="k">this</span> <span class="n">HalfPoint</span> <span class="n">halfPoint</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nf">Pt</span><span class="p">(</span><span class="n">halfPoint</span><span class="p">.</span><span class="n">Value</span> <span class="p">/</span> <span class="m">2</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">static</span> <span class="n">HalfPoint</span> <span class="nf">ToHalfPoint</span><span class="p">(</span><span class="k">this</span> <span class="n">Pt</span> <span class="n">pt</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nf">HalfPoint</span><span class="p">(</span><span class="n">pt</span><span class="p">.</span><span class="n">Value</span> <span class="p">*</span> <span class="m">2</span><span class="p">);</span>
        <span class="p">}</span>


        <span class="k">public</span> <span class="k">static</span> <span class="n">Pixel</span> <span class="nf">ToPixel</span><span class="p">(</span><span class="k">this</span> <span class="n">Pt</span> <span class="n">pt</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nf">Pixel</span><span class="p">(</span><span class="n">pt</span><span class="p">.</span><span class="n">Value</span> <span class="p">/</span> <span class="m">72</span> <span class="p">*</span> <span class="n">DefaultDpi</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">static</span> <span class="n">Pt</span> <span class="nf">ToPoint</span><span class="p">(</span><span class="k">this</span> <span class="n">Pixel</span> <span class="n">px</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nf">Pt</span><span class="p">(</span><span class="n">px</span><span class="p">.</span><span class="n">Value</span> <span class="p">*</span> <span class="m">72</span> <span class="p">/</span> <span class="n">DefaultDpi</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="err">#</span><span class="n">endregion</span>

        <span class="err">#</span><span class="n">region</span> <span class="n">Emu</span>

        <span class="k">public</span> <span class="k">static</span> <span class="n">Emu</span> <span class="nf">ToEmu</span><span class="p">(</span><span class="k">this</span> <span class="n">Inch</span> <span class="n">inch</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nf">Emu</span><span class="p">(</span><span class="n">inch</span><span class="p">.</span><span class="n">Value</span> <span class="p">*</span> <span class="m">914400</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">static</span> <span class="n">Inch</span> <span class="nf">ToInch</span><span class="p">(</span><span class="k">this</span> <span class="n">Emu</span> <span class="n">emu</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nf">Inch</span><span class="p">(</span><span class="n">emu</span><span class="p">.</span><span class="n">Value</span> <span class="p">/</span> <span class="m">914400</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">static</span> <span class="n">Emu</span> <span class="nf">ToEmu</span><span class="p">(</span><span class="k">this</span> <span class="n">Cm</span> <span class="n">cm</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nf">Emu</span><span class="p">(</span><span class="n">cm</span><span class="p">.</span><span class="n">Value</span> <span class="p">*</span> <span class="m">360000</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">static</span> <span class="n">Cm</span> <span class="nf">ToCm</span><span class="p">(</span><span class="k">this</span> <span class="n">Emu</span> <span class="n">emu</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nf">Cm</span><span class="p">(</span><span class="n">emu</span><span class="p">.</span><span class="n">Value</span> <span class="p">/</span> <span class="m">360000</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">static</span> <span class="n">Emu</span> <span class="nf">ToEmu</span><span class="p">(</span><span class="k">this</span> <span class="n">Mm</span> <span class="n">cm</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nf">Emu</span><span class="p">(</span><span class="n">cm</span><span class="p">.</span><span class="n">Value</span> <span class="p">*</span> <span class="m">36000</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">static</span> <span class="n">Dxa</span> <span class="nf">ToDxa</span><span class="p">(</span><span class="k">this</span> <span class="n">Emu</span> <span class="n">emu</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nf">Dxa</span><span class="p">(</span><span class="n">emu</span><span class="p">.</span><span class="n">Value</span> <span class="p">/</span> <span class="m">635</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">static</span> <span class="n">Emu</span> <span class="nf">ToEmu</span><span class="p">(</span><span class="k">this</span> <span class="n">Dxa</span> <span class="n">dxa</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nf">Emu</span><span class="p">(</span><span class="n">dxa</span><span class="p">.</span><span class="n">Value</span> <span class="p">*</span> <span class="m">635</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">static</span> <span class="n">Mm</span> <span class="nf">ToMm</span><span class="p">(</span><span class="k">this</span> <span class="n">Emu</span> <span class="n">emu</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nf">Mm</span><span class="p">(</span><span class="n">emu</span><span class="p">.</span><span class="n">Value</span> <span class="p">/</span> <span class="m">36000</span><span class="p">);</span>
        <span class="p">}</span>


        <span class="k">public</span> <span class="k">static</span> <span class="n">Emu</span> <span class="nf">ToEmu</span><span class="p">(</span><span class="k">this</span> <span class="n">Pixel</span> <span class="n">px</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nf">Emu</span><span class="p">(</span><span class="n">px</span><span class="p">.</span><span class="n">Value</span> <span class="p">*</span> <span class="m">914400</span> <span class="p">/</span> <span class="n">DefaultDpi</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">static</span> <span class="n">Pixel</span> <span class="nf">ToPixel</span><span class="p">(</span><span class="k">this</span> <span class="n">Emu</span> <span class="n">emu</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nf">Pixel</span><span class="p">(</span><span class="n">emu</span><span class="p">.</span><span class="n">Value</span> <span class="p">/</span> <span class="m">914400</span> <span class="p">*</span> <span class="n">DefaultDpi</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">static</span> <span class="n">Emu</span> <span class="nf">ToEmu</span><span class="p">(</span><span class="k">this</span> <span class="n">Pt</span> <span class="n">pt</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nf">Emu</span><span class="p">(</span><span class="n">pt</span><span class="p">.</span><span class="n">Value</span> <span class="p">*</span> <span class="m">12700</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">static</span> <span class="n">Pt</span> <span class="nf">ToPt</span><span class="p">(</span><span class="k">this</span> <span class="n">Emu</span> <span class="n">emu</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nf">Pt</span><span class="p">(</span><span class="n">emu</span><span class="p">.</span><span class="n">Value</span> <span class="p">/</span> <span class="m">12700</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="err">#</span><span class="n">endregion</span>
    <span class="p">}</span>
</code></pre></div></div>

<h2 id="test">Test</h2>

<p>The code in this article is not technical, but if you copy the code, it will reduce your time.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="k">private</span> <span class="k">void</span> <span class="nf">AssertDoubleEqual</span><span class="p">(</span><span class="kt">double</span> <span class="n">a</span><span class="p">,</span> <span class="kt">double</span> <span class="n">b</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Assert</span><span class="p">.</span><span class="nf">AreEqual</span><span class="p">(</span><span class="k">true</span><span class="p">,</span> <span class="n">Math</span><span class="p">.</span><span class="nf">Abs</span><span class="p">(</span><span class="n">a</span> <span class="p">-</span> <span class="n">b</span><span class="p">)</span> <span class="p">&lt;</span> <span class="m">0.001</span><span class="p">);</span>
        <span class="p">}</span>

                <span class="kt">var</span> <span class="n">pt</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Pt</span><span class="p">(</span><span class="m">1</span><span class="p">);</span>

                <span class="nf">AssertDoubleEqual</span><span class="p">(</span><span class="m">20</span><span class="p">,</span> <span class="n">pt</span><span class="p">.</span><span class="nf">ToDxa</span><span class="p">().</span><span class="n">Value</span><span class="p">);</span>
                <span class="nf">AssertDoubleEqual</span><span class="p">(</span><span class="m">12700</span><span class="p">,</span> <span class="n">pt</span><span class="p">.</span><span class="nf">ToEmu</span><span class="p">().</span><span class="n">Value</span><span class="p">);</span>
                <span class="nf">AssertDoubleEqual</span><span class="p">(</span><span class="m">0.3527777777777777</span><span class="p">,</span> <span class="n">pt</span><span class="p">.</span><span class="nf">ToMm</span><span class="p">().</span><span class="n">Value</span><span class="p">);</span>
                <span class="nf">AssertDoubleEqual</span><span class="p">(</span><span class="m">0.035277777777777776</span><span class="p">,</span> <span class="n">pt</span><span class="p">.</span><span class="nf">ToCm</span><span class="p">().</span><span class="n">Value</span><span class="p">);</span>
                <span class="nf">AssertDoubleEqual</span><span class="p">(</span><span class="m">0.01388888888</span><span class="p">,</span> <span class="n">pt</span><span class="p">.</span><span class="nf">ToEmu</span><span class="p">().</span><span class="nf">ToInch</span><span class="p">().</span><span class="n">Value</span><span class="p">);</span>

                <span class="kt">var</span> <span class="n">mm</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Mm</span><span class="p">(</span><span class="m">1000</span><span class="p">);</span>

                <span class="nf">AssertDoubleEqual</span><span class="p">(</span><span class="m">100</span><span class="p">,</span> <span class="n">mm</span><span class="p">.</span><span class="nf">ToCm</span><span class="p">().</span><span class="n">Value</span><span class="p">);</span>
                <span class="nf">AssertDoubleEqual</span><span class="p">(</span><span class="m">39.370078740157</span><span class="p">,</span> <span class="n">mm</span><span class="p">.</span><span class="nf">ToEmu</span><span class="p">().</span><span class="nf">ToInch</span><span class="p">().</span><span class="n">Value</span><span class="p">);</span>
                <span class="nf">AssertDoubleEqual</span><span class="p">(</span><span class="m">2834.64566929133</span><span class="p">,</span> <span class="n">mm</span><span class="p">.</span><span class="nf">ToPt</span><span class="p">().</span><span class="n">Value</span><span class="p">);</span>
                <span class="nf">AssertDoubleEqual</span><span class="p">(</span><span class="m">56692.913385826</span><span class="p">,</span> <span class="n">mm</span><span class="p">.</span><span class="nf">ToEmu</span><span class="p">().</span><span class="nf">ToDxa</span><span class="p">().</span><span class="n">Value</span><span class="p">);</span>
                <span class="nf">AssertDoubleEqual</span><span class="p">(</span><span class="m">36000000</span><span class="p">,</span> <span class="n">mm</span><span class="p">.</span><span class="nf">ToEmu</span><span class="p">().</span><span class="n">Value</span><span class="p">);</span>
</code></pre></div></div>

<p>See <a href="https://en.wikipedia.org/wiki/Office_Open_XML_file_formats">Office Open XML file formats - Wikipedia</a></p>

<p><a href="http://polymathprogrammer.com/2009/10/22/english-metric-units-and-open-xml/">English Metric Units and Open XML</a></p>

<p><a href="http://lcorneliussen.de/raw/dashboards/ooxml/">Office Open XML Dashboard</a></p>

<p><a href="https://startbigthinksmall.wordpress.com/2010/01/04/points-inches-and-emus-measuring-units-in-office-open-xml/">Points, inches and Emus: Measuring units in Office Open XML â Lars Corneliussen</a></p>

<p><a href="https://zhuanlan.zhihu.com/p/78307080">[è¯]PointsãinchesåEMUsï¼Office Open XMLä¸­çåº¦éåä½ - ç¥ä¹</a></p>

<p><a href="https://blog.lindexi.com/post/Office-Open-XML-%E7%9A%84%E6%B5%8B%E9%87%8F%E5%8D%95%E4%BD%8D.html">Office Open XML çæµéåä½</a></p>

:ET