I";2<p>在 VisualStudio 右击任意的文件夹，点击属性，可以看到属性里面有一个选项是自定义工具。如果创建的是 WPF 项目，可以看到页面或用户控件的自定义工具是 XamlIntelliSenseFileGenerator 可以用来在设计时转换文件，将转换的输出放在另一个文件中。通过这个方法可以自己定义一些内容，在修改内容文件的时候自动生成代码</p>

<!--more-->

<!-- CreateTime:2019/4/26 10:49:32 -->

<!-- csdn -->
<!-- 标签：VisualStudio -->

<p>我最近在做优化，我想将一个自定义的 yml 文件编译为一个类，这样我可以提高软件的运行速度。我想做到和编译 xaml 一样，在 xaml 修改的时候就自动将 yml 编译为一个类，于是我就找到了自定义工具</p>

<p>本文的方法将是在 VisualStudio 2019 使用的方法，在 VisualStudio 2019 的<a href="https://blog.lindexi.com/post/VisualStudio-2019-%E6%96%B0%E7%89%B9%E6%80%A7.html">特性</a> 就提供了新的插件 Nuget 包使用方法十分简单</p>

<p>在安装 Visual Studio 2019 的时候，可以选择插件开发，这时可以在新的欢迎界面快速创建插件</p>

<p>现在创建的插件默认给的是 AsyncPackage 而不是之前的 Package 这个类不需要修改内容</p>

<p>创建一个新的类，这个类继承 IVsSingleFileGenerator 接口，这样就可以用来创建文件了。在继承这个接口之后，可以发现需要重写两个方法，第一个方法是 DefaultExtension 方法，这个方法需要返回转换创建的文件的后缀名，同时返回后缀名的字符长度</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="k">public</span> <span class="kt">int</span> <span class="nf">DefaultExtension</span><span class="p">(</span><span class="k">out</span> <span class="kt">string</span> <span class="n">defaultExtension</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">defaultExtension</span> <span class="p">=</span> <span class="s">".generated.cs"</span><span class="p">;</span>
            <span class="k">return</span> <span class="n">defaultExtension</span><span class="p">.</span><span class="n">Length</span><span class="p">;</span>
        <span class="p">}</span>
</code></pre></div></div>

<p>在自定义工具可以自动创建一个和设置自定义工具的文件的相同命名的文件，只是这个文件的后缀名修改为这个方法返回的后缀名。因为这个方法可能是会被一些不清真的代码使用，所以需要返回当前的字符串的长度</p>

<p>第二个方法是 Generate 这是一个核心的方法，在设置使用自定义工具的文件被更改的时候，将会自动调用这个方法。在这个方法的输出里面相对有一些坑，我想要输出林德熙是逗比这个字符串到文件，我需要使用下面代码</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="k">public</span> <span class="kt">int</span> <span class="nf">Generate</span><span class="p">(</span><span class="kt">string</span> <span class="n">wszInputFilePath</span><span class="p">,</span> <span class="kt">string</span> <span class="n">bstrInputFileContents</span><span class="p">,</span> <span class="kt">string</span> <span class="n">wszDefaultNamespace</span><span class="p">,</span> <span class="n">IntPtr</span><span class="p">[]</span> <span class="n">rgbOutputFileContents</span><span class="p">,</span> <span class="k">out</span> <span class="kt">uint</span> <span class="n">pcbOutput</span><span class="p">,</span> <span class="n">IVsGeneratorProgress</span> <span class="n">pGenerateProgress</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">bytes</span> <span class="p">=</span> <span class="n">Encoding</span><span class="p">.</span><span class="n">UTF8</span><span class="p">.</span><span class="nf">GetBytes</span><span class="p">(</span><span class="s">"林德熙是逗比"</span><span class="p">);</span>
            <span class="kt">var</span> <span class="n">length</span> <span class="p">=</span> <span class="n">bytes</span><span class="p">.</span><span class="n">Length</span><span class="p">;</span>

            <span class="n">rgbOutputFileContents</span><span class="p">[</span><span class="m">0</span><span class="p">]</span> <span class="p">=</span> <span class="n">Marshal</span><span class="p">.</span><span class="nf">AllocCoTaskMem</span><span class="p">(</span><span class="n">length</span><span class="p">);</span>
            <span class="n">Marshal</span><span class="p">.</span><span class="nf">Copy</span><span class="p">(</span><span class="n">bytes</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="n">rgbOutputFileContents</span><span class="p">[</span><span class="m">0</span><span class="p">],</span> <span class="n">length</span><span class="p">);</span>
            <span class="n">pcbOutput</span> <span class="p">=</span> <span class="p">(</span><span class="kt">uint</span><span class="p">)</span> <span class="n">length</span><span class="p">;</span>

            <span class="k">return</span> <span class="n">VSConstants</span><span class="p">.</span><span class="n">S_OK</span><span class="p">;</span>
        <span class="p">}</span>
</code></pre></div></div>

<p>这个方法的参数含义</p>

<ul>
  <li>wszInputFilePath 文件的绝对路径</li>
  <li>bstrInputFileContents 文件的内容，可能出现编码问题</li>
  <li>wszDefaultNamespace 建议的命名空间</li>
  <li>rgbOutputFileContents 输出的内容</li>
  <li>pcbOutput 输出的长度</li>
</ul>

<p>需要将输出的字符串先转 byte 数组，然后赋值给输出的内容返回输出内容的长度。还需要在赋值之前先申请一段内存</p>

<p>当然为了让 VisualStudio 能发现这个类，需要添加一些特性</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="p">[</span><span class="nf">ComVisible</span><span class="p">(</span><span class="k">true</span><span class="p">)]</span>
    <span class="p">[</span><span class="nf">Guid</span><span class="p">(</span><span class="n">FilePluralizationGeneratorId</span><span class="p">)]</span>
    <span class="p">[</span><span class="nf">CodeGeneratorRegistrationAttribute</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">FilePluralizationGenerator</span><span class="p">),</span> <span class="k">nameof</span><span class="p">(</span><span class="n">FilePluralizationGenerator</span><span class="p">),</span> <span class="n">VSConstants</span><span class="p">.</span><span class="n">UICONTEXT</span><span class="p">.</span><span class="n">CSharpProject_string</span><span class="p">,</span> <span class="n">GeneratesDesignTimeSource</span> <span class="p">=</span> <span class="k">true</span><span class="p">)]</span>
    <span class="p">[</span><span class="nf">ProvideObject</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">FilePluralizationGenerator</span><span class="p">))]</span>
    <span class="k">public</span> <span class="k">sealed</span> <span class="k">class</span> <span class="nc">FilePluralizationGenerator</span> <span class="p">:</span> <span class="n">IVsSingleFileGenerator</span>
</code></pre></div></div>

<p>这里的 ProvideObject 是做注入使用的，添加这个特性将会注入到 VisualStudio 插件，但是如果有看过之前的博客，就会发现默认需要自己修改注册表的方法才能做到使用自定义工具，现在可以创建 CodeGeneratorRegistrationAttribute 这个类，继承 RegistrationAttribute 做到修改注册表，请看代码</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="p">[</span><span class="nf">AttributeUsage</span><span class="p">(</span><span class="n">AttributeTargets</span><span class="p">.</span><span class="n">Class</span><span class="p">,</span> <span class="n">AllowMultiple</span> <span class="p">=</span> <span class="k">true</span><span class="p">)]</span>
    <span class="k">public</span> <span class="k">sealed</span> <span class="k">class</span> <span class="nc">CodeGeneratorRegistrationAttribute</span> <span class="p">:</span> <span class="n">RegistrationAttribute</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nf">CodeGeneratorRegistrationAttribute</span><span class="p">(</span><span class="n">Type</span> <span class="n">generatorType</span><span class="p">,</span> <span class="kt">string</span> <span class="n">generatorName</span><span class="p">,</span> <span class="kt">string</span> <span class="n">contextGuid</span><span class="p">)</span>
        <span class="p">{</span>
           
        <span class="p">}</span>

        
        <span class="c1">/// &lt;summary&gt; </span>
        <span class="c1">///     Called to register this attribute with the given context.  The context </span>
        <span class="c1">///     contains the location where the registration information should be placed. </span>
        <span class="c1">///     It also contains other information such as the type being registered and path information. </span>
        <span class="c1">/// &lt;/summary&gt; </span>
        <span class="k">public</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">Register</span><span class="p">(</span><span class="n">RegistrationContext</span> <span class="n">context</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="c1">// 写注册表</span>
        <span class="p">}</span>

        <span class="c1">/// &lt;summary&gt; </span>
        <span class="c1">/// Unregister this file extension. </span>
        <span class="c1">/// &lt;/summary&gt; </span>
        <span class="c1">/// &lt;param name="context"&gt;&lt;/param&gt; </span>
        <span class="k">public</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">Unregister</span><span class="p">(</span><span class="n">RegistrationContext</span> <span class="n">context</span><span class="p">)</span>
        <span class="p">{</span>

        <span class="p">}</span>
    <span class="p">}</span>
</code></pre></div></div>

<p>此时在 FilePluralizationGenerator 上进行断点，然后运行插件，在调试的 VisualStudio 创建一个项目，添加一个 Foo.txt 文本，右击属性，修改自定义工具</p>

<!-- ![](image/VisualStudio 开发文件自定义工具单文件生成工具/VisualStudio 开发文件自定义工具单文件生成工具0.png) -->

<p><img src="http://image.acmx.xyz/lindexi%2F20194261033760" alt="" /></p>

<p>此时就可以看到代码运行，输出的林德熙是逗比将会写入到 Foo.txt 下面的 Foo.generated.cs 文件里面</p>

<p>修改 Foo.txt 文件，点击保存会继续进入函数，在自定义工具可以在文件修改的时候自动调用</p>

<p>所有代码放在<a href="https://github.com/lindexi/lindexi_gd/tree/ebcd65c41d21c8e4379e8924a7235f22025cbbb7/HiaiemhiuBobmnawa">github</a></p>

<p>更多插件开发请看</p>

<ul>
  <li><a href="https://blog.lindexi.com/post/VisualStudio-%E6%89%A9%E5%B1%95%E5%BC%80%E5%8F%91-%E8%8E%B7%E5%BE%97%E8%BE%93%E5%87%BA%E7%AA%97%E5%8F%A3%E5%86%85%E5%AE%B9.html">VisualStudio 插件开发 获得输出窗口内容</a></li>
  <li><a href="https://blog.lindexi.com/post/VisualStudio-%E6%89%A9%E5%B1%95%E5%BC%80%E5%8F%91-%E6%B7%BB%E5%8A%A0%E8%BE%93%E5%87%BA%E7%AA%97%E5%8F%A3.html">VisualStudio 插件开发 添加输出窗口</a></li>
  <li><a href="https://blog.lindexi.com/post/VisualStudio-%E6%89%A9%E5%B1%95%E5%BC%80%E5%8F%91-%E6%B7%BB%E5%8A%A0%E8%8F%9C%E5%8D%95.html">VisualStudio 插件开发 添加菜单</a></li>
  <li><a href="https://blog.lindexi.com/post/VisualStudio-%E6%89%A9%E5%B1%95%E5%BC%80%E5%8F%91.html">VisualStudio 插件开发</a></li>
</ul>

<p><a href="https://mnaoumov.wordpress.com/2012/09/26/developing-custom-tool-aka-single-file-generators-for-visual-studio-2012/">Developing Custom Tool (aka Single File Generators) for Visual Studio 2012</a></p>

<p><a href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.visualstudio.shell.interop.ivssinglefilegenerator?wt.mc_id=MVP">IVsSingleFileGenerator Interface (Microsoft.VisualStudio.Shell.Interop) </a></p>

<p><a href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.visualstudio.shell.registrationattribute?wt.mc_id=MVP">RegistrationAttribute Class (Microsoft.VisualStudio.Shell) </a></p>

:ET