I"<<p>其实MatterMost是有插件可以用来订阅RSS博客的，但是这个订阅插件需要一个个网址输入，而不是一次性输入很多个，于是我去就自己写了一个控制台程序做订阅</p>

<!--more-->

<!-- CreateTime:2020/2/1 9:20:01 -->

<p>这个工具用到 <code class="language-plaintext highlighter-rouge">Microsoft.SyndicationFeed.ReaderWriter</code> 库，通过这个库可以用来解析RSS内容，所以开发的代码十分少</p>

<p>先通过 NuGet 安装或修改 csproj 代码</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="p">&lt;</span><span class="n">PackageReference</span> <span class="n">Include</span><span class="p">=</span><span class="s">"Microsoft.SyndicationFeed.ReaderWriter"</span> <span class="n">Version</span><span class="p">=</span><span class="s">"1.0.2"</span> <span class="p">/&gt;</span>
</code></pre></div></div>

<p>在使用RSS之前需要知道有两个通用的格式，一个是 RSSFeed 格式，一个是 AtomFeed 格式，这两个格式需要分别使用两个不同的方式读取</p>

<p>先用 HttpClient 获取 RSS 内容，定义参数 feedUri 表示需要获取的博客链接</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>            <span class="kt">var</span> <span class="n">xml</span> <span class="p">=</span> <span class="k">await</span> <span class="n">httpClient</span><span class="p">.</span><span class="nf">GetStringAsync</span><span class="p">(</span><span class="n">feedUri</span><span class="p">);</span>
</code></pre></div></div>

<p>如我的博客是 <a href="https://blog.lindexi.com/">https://blog.lindexi.com/</a> 我的订阅地址是 <a href="https://blog.lindexi.com/">https://blog.lindexi.com/</a> 也就是在 feedUri 里面写的是订阅地址</p>

<p>读取到的内容是 xml 内容，通过下面方法判断当前博客使用的是哪个格式，分别返回不同的读取</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="k">private</span> <span class="n">XmlFeedReader</span> <span class="nf">GetXmlFeedReader</span><span class="p">(</span><span class="kt">string</span> <span class="n">xml</span><span class="p">,</span> <span class="n">XmlReader</span> <span class="n">xmlReader</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">xDocument</span> <span class="p">=</span> <span class="n">XDocument</span><span class="p">.</span><span class="nf">Load</span><span class="p">(</span><span class="k">new</span> <span class="nf">StringReader</span><span class="p">(</span><span class="n">xml</span><span class="p">));</span>
            <span class="kt">var</span> <span class="n">rootName</span> <span class="p">=</span> <span class="n">xDocument</span><span class="p">.</span><span class="n">Root</span><span class="p">.</span><span class="n">Name</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">rootName</span><span class="p">.</span><span class="n">Namespace</span><span class="p">.</span><span class="n">NamespaceName</span><span class="p">.</span><span class="nf">Contains</span><span class="p">(</span><span class="s">"Atom"</span><span class="p">,</span> <span class="n">StringComparison</span><span class="p">.</span><span class="n">OrdinalIgnoreCase</span><span class="p">))</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="k">new</span> <span class="nf">AtomFeedReader</span><span class="p">(</span><span class="n">xmlReader</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">rootName</span><span class="p">.</span><span class="n">LocalName</span><span class="p">.</span><span class="nf">Contains</span><span class="p">(</span><span class="s">"feed"</span><span class="p">,</span> <span class="n">StringComparison</span><span class="p">.</span><span class="n">OrdinalIgnoreCase</span><span class="p">))</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="k">new</span> <span class="nf">AtomFeedReader</span><span class="p">(</span><span class="n">xmlReader</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">rootName</span><span class="p">.</span><span class="nf">ToString</span><span class="p">().</span><span class="nf">Contains</span><span class="p">(</span><span class="s">"rss"</span><span class="p">,</span> <span class="n">StringComparison</span><span class="p">.</span><span class="n">OrdinalIgnoreCase</span><span class="p">))</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="k">new</span> <span class="nf">RssFeedReader</span><span class="p">(</span><span class="n">xmlReader</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="k">new</span> <span class="nf">AtomFeedReader</span><span class="p">(</span><span class="n">xmlReader</span><span class="p">);</span>
        <span class="p">}</span>
</code></pre></div></div>

<p>上面判断方法是用逗比代码写的，其实 AtomFeedReader 的判断不用那么复杂</p>

<p>判断完成之后就可以使用 feedReader.Read 方法不断读取，因为我只需要博客的内容，所以只获取内容</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>            <span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">xmlReader</span> <span class="p">=</span> <span class="n">XmlReader</span><span class="p">.</span><span class="nf">Create</span><span class="p">(</span><span class="k">new</span> <span class="nf">StringReader</span><span class="p">(</span><span class="n">xml</span><span class="p">)))</span>
            <span class="p">{</span>
                <span class="n">XmlFeedReader</span> <span class="n">feedReader</span> <span class="p">=</span> <span class="nf">GetXmlFeedReader</span><span class="p">(</span><span class="n">xml</span><span class="p">,</span> <span class="n">xmlReader</span><span class="p">);</span>
                <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"Read"</span><span class="p">);</span>
                <span class="k">while</span> <span class="p">(</span><span class="k">await</span> <span class="n">feedReader</span><span class="p">.</span><span class="nf">Read</span><span class="p">())</span>
                <span class="p">{</span>
                    <span class="k">try</span>
                    <span class="p">{</span>
                        <span class="k">if</span> <span class="p">(</span><span class="n">feedReader</span><span class="p">.</span><span class="n">ElementType</span> <span class="p">==</span> <span class="n">SyndicationElementType</span><span class="p">.</span><span class="n">Item</span><span class="p">)</span>
                        <span class="p">{</span>
                            <span class="n">ISyndicationItem</span> <span class="n">item</span> <span class="p">=</span> <span class="k">await</span> <span class="n">feedReader</span><span class="p">.</span><span class="nf">ReadItem</span><span class="p">();</span>
                            <span class="n">rssNewsItems</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">item</span><span class="p">);</span>
                        <span class="p">}</span>
                    <span class="p">}</span>
                    <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">e</span><span class="p">)</span>
                    <span class="p">{</span>
                    <span class="p">}</span>
                <span class="p">}</span>
            <span class="p">}</span>
</code></pre></div></div>

<p>在 ISyndicationItem 里面就包括了博客的标题，描述和发布时间，可以定义另一个类做封装</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">public</span> <span class="k">class</span> <span class="nc">Blog</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Title</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="kt">string</span> <span class="n">Url</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="kt">string</span> <span class="n">Description</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="n">DateTime</span> <span class="n">Time</span> <span class="p">{</span> <span class="k">set</span><span class="p">;</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>

        <span class="c1">/// &lt;inheritdoc /&gt;</span>
        <span class="k">public</span> <span class="k">override</span> <span class="kt">string</span> <span class="nf">ToString</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="s">$"</span><span class="p">{</span><span class="n">Title</span><span class="p">}</span><span class="s"> </span><span class="p">{</span><span class="n">Time</span><span class="p">}</span><span class="s">\n</span><span class="p">{</span><span class="n">Url</span><span class="p">}</span><span class="s">"</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
</code></pre></div></div>

<p>这个做法很逗比</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>                <span class="kt">var</span> <span class="n">blogList</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Blog</span><span class="p">&gt;();</span>
                <span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">syndicationItem</span> <span class="k">in</span> <span class="n">syndicationItems</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="kt">var</span> <span class="n">description</span> <span class="p">=</span>
                        <span class="n">syndicationItem</span><span class="p">.</span><span class="n">Description</span><span class="p">.</span><span class="nf">Substring</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="n">Math</span><span class="p">.</span><span class="nf">Min</span><span class="p">(</span><span class="m">200</span><span class="p">,</span> <span class="n">syndicationItem</span><span class="p">.</span><span class="n">Description</span><span class="p">.</span><span class="n">Length</span><span class="p">));</span>
                    <span class="kt">var</span> <span class="n">time</span> <span class="p">=</span> <span class="n">syndicationItem</span><span class="p">.</span><span class="n">Published</span><span class="p">;</span>
                    <span class="kt">var</span> <span class="n">uri</span> <span class="p">=</span> <span class="n">syndicationItem</span><span class="p">.</span><span class="n">Links</span><span class="p">.</span><span class="nf">FirstOrDefault</span><span class="p">()?.</span><span class="n">Uri</span><span class="p">;</span>

                    <span class="k">if</span> <span class="p">(</span><span class="n">time</span> <span class="p">&lt;</span> <span class="n">syndicationItem</span><span class="p">.</span><span class="n">LastUpdated</span><span class="p">)</span>
                    <span class="p">{</span>
                        <span class="n">time</span> <span class="p">=</span> <span class="n">syndicationItem</span><span class="p">.</span><span class="n">LastUpdated</span><span class="p">;</span>
                    <span class="p">}</span>

                    <span class="n">blogList</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">Blog</span><span class="p">()</span>
                    <span class="p">{</span>
                        <span class="n">Title</span> <span class="p">=</span> <span class="n">syndicationItem</span><span class="p">.</span><span class="n">Title</span><span class="p">,</span>
                        <span class="n">Description</span> <span class="p">=</span> <span class="n">description</span><span class="p">,</span>
                        <span class="n">Time</span> <span class="p">=</span> <span class="n">time</span><span class="p">.</span><span class="n">DateTime</span><span class="p">,</span>
                        <span class="n">Url</span> <span class="p">=</span> <span class="n">uri</span><span class="p">?.</span><span class="n">AbsoluteUri</span>
                    <span class="p">});</span>
                <span class="p">}</span>
</code></pre></div></div>

<p>现在就拿到了 blogList 可以给 MatterMost 发送信息，发送的方法请看 <a href="https://blog.lindexi.com/post/dotnet-core-%E9%9B%86%E6%88%90%E5%88%B0-Mattermost-%E8%81%8A%E5%A4%A9%E5%B7%A5%E5%85%B7.html">dotnet core 集成到 Mattermost 聊天工具</a></p>

<p>做出来的效果是这样</p>

<!-- ![](image/dotnet 给MatterMost订阅RSS博客/dotnet 给MatterMost订阅RSS博客0.png) -->

<p><img src="http://image.acmx.xyz/lindexi%2F2019101814462471" alt="" /></p>

<p>我将这个项目代码放在 <a href="https://github.com/lindexi/lindexi_gd/tree/32e2de954d92cc9fa359ae6eacd327405e156fe4/NokekebelaidairJelnechallearrur">github</a> 欢迎小伙伴下载，如果觉得好像在哪看过这个代码，那么证明你看过<a href="https://blog.lindexi.com/post/dotnet-%E4%BB%A3%E7%A0%81%E8%B0%83%E8%AF%95%E6%96%B9%E6%B3%95.html">dotnet 代码调试方法</a> 我在这个博客将这个代码作为例子演示如何调试</p>

<p>用这个方法做的RSS订阅没有 <a href="https://www.microsoft.com/store/productId/9N85PV1RJD6VR">RSS Stalker</a> 好用</p>

<p>因为我现在是做一个本机的控制台应用，电脑关了就不订阅，于是修改作为一个服务，我将代码放在 <a href="https://github.com/lindexi/UWP/tree/53bda931c118033b75fce97427d901a985984ee0/src/%E5%8D%9A%E5%AE%A2%E8%AE%A2%E9%98%85">github</a> 欢迎小伙伴访问</p>

<p>可以通过 dotnet run 或者作为 docker 运行两个方法</p>

<p>注意我这里也是用内存数据库，如果 docker 关闭或 dotnet run 关闭也会丢失配置</p>

:ET