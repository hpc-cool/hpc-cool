I"HX<p>在带界面的 dotnet core 程序运行的时候就会出现一个控制台窗口，本文告诉大家使用最简单方法去隐藏控制台窗口。</p>

<!--more-->

<!-- CreateTime:2020/1/20 21:12:07 -->

<!-- 标签：Avalonia,Roslyn，dotnetcore -->

<p>最近在使用 Avalonia 开发，这是一个支持 dotnet framework 和 dotnet core 的框架，在开发的过程发现启动的窗口居然会出现控制台窗口。</p>

<p>在 VisualStudio 2017 的格式，如果是 dotnet framework 的程序，在没有设置 <code class="language-plaintext highlighter-rouge">OutputType</code> 为 <code class="language-plaintext highlighter-rouge">WinExe</code> 的是时候，启动程序会显示一个控制台窗口。</p>

<p>虽然在 dotnet framework 程序可以简单通过设置<code class="language-plaintext highlighter-rouge">OutputType</code> 为 <code class="language-plaintext highlighter-rouge">WinExe</code> 解决。如果这时使用跨平台多项目，就会看到 dotnet core 项目依旧会显示黑色窗口</p>

<p>最简单的方法是通过修改 PE 文件的方式，在 <a href="https://github.com/jmacato/NSubsys/blob/master/NSubsys.csproj">NSubsys</a>就是编写了一个 Task 用来在编译完成获取 Exe 修改 PE 文件格式，隐藏黑色窗口</p>

<p>安装 <a href="https://github.com/jmacato/NSubsys/blob/master/NSubsys.csproj">NSubsys</a> 的方法就是从 Nuget 搜索 <a href="https://github.com/jmacato/NSubsys/blob/master/NSubsys.csproj">NSubsys</a> 然后使用 <code class="language-plaintext highlighter-rouge">dotnet publish </code>一下就可以了</p>

<!-- ![](image/dotnet core 通过修改文件头的方式隐藏控制台窗口/dotnet core 通过修改文件头的方式隐藏控制台窗口0.png) -->

<p><img src="http://image.acmx.xyz/lindexi%2F20187242045550" alt="" /></p>

<p>如果想知道为什么你安装了一个 Nuget 就可以帮你修改请看<a href="https://walterlv.github.io/post/create-a-cross-platform-msbuild-task-based-nuget-tool.html">如何创建一个基于 MSBuild Task 的跨平台的 NuGet 工具包 - walterlv</a></p>

<p>虽然知道了使用这个方法可以隐藏控制台，但是这里还是需要告诉大家一些原理。</p>

<p>在使用 C# 编译器，可以通过 csc 加上一个开关 <code class="language-plaintext highlighter-rouge">/t:</code> 告诉 csc 当前编译出来的是 控制台界面还是图形界面。通过下面不同的代码可以创建不同的软件</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">/</span><span class="n">t</span><span class="p">:</span><span class="n">exe</span> <span class="err">创建控制台软件</span>
<span class="p">/</span><span class="n">t</span><span class="p">:</span><span class="n">winexe</span> <span class="err">创建图形界面软件</span>
</code></pre></div></div>
<p>创建的软件的文件如 exe 或 dll 都是 PE 文件，在 PE 文件有一个 Subsystem 的字段表示了这个 PE 文件是控制台软件还是图形界面。在 PE 文件通过 <code class="language-plaintext highlighter-rouge">Subsystem</code> 可以告诉系统，现在打开的软件是控制台软件还是图形界面软件，这个值有很多个表示，其中可以使用<code class="language-plaintext highlighter-rouge">IMAGE_SUBSYSTEM_WINDOWS_GUI</code>表示这是一个 GUI 软件，通过<code class="language-plaintext highlighter-rouge">IMAGE_SUBSYSTEM_WINDOWS_CUI</code>可以表示这是一个控制台软件。</p>

<p>所以只需要通过修改 PE 文件的方式去告诉系统，这个软件是图形软件，就不会显示控制台。</p>

<p>更多关于 PE 文件请看 <a href="https://blog.csdn.net/liuyez123/article/details/51281905">windows PE文件结构及其加载机制 - CSDN博客</a></p>

<p><a href="https://blog.csdn.net/huanjieshuijing/article/details/5874365">PE文件结构详解 - CSDN博客</a></p>

<p><a href="http://blog.51cto.com/vanshell/422909">Windows下Console和Win32程序差异-HelloWorld-51CTO博客</a></p>

<p><a href="https://www.cnblogs.com/guolixiucai/p/4809820.html">深入理解 Win32 PE 文件格式 - 国立秀才 - 博客园</a></p>

<p>如果我想自己写一个 C# 脚本改变任意的二进制可执行软件从控制台作为窗口程序，也就是隐藏控制台可以如何做？如果抄袭  <a href="https://github.com/jmacato/NSubsys/blob/master/NSubsys.csproj">NSubsys</a> 的代码就会非常简单，先复制<a href="https://github.com/jmacato/NSubsys/blob/master/PeUtility.cs">PeUtility.cs</a>的全部代码放在 PeUtility.cs 文件，使用 <code class="language-plaintext highlighter-rouge">dotnet new console -o Lindexi</code> 创建一个脚本的项目，此时将会看到 Program 和 csproj 两个文件，只需要修改 Program 文件的代码调用 PeUtility 就可以</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.IO</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Runtime.InteropServices</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">static</span> <span class="n">NSubsys</span><span class="p">.</span><span class="n">PeUtility</span><span class="p">;</span>

<span class="c1">// 忽略一些代码</span>

        <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="nf">ProcessFile</span><span class="p">(</span><span class="s">@"c:\lindexi\lindexishidoubi\bin\release\netcoreapp3.1\lindexi.exe"</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">private</span> <span class="k">static</span> <span class="kt">bool</span> <span class="nf">ProcessFile</span><span class="p">(</span><span class="kt">string</span> <span class="n">exeFilePath</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">peFile</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">PeUtility</span><span class="p">(</span><span class="n">exeFilePath</span><span class="p">))</span>
            <span class="p">{</span>
                <span class="n">SubSystemType</span> <span class="n">subsysVal</span><span class="p">;</span>
                <span class="kt">var</span> <span class="n">subsysOffset</span> <span class="p">=</span> <span class="n">peFile</span><span class="p">.</span><span class="n">MainHeaderOffset</span><span class="p">;</span>

                <span class="n">subsysVal</span> <span class="p">=</span> <span class="p">(</span><span class="n">SubSystemType</span><span class="p">)</span><span class="n">peFile</span><span class="p">.</span><span class="n">OptionalHeader</span><span class="p">.</span><span class="n">Subsystem</span><span class="p">;</span>
                <span class="n">subsysOffset</span> <span class="p">+=</span> <span class="n">Marshal</span><span class="p">.</span><span class="n">OffsetOf</span><span class="p">&lt;</span><span class="n">IMAGE_OPTIONAL_HEADER</span><span class="p">&gt;(</span><span class="s">"Subsystem"</span><span class="p">).</span><span class="nf">ToInt32</span><span class="p">();</span>

                <span class="k">switch</span> <span class="p">(</span><span class="n">subsysVal</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="k">case</span> <span class="n">PeUtility</span><span class="p">.</span><span class="n">SubSystemType</span><span class="p">.</span><span class="n">IMAGE_SUBSYSTEM_WINDOWS_GUI</span><span class="p">:</span>
                        <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"Executable file is already a Win32 App!"</span><span class="p">);</span>
                        <span class="k">return</span> <span class="k">true</span><span class="p">;</span>
                    <span class="k">case</span> <span class="n">PeUtility</span><span class="p">.</span><span class="n">SubSystemType</span><span class="p">.</span><span class="n">IMAGE_SUBSYSTEM_WINDOWS_CUI</span><span class="p">:</span>
                        <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"Console app detected..."</span><span class="p">);</span>
                        <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"Converting..."</span><span class="p">);</span>

                        <span class="kt">var</span> <span class="n">subsysSetting</span> <span class="p">=</span> <span class="n">BitConverter</span><span class="p">.</span><span class="nf">GetBytes</span><span class="p">((</span><span class="kt">ushort</span><span class="p">)</span><span class="n">SubSystemType</span><span class="p">.</span><span class="n">IMAGE_SUBSYSTEM_WINDOWS_GUI</span><span class="p">);</span>

                        <span class="k">if</span> <span class="p">(!</span><span class="n">BitConverter</span><span class="p">.</span><span class="n">IsLittleEndian</span><span class="p">)</span>
                            <span class="n">Array</span><span class="p">.</span><span class="nf">Reverse</span><span class="p">(</span><span class="n">subsysSetting</span><span class="p">);</span>

                        <span class="k">if</span> <span class="p">(</span><span class="n">peFile</span><span class="p">.</span><span class="n">Stream</span><span class="p">.</span><span class="n">CanWrite</span><span class="p">)</span>
                        <span class="p">{</span>
                            <span class="n">peFile</span><span class="p">.</span><span class="n">Stream</span><span class="p">.</span><span class="nf">Seek</span><span class="p">(</span><span class="n">subsysOffset</span><span class="p">,</span> <span class="n">SeekOrigin</span><span class="p">.</span><span class="n">Begin</span><span class="p">);</span>
                            <span class="n">peFile</span><span class="p">.</span><span class="n">Stream</span><span class="p">.</span><span class="nf">Write</span><span class="p">(</span><span class="n">subsysSetting</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="n">subsysSetting</span><span class="p">.</span><span class="n">Length</span><span class="p">);</span>
                            <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"Conversion Complete..."</span><span class="p">);</span>
                        <span class="p">}</span>
                        <span class="k">else</span>
                        <span class="p">{</span>
                            <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"Can't write changes!"</span><span class="p">);</span>
                            <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"Conversion Failed..."</span><span class="p">);</span>
                        <span class="p">}</span>

                        <span class="k">return</span> <span class="k">true</span><span class="p">;</span>
                    <span class="k">default</span><span class="p">:</span>
                        <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">$"Unsupported subsystem : </span><span class="p">{</span><span class="n">Enum</span><span class="p">.</span><span class="nf">GetName</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">SubSystemType</span><span class="p">),</span> <span class="n">subsysVal</span><span class="p">)}</span><span class="s">."</span><span class="p">);</span>
                        <span class="k">return</span> <span class="k">false</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
</code></pre></div></div>

<p>请替换路径为实际的需要修改的exe的路径或者从命令行拿到文件</p>

<p>这样使用 dotnet run 就可以运行脚本，修改文件</p>

<p>有小伙伴不能访问 github 下面是 PeUtility.cs 代码</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.IO</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Runtime.InteropServices</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">NSubsys</span>
<span class="p">{</span>
    <span class="k">internal</span> <span class="k">class</span> <span class="nc">PeUtility</span> <span class="p">:</span> <span class="n">IDisposable</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="k">enum</span> <span class="n">SubSystemType</span> <span class="p">:</span> <span class="n">UInt16</span>
        <span class="p">{</span>
            <span class="n">IMAGE_SUBSYSTEM_WINDOWS_GUI</span> <span class="p">=</span> <span class="m">2</span><span class="p">,</span>
            <span class="n">IMAGE_SUBSYSTEM_WINDOWS_CUI</span> <span class="p">=</span> <span class="m">3</span><span class="p">,</span>
        <span class="p">}</span>

        <span class="p">[</span><span class="nf">StructLayout</span><span class="p">(</span><span class="n">LayoutKind</span><span class="p">.</span><span class="n">Explicit</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">struct</span> <span class="nc">IMAGE_DOS_HEADER</span>
        <span class="p">{</span>
            <span class="p">[</span><span class="nf">FieldOffset</span><span class="p">(</span><span class="m">60</span><span class="p">)]</span>
            <span class="k">public</span> <span class="n">UInt32</span> <span class="n">e_lfanew</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="p">[</span><span class="nf">StructLayout</span><span class="p">(</span><span class="n">LayoutKind</span><span class="p">.</span><span class="n">Explicit</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">struct</span> <span class="nc">IMAGE_OPTIONAL_HEADER</span>
        <span class="p">{</span>
            <span class="p">[</span><span class="nf">FieldOffset</span><span class="p">(</span><span class="m">68</span><span class="p">)]</span>
            <span class="k">public</span> <span class="n">UInt16</span> <span class="n">Subsystem</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">private</span> <span class="kt">long</span> <span class="n">fileHeaderOffset</span><span class="p">;</span>
        <span class="k">private</span> <span class="n">IMAGE_OPTIONAL_HEADER</span> <span class="n">optionalHeader</span><span class="p">;</span>
        <span class="k">private</span> <span class="n">FileStream</span> <span class="n">curFileStream</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">PeUtility</span><span class="p">(</span><span class="kt">string</span> <span class="n">filePath</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">curFileStream</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">FileStream</span><span class="p">(</span><span class="n">filePath</span><span class="p">,</span> <span class="n">System</span><span class="p">.</span><span class="n">IO</span><span class="p">.</span><span class="n">FileMode</span><span class="p">.</span><span class="n">Open</span><span class="p">,</span> <span class="n">System</span><span class="p">.</span><span class="n">IO</span><span class="p">.</span><span class="n">FileAccess</span><span class="p">.</span><span class="n">ReadWrite</span><span class="p">);</span>
            <span class="kt">var</span> <span class="n">reader</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">BinaryReader</span><span class="p">(</span><span class="n">curFileStream</span><span class="p">);</span>
            <span class="kt">var</span> <span class="n">dosHeader</span> <span class="p">=</span> <span class="n">FromBinaryReader</span><span class="p">&lt;</span><span class="n">IMAGE_DOS_HEADER</span><span class="p">&gt;(</span><span class="n">reader</span><span class="p">);</span>

            <span class="c1">// Seek the new PE Header and skip NtHeadersSignature (4 bytes) &amp; IMAGE_FILE_HEADER struct (20bytes).</span>
            <span class="n">curFileStream</span><span class="p">.</span><span class="nf">Seek</span><span class="p">(</span><span class="n">dosHeader</span><span class="p">.</span><span class="n">e_lfanew</span> <span class="p">+</span> <span class="m">4</span> <span class="p">+</span> <span class="m">20</span><span class="p">,</span> <span class="n">SeekOrigin</span><span class="p">.</span><span class="n">Begin</span><span class="p">);</span>

            <span class="n">fileHeaderOffset</span> <span class="p">=</span> <span class="n">curFileStream</span><span class="p">.</span><span class="n">Position</span><span class="p">;</span>
            <span class="n">optionalHeader</span> <span class="p">=</span> <span class="n">FromBinaryReader</span><span class="p">&lt;</span><span class="n">IMAGE_OPTIONAL_HEADER</span><span class="p">&gt;(</span><span class="n">reader</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="c1">/// &lt;summary&gt;</span>
        <span class="c1">/// Reads in a block from a file and converts it to the struct</span>
        <span class="c1">/// type specified by the template parameter</span>
        <span class="c1">/// &lt;/summary&gt;</span>
        <span class="c1">/// &lt;typeparam name="T"&gt;&lt;/typeparam&gt;</span>
        <span class="c1">/// &lt;param name="reader"&gt;&lt;/param&gt;</span>
        <span class="c1">/// &lt;returns&gt;&lt;/returns&gt;</span>
        <span class="k">public</span> <span class="k">static</span> <span class="n">T</span> <span class="n">FromBinaryReader</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="n">BinaryReader</span> <span class="n">reader</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="c1">// Read in a byte array</span>
            <span class="kt">var</span> <span class="n">bytes</span> <span class="p">=</span> <span class="n">reader</span><span class="p">.</span><span class="nf">ReadBytes</span><span class="p">(</span><span class="n">Marshal</span><span class="p">.</span><span class="n">SizeOf</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;());</span>

            <span class="c1">// Pin the managed memory while, copy it out the data, then unpin it</span>
            <span class="kt">var</span> <span class="n">handle</span> <span class="p">=</span> <span class="n">GCHandle</span><span class="p">.</span><span class="nf">Alloc</span><span class="p">(</span><span class="n">bytes</span><span class="p">,</span> <span class="n">GCHandleType</span><span class="p">.</span><span class="n">Pinned</span><span class="p">);</span>
            <span class="kt">var</span> <span class="n">theStructure</span> <span class="p">=</span> <span class="n">Marshal</span><span class="p">.</span><span class="n">PtrToStructure</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="n">handle</span><span class="p">.</span><span class="nf">AddrOfPinnedObject</span><span class="p">());</span>
            <span class="n">handle</span><span class="p">.</span><span class="nf">Free</span><span class="p">();</span>

            <span class="k">return</span> <span class="n">theStructure</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">void</span> <span class="nf">Dispose</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="n">curFileStream</span><span class="p">?.</span><span class="nf">Dispose</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="c1">/// &lt;summary&gt;</span>
        <span class="c1">/// Gets the optional header</span>
        <span class="c1">/// &lt;/summary&gt;</span>
        <span class="k">public</span> <span class="n">IMAGE_OPTIONAL_HEADER</span> <span class="n">OptionalHeader</span>
        <span class="p">{</span>
            <span class="k">get</span> <span class="p">=&gt;</span> <span class="n">optionalHeader</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">/// &lt;summary&gt;</span>
        <span class="c1">/// Gets the PE file stream for R/W functions.</span>
        <span class="c1">/// &lt;/summary&gt; </span>
        <span class="k">public</span> <span class="n">FileStream</span> <span class="n">Stream</span>
        <span class="p">{</span>
            <span class="k">get</span> <span class="p">=&gt;</span> <span class="n">curFileStream</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="kt">long</span> <span class="n">MainHeaderOffset</span>
        <span class="p">{</span>
            <span class="k">get</span> <span class="p">=&gt;</span> <span class="n">fileHeaderOffset</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>更多阅读</p>

<p><a href="https://www.cnblogs.com/weihanli/p/assembly-version.html">你应该知道的程序集版本 - WeihanLi - 博客园</a></p>

:ET