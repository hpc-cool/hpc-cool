I"/<p>在写预编译框架，因为安装项目会基于多个平台，也就是对应的 Target 会执行多次，而我需要的只是执行一次就可以</p>

<!--more-->

<!-- CreateTime:2020/1/1 16:09:47 -->

<!-- csdn -->
<!-- 标签：Roslyn,MSBuild,编译器 -->

<p>创建一个控制台项目，修改项目文件，然后使用 dotnet build 可以看到 Foo 输出两次</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;Project</span> <span class="na">Sdk=</span><span class="s">"Microsoft.NET.Sdk"</span><span class="nt">&gt;</span>

  <span class="nt">&lt;PropertyGroup&gt;</span>
    <span class="nt">&lt;OutputType&gt;</span>Exe<span class="nt">&lt;/OutputType&gt;</span>
    <span class="nt">&lt;TargetFrameworks&gt;</span>netcoreapp3.1;net45<span class="nt">&lt;/TargetFrameworks&gt;</span>
  <span class="nt">&lt;/PropertyGroup&gt;</span>

  <span class="nt">&lt;Target</span> <span class="na">Name=</span><span class="s">"Foo"</span> <span class="na">AfterTargets=</span><span class="s">"AfterBuild"</span><span class="nt">&gt;</span>
  	<span class="nt">&lt;Warning</span> <span class="na">Text=</span><span class="s">"Foo"</span><span class="nt">&gt;&lt;/Warning&gt;</span>
  <span class="nt">&lt;/Target&gt;</span>

<span class="nt">&lt;/Project&gt;</span>

</code></pre></div></div>

<p>因为这是在两个平台分别输出，如果想要在编译只运行一次，可以基于以下</p>

<ul>
  <li>DispatchToInnerBuilds</li>
  <li>PreBuildEvent</li>
  <li>GenerateNuspec</li>
</ul>

<p>如下面代码</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;Project</span> <span class="na">Sdk=</span><span class="s">"Microsoft.NET.Sdk"</span><span class="nt">&gt;</span>

  <span class="nt">&lt;PropertyGroup&gt;</span>
    <span class="nt">&lt;OutputType&gt;</span>Exe<span class="nt">&lt;/OutputType&gt;</span>
    <span class="nt">&lt;TargetFrameworks&gt;</span>netcoreapp3.1;net45<span class="nt">&lt;/TargetFrameworks&gt;</span>
  <span class="nt">&lt;/PropertyGroup&gt;</span>

  <span class="nt">&lt;Target</span> <span class="na">Name=</span><span class="s">"Foo"</span> <span class="na">BeforeTargets=</span><span class="s">"DispatchToInnerBuilds"</span><span class="nt">&gt;</span>
  	<span class="nt">&lt;Warning</span> <span class="na">Text=</span><span class="s">"Foo"</span><span class="nt">&gt;&lt;/Warning&gt;</span>
  <span class="nt">&lt;/Target&gt;</span>

<span class="nt">&lt;/Project&gt;</span>

</code></pre></div></div>

<p>如果是在 GenerateNuspec 之后也就是需要用户创建 NuGet 库才能执行</p>

<p>这里的代码放在 <a href="https://github.com/lindexi/lindexi_gd/tree/7cd82e0726d1f0ca65011a1ad9ddd2f239fe43a3/WhibafagiLelfaihohe">github</a> 欢迎小伙伴访问</p>

<p>另一个方法是通过在 buildMultiTargeting 添加 targets 文件的方法。在 NuGet 的 build 文件夹和 buildMultiTargeting 的不同在于，在进行多框架编译时，将会在 build 的每个 Target 都执行，而 buildMultiTargeting 只是处理全部的框架的执行的逻辑。换句话说就是 build 里面的逻辑会对每个框架进行处理，而 buildMultiTargeting 里面的逻辑只是处理总的编译</p>

<p>在 NuGet 引用里面，可以包含 build 和 buildMultiTargeting 文件夹，两个文件夹里面的 Target 的调用会收到编译命令的影响。通过 buildMultiTargeting 文件夹里面儿 Target 只有多开发框架才会被调用的原理，可以在指定多开发框架时仅执行 buildMultiTargeting 里面的代码</p>

<p>如创建一个 Foo 的 NuGet 包，期望只有在编译时输出一次</p>

<p>在 build 文件夹里面创建 Foo.Targets 文件，在文件里面添加下面代码</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">&lt;</span><span class="n">Project</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="n">Target</span> <span class="n">Name</span><span class="p">=</span><span class="s">"Foo"</span> <span class="n">AfterTargets</span><span class="p">=</span><span class="s">"Build"</span> <span class="n">Condition</span><span class="p">=</span><span class="s">"'$(TargetFrameworks)' == ''"</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="n">Message</span> <span class="n">Text</span><span class="p">=</span><span class="s">"林德熙是逗比"</span><span class="p">/&gt;</span>
  <span class="p">&lt;/</span><span class="n">Target</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="n">Project</span><span class="p">&gt;</span>
</code></pre></div></div>

<p>在 Foo.Targets 文件里面，如果时多开发框架，那么在判断 <code class="language-plaintext highlighter-rouge">'$(TargetFrameworks)' == '</code> 就会跳过执行，此时将会执行 <code class="language-plaintext highlighter-rouge">buildMultiTargeting</code> 的文件</p>

<p>在 buildMultiTargeting 文件夹里面创建 Foo.Targets 在这个文件里面添加下面代码</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">&lt;</span><span class="n">Project</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="n">Target</span> <span class="n">Name</span><span class="p">=</span><span class="s">"Foo"</span> <span class="n">AfterTargets</span><span class="p">=</span><span class="s">"Build"</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="n">Message</span> <span class="n">Text</span><span class="p">=</span><span class="s">"林德熙是逗比"</span><span class="p">/&gt;</span>
  <span class="p">&lt;/</span><span class="n">Target</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="n">Project</span><span class="p">&gt;</span>
</code></pre></div></div>

<p>此时编译输出只有输出一次，也就是对应的 Target 只执行一次</p>

<p>如果在两个文件夹里面的 Foo.Targets 文件里面的 Target 相同代码太多，可以将相同的代码放在单独的文件夹，通过引用的方式，让对应的 Target 只调用一次</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">|</span>
<span class="p">|</span>
<span class="p">--</span><span class="n">build</span>
  <span class="p">|</span>
  <span class="p">--</span> <span class="n">Foo</span><span class="p">.</span><span class="n">Targets</span>
  <span class="p">|</span>
  <span class="p">--</span> <span class="n">F</span><span class="p">.</span><span class="n">Targets</span>
<span class="p">|</span>
<span class="p">--</span><span class="n">buildMultiTargeting</span>
  <span class="p">|</span>
  <span class="p">--</span> <span class="n">Foo</span><span class="p">.</span><span class="n">Targets</span>
</code></pre></div></div>

<p>如创建一个单独的 F.Targets 文件，将核心逻辑放在这个文件夹里面</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">&lt;</span><span class="n">Project</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="n">Target</span> <span class="n">Name</span><span class="p">=</span><span class="s">"F"</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="n">Message</span> <span class="n">Text</span><span class="p">=</span><span class="s">"林德熙是逗比"</span><span class="p">/&gt;</span>
    <span class="p">&lt;/</span><span class="n">Target</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="n">Project</span><span class="p">&gt;</span>
</code></pre></div></div>

<p>在 build 和 buildMultiTargeting 通过引用这个文件减少重复代码</p>

<p>如 build 文件夹的代码，通过 DependsOnTargets 的方法调用引用的文件的 Target 方法</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="p">&lt;</span><span class="n">Project</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="n">Import</span> <span class="n">Project</span><span class="p">=</span><span class="s">"F.targets"</span><span class="p">/&gt;</span>
  <span class="p">&lt;</span><span class="n">Target</span> <span class="n">Name</span><span class="p">=</span><span class="s">"Foo"</span> <span class="n">AfterTargets</span><span class="p">=</span><span class="s">"Build"</span>
            <span class="n">Condition</span><span class="p">=</span><span class="s">"'$(TargetFrameworks)' == ''"</span>
            <span class="n">DependsOnTargets</span><span class="p">=</span><span class="s">"F"</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="n">Target</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="n">Project</span><span class="p">&gt;</span>
</code></pre></div></div>

<p>在 buildMultiTargeting 的代码</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;Project&gt;</span>
    <span class="nt">&lt;Import</span> <span class="na">Project=</span><span class="s">"..\build\F.targets"</span><span class="nt">/&gt;</span>
  <span class="nt">&lt;Target</span> <span class="na">Name=</span><span class="s">"Foo"</span> <span class="na">AfterTargets=</span><span class="s">"Build"</span>
            <span class="na">DependsOnTargets=</span><span class="s">"F"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;/Target&gt;</span>
<span class="nt">&lt;/Project&gt;</span>
</code></pre></div></div>

<p>这个方法的代码比较复杂，我将代码放在 <a href="https://github.com/lindexi/lindexi_gd/tree/66ff7789cbbf7afe23b240708404a784a43b2eb6/WhibafagiLelfaihohe">github</a> 欢迎小伙伴访问</p>

<p>放在 github 的代码需要先用 VisualStudio 打开，右击 RanelwanemquHihaiyecewi 项目打包，此时可以在 <code class="language-plaintext highlighter-rouge">bin\debug</code> 文件夹找到 RanelwanemquHihaiyecewi.1.0.0.nupkg 文件，将 NuGet 设置使用本地文件夹的 NuGet 包，这样在另一个项目才能还原找到库是哪个。使用本地文件夹请看 <a href="https://docs.microsoft.com/zh-cn/nuget/hosting-packages/local-feeds">设置本地 NuGet 源</a></p>

<p>打开命令行在 LembowulalHiwhemjercurherwejem.csproj 文件所在的文件夹输入下面命令进行编译</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">dotnet</span> <span class="n">build</span> <span class="p">-</span><span class="n">v</span> <span class="n">n</span>
</code></pre></div></div>

<p>此时可以看到在输出只有输出一次</p>

<p>在实际的项目 <a href="https://github.com/dotnet-campus/SourceYard">SourceYard</a> 就用到这个方法，请看 <a href="https://github.com/dotnet-campus/SourceYard/pull/61">修改代码</a></p>

<p><a href="https://dev.to/davidwengier/targeting-builds-for-multiple-frameworks-and-machines-5h22">Targeting builds for multiple frameworks and machines</a></p>

<p><a href="https://github.com/dotnet/project-system/issues/1829">Investigate configuration behavior when the values (Configurations/Platforms/TargetFrameworks) are conditioned or duplicated. · Issue #1829 · dotnet/project-system</a></p>

<p><a href="https://github.com/Microsoft/msbuild/issues/2781">Option to run target once per project in multi-targeting build · Issue #2781 · microsoft/msbuild</a></p>

<p><a href="https://stackoverflow.com/questions/46675782/how-to-make-an-msbuild-target-that-only-runs-once-instead-of-once-before-target">c# - How to make an MSBuild Target that only runs once instead of once, before Targets that run once per framework in the TargetFrameworks tag? - Stack Overflow</a></p>

:ET