I"]<p>本文告诉大家如何在 WPF 实现在托盘显示，同时托盘可以右击打开菜单，双击执行指定的代码</p>

<!--more-->

<!-- CreateTime:2019/6/23 11:52:36 -->

<h2 id="notifyicon-wpf">NotifyIcon WPF</h2>

<p>通过 Nuget 安装 Hardcodet.NotifyIcon.Wpf 可以快速做到在 WPF 显示托盘</p>

<!-- ![](image/WPF 托盘显示/WPF 托盘显示0.png) -->

<p><img src="http://image.acmx.xyz/lindexi%2F20181121112323368" alt="" /></p>

<p>因为托盘是程序的托盘，不是窗口的，所以推荐代码是写在 App.xaml.cs 里面</p>

<p>先创建一个托盘的界面，界面在 App.xaml 创建</p>

<p>托盘是需要图标的，可以从 <a href="http://www.iconfont.cn/">Iconfont-阿里巴巴矢量图标库</a> 找到好看的图标。在托盘图标需要是 16x16 32位 的 ico 文件</p>

<p>将图片下载放在解决方案，修改为 Resource 就可以</p>

<!-- ![](image/WPF 托盘显示/WPF 托盘显示1.png) -->

<p><img src="http://image.acmx.xyz/lindexi%2F2018112111308299" alt="" /></p>

<p>在 App.xaml 定义资源 TaskbarIcon 请看代码</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;Application x:Class="HouneaLeabeltezairKayballjachall.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:HouneaLeabeltezairKayballjachall"
             xmlns:tb="http://www.hardcodet.net/taskbar"
             StartupUri="MainWindow.xaml"&gt;
    &lt;Application.Resources&gt;
        &lt;tb:TaskbarIcon x:Key="Taskbar"
                        IconSource="Taskbar.ico"&gt;

        &lt;/tb:TaskbarIcon&gt;
    &lt;/Application.Resources&gt;
&lt;/Application&gt;
</code></pre></div></div>

<p>上面代码需要替换 <code class="language-plaintext highlighter-rouge">Class="HouneaLeabeltezairKayballjachall.App"</code> 为自己的项目</p>

<p>打开 App.xaml.cs 获取资源，资源只有在获取的时候才会创建，创建了 TaskbarIcon 就会在托盘显示</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="k">protected</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">OnStartup</span><span class="p">(</span><span class="n">StartupEventArgs</span> <span class="n">e</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_taskbar</span> <span class="p">=</span> <span class="p">(</span><span class="n">TaskbarIcon</span><span class="p">)</span> <span class="nf">FindResource</span><span class="p">(</span><span class="s">"Taskbar"</span><span class="p">);</span>
            <span class="k">base</span><span class="p">.</span><span class="nf">OnStartup</span><span class="p">(</span><span class="n">e</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">private</span> <span class="n">TaskbarIcon</span> <span class="n">_taskbar</span><span class="p">;</span>
</code></pre></div></div>

<p>运行代码可以看到图片显示图标，下面的图片是我的图标</p>

<!-- ![](image/WPF 托盘显示/WPF 托盘显示2.png) -->

<p><img src="http://image.acmx.xyz/lindexi%2F20181121113330264" alt="" /></p>

<p>鼠标移动在托盘上面显示文字，可以在 TaskbarIcon 添加代码</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="p">&lt;</span><span class="n">tb</span><span class="p">:</span><span class="n">TaskbarIcon</span> <span class="n">x</span><span class="p">:</span><span class="n">Key</span><span class="p">=</span><span class="s">"Taskbar"</span>
                        <span class="n">ToolTipText</span><span class="p">=</span><span class="s">"鼠标移动上显示的文字"</span>
                        <span class="n">IconSource</span><span class="p">=</span><span class="s">"Taskbar.ico"</span><span class="p">&gt;</span>

        <span class="p">&lt;/</span><span class="n">tb</span><span class="p">:</span><span class="n">TaskbarIcon</span><span class="p">&gt;</span>
</code></pre></div></div>
<!-- ![](image/WPF 托盘显示/WPF 托盘显示3.png) -->

<p><img src="http://image.acmx.xyz/lindexi%2F20181121113719352" alt="" /></p>

<p>双击托盘运行代码需要添加命令，创建一个 ViewModel 用来绑定命令</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">public</span> <span class="k">class</span> <span class="nc">DelegateCommand</span> <span class="p">:</span> <span class="n">ICommand</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="n">Action</span> <span class="n">CommandAction</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="n">Func</span><span class="p">&lt;</span><span class="kt">bool</span><span class="p">&gt;</span> <span class="n">CanExecuteFunc</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="k">void</span> <span class="nf">Execute</span><span class="p">(</span><span class="kt">object</span> <span class="n">parameter</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="nf">CommandAction</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="kt">bool</span> <span class="nf">CanExecute</span><span class="p">(</span><span class="kt">object</span> <span class="n">parameter</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">CanExecuteFunc</span> <span class="p">==</span> <span class="k">null</span> <span class="p">||</span> <span class="nf">CanExecuteFunc</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">event</span> <span class="n">EventHandler</span> <span class="n">CanExecuteChanged</span>
        <span class="p">{</span>
            <span class="k">add</span> <span class="p">{</span> <span class="n">CommandManager</span><span class="p">.</span><span class="n">RequerySuggested</span> <span class="p">+=</span> <span class="k">value</span><span class="p">;</span> <span class="p">}</span>
            <span class="k">remove</span> <span class="p">{</span> <span class="n">CommandManager</span><span class="p">.</span><span class="n">RequerySuggested</span> <span class="p">-=</span> <span class="k">value</span><span class="p">;</span> <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>

</code></pre></div></div>

<p>添加一些功能，显示窗口，隐藏窗口</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">public</span> <span class="k">class</span> <span class="nc">NotifyIconViewModel</span>
    <span class="p">{</span>
        <span class="c1">/// &lt;summary&gt;</span>
        <span class="c1">/// 如果窗口没显示，就显示窗口</span>
        <span class="c1">/// &lt;/summary&gt;</span>
        <span class="k">public</span> <span class="n">ICommand</span> <span class="n">ShowWindowCommand</span>
        <span class="p">{</span>
            <span class="k">get</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="k">new</span> <span class="n">DelegateCommand</span>
                <span class="p">{</span>
                    <span class="n">CanExecuteFunc</span> <span class="p">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="n">Application</span><span class="p">.</span><span class="n">Current</span><span class="p">.</span><span class="n">MainWindow</span> <span class="p">==</span> <span class="k">null</span><span class="p">,</span>
                    <span class="n">CommandAction</span> <span class="p">=</span> <span class="p">()</span> <span class="p">=&gt;</span>
                    <span class="p">{</span>
                        <span class="n">Application</span><span class="p">.</span><span class="n">Current</span><span class="p">.</span><span class="n">MainWindow</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">MainWindow</span><span class="p">();</span>
                        <span class="n">Application</span><span class="p">.</span><span class="n">Current</span><span class="p">.</span><span class="n">MainWindow</span><span class="p">.</span><span class="nf">Show</span><span class="p">();</span>
                    <span class="p">}</span>
                <span class="p">};</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="c1">/// &lt;summary&gt;</span>
        <span class="c1">/// 隐藏窗口</span>
        <span class="c1">/// &lt;/summary&gt;</span>
        <span class="k">public</span> <span class="n">ICommand</span> <span class="n">HideWindowCommand</span>
        <span class="p">{</span>
            <span class="k">get</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="k">new</span> <span class="n">DelegateCommand</span>
                <span class="p">{</span>
                    <span class="n">CommandAction</span> <span class="p">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="n">Application</span><span class="p">.</span><span class="n">Current</span><span class="p">.</span><span class="n">MainWindow</span><span class="p">.</span><span class="nf">Close</span><span class="p">(),</span>
                    <span class="n">CanExecuteFunc</span> <span class="p">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="n">Application</span><span class="p">.</span><span class="n">Current</span><span class="p">.</span><span class="n">MainWindow</span> <span class="p">!=</span> <span class="k">null</span>
                <span class="p">};</span>
            <span class="p">}</span>
        <span class="p">}</span>


        <span class="c1">/// &lt;summary&gt;</span>
        <span class="c1">/// 关闭软件</span>
        <span class="c1">/// &lt;/summary&gt;</span>
        <span class="k">public</span> <span class="n">ICommand</span> <span class="n">ExitApplicationCommand</span>
        <span class="p">{</span>
            <span class="k">get</span>
            <span class="p">{</span>
                <span class="k">return</span> <span class="k">new</span> <span class="n">DelegateCommand</span> <span class="p">{</span> <span class="n">CommandAction</span> <span class="p">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="n">Application</span><span class="p">.</span><span class="n">Current</span><span class="p">.</span><span class="nf">Shutdown</span><span class="p">()</span> <span class="p">};</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>

</code></pre></div></div>

<p>在界面绑定代码</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="p">&lt;</span><span class="n">tb</span><span class="p">:</span><span class="n">TaskbarIcon</span> <span class="n">x</span><span class="p">:</span><span class="n">Key</span><span class="p">=</span><span class="s">"Taskbar"</span>
                        <span class="n">ToolTipText</span><span class="p">=</span><span class="s">"鼠标移动上显示的文字"</span>
                        <span class="n">DoubleClickCommand</span><span class="p">=</span><span class="s">"{Binding ShowWindowCommand}"</span>
                        <span class="n">IconSource</span><span class="p">=</span><span class="s">"Taskbar.ico"</span><span class="p">&gt;</span>

        <span class="p">&lt;/</span><span class="n">tb</span><span class="p">:</span><span class="n">TaskbarIcon</span><span class="p">&gt;</span>
</code></pre></div></div>

<p>这时的 TaskbarIcon 还没有 ViewModel 可以通过下面的方式</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="p">&lt;</span><span class="n">tb</span><span class="p">:</span><span class="n">TaskbarIcon</span> <span class="n">x</span><span class="p">:</span><span class="n">Key</span><span class="p">=</span><span class="s">"Taskbar"</span>
                        <span class="n">ToolTipText</span><span class="p">=</span><span class="s">"鼠标移动上显示的文字"</span>
                        <span class="n">DoubleClickCommand</span><span class="p">=</span><span class="s">"{Binding ShowWindowCommand}"</span>
                        <span class="n">IconSource</span><span class="p">=</span><span class="s">"Taskbar.ico"</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="n">tb</span><span class="p">:</span><span class="n">TaskbarIcon</span><span class="p">.</span><span class="n">DataContext</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="n">local</span><span class="p">:</span><span class="n">NotifyIconViewModel</span> <span class="p">/&gt;</span>
            <span class="p">&lt;/</span><span class="n">tb</span><span class="p">:</span><span class="n">TaskbarIcon</span><span class="p">.</span><span class="n">DataContext</span><span class="p">&gt;</span>
        <span class="p">&lt;/</span><span class="n">tb</span><span class="p">:</span><span class="n">TaskbarIcon</span><span class="p">&gt;</span>
</code></pre></div></div>

<p>现在双击就可以打开 MainWindow 因为默认 MainWindow 是打开的，比较难看到双击打开。在 App.xaml 去掉默认打开 MainWindow 需要找到下面的代码</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">StartupUri</span><span class="p">=</span><span class="s">"MainWindow.xaml"</span>
</code></pre></div></div>

<p>现在尝试不让默认打开 MainWindow 运行软件，可以看到托盘显示图标，双击图标才可以打开界面</p>

<p>如果要右击显示菜单，需要在 App.xaml 添加定义</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="p">&lt;</span><span class="n">ContextMenu</span> <span class="n">x</span><span class="p">:</span><span class="n">Shared</span><span class="p">=</span><span class="s">"false"</span> <span class="n">x</span><span class="p">:</span><span class="n">Key</span><span class="p">=</span><span class="s">"SysTrayMenu"</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="n">MenuItem</span> <span class="n">Header</span><span class="p">=</span><span class="s">"显示窗口"</span> <span class="n">Command</span><span class="p">=</span><span class="s">"{Binding ShowWindowCommand}"</span> <span class="p">/&gt;</span>
            <span class="p">&lt;</span><span class="n">MenuItem</span> <span class="n">Header</span><span class="p">=</span><span class="s">"关闭窗口"</span> <span class="n">Command</span><span class="p">=</span><span class="s">"{Binding HideWindowCommand}"</span> <span class="p">/&gt;</span>
            <span class="p">&lt;</span><span class="n">Separator</span> <span class="p">/&gt;</span>
            <span class="p">&lt;</span><span class="n">MenuItem</span> <span class="n">Header</span><span class="p">=</span><span class="s">"退出"</span> <span class="n">Command</span><span class="p">=</span><span class="s">"{Binding ExitApplicationCommand}"</span> <span class="p">/&gt;</span>
        <span class="p">&lt;/</span><span class="n">ContextMenu</span><span class="p">&gt;</span>
</code></pre></div></div>

<p>在 TaskbarIcon 使用菜单</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="p">&lt;</span><span class="n">tb</span><span class="p">:</span><span class="n">TaskbarIcon</span> <span class="n">x</span><span class="p">:</span><span class="n">Key</span><span class="p">=</span><span class="s">"Taskbar"</span>
                        <span class="n">ContextMenu</span><span class="p">=</span><span class="s">"{StaticResource SysTrayMenu}"</span>
                        <span class="n">ToolTipText</span><span class="p">=</span><span class="s">"鼠标移动上显示的文字"</span>
                        <span class="n">DoubleClickCommand</span><span class="p">=</span><span class="s">"{Binding ShowWindowCommand}"</span>
                        <span class="n">IconSource</span><span class="p">=</span><span class="s">"Taskbar.ico"</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="n">tb</span><span class="p">:</span><span class="n">TaskbarIcon</span><span class="p">.</span><span class="n">DataContext</span><span class="p">&gt;</span>
                <span class="p">&lt;</span><span class="n">local</span><span class="p">:</span><span class="n">NotifyIconViewModel</span> <span class="p">/&gt;</span>
            <span class="p">&lt;/</span><span class="n">tb</span><span class="p">:</span><span class="n">TaskbarIcon</span><span class="p">.</span><span class="n">DataContext</span><span class="p">&gt;</span>
        <span class="p">&lt;/</span><span class="n">tb</span><span class="p">:</span><span class="n">TaskbarIcon</span><span class="p">&gt;</span>
</code></pre></div></div>

<p>因为在 ViewModel 已经写好代码，所以现在就可以运行</p>

<!-- ![](image/WPF 托盘显示/WPF 托盘显示4.png) -->

<p><img src="http://image.acmx.xyz/lindexi%2F2018112114264590" alt="" /></p>

<p>默认的软件设置是关闭最后一个窗口的时候应用就关闭，通过设置 App.ShutdownMode 可以在调用退出才关闭，打开 App.xaml 添加代码</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="n">ShutdownMode</span><span class="p">=</span><span class="s">"OnExplicitShutdown"</span>
</code></pre></div></div>

<p>本文的代码</p>

<p><a href="https://download.csdn.net/download/lindexi_gd/10798424">WPF 托盘显示 右击打开菜单，双击打开软件-CSDN下载</a></p>

<p>下面还有一些高级的使用</p>

<p>定义托盘鼠标移动上去的文字颜色</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>            <span class="p">&lt;</span><span class="n">tb</span><span class="p">:</span><span class="n">TaskbarIcon</span><span class="p">.</span><span class="n">TrayToolTip</span><span class="p">&gt;</span>
                 <span class="err">里面可以添加控件</span>
            <span class="p">&lt;/</span><span class="n">tb</span><span class="p">:</span><span class="n">TaskbarIcon</span><span class="p">.</span><span class="n">TrayToolTip</span><span class="p">&gt;</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        &lt;tb:TaskbarIcon x:Key="Taskbar"
                        ContextMenu="{StaticResource SysTrayMenu}"
                        DoubleClickCommand="{Binding ShowWindowCommand}"
                        IconSource="Taskbar.ico"&gt;
            &lt;tb:TaskbarIcon.TrayToolTip&gt;
                &lt;Border
                    Background="White"
                    BorderBrush="Orange"
                    BorderThickness="2"
                    CornerRadius="4"
                    Opacity="0.8"
                    Width="160"
                    Height="40"&gt;
                    &lt;TextBlock
                        Text="hello world"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center" /&gt;
                &lt;/Border&gt;
            &lt;/tb:TaskbarIcon.TrayToolTip&gt;
            &lt;tb:TaskbarIcon.DataContext&gt;
                &lt;local:NotifyIconViewModel /&gt;
            &lt;/tb:TaskbarIcon.DataContext&gt;
        &lt;/tb:TaskbarIcon&gt;

</code></pre></div></div>

<!-- ![](image/WPF 托盘显示/WPF 托盘显示5.png) -->

<p><img src="http://image.acmx.xyz/lindexi%2F20181121143613667" alt="" /></p>

<p>因为可以添加控件，发挥你的想法，如添加按钮</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        &lt;tb:TaskbarIcon x:Key="Taskbar"
                        ContextMenu="{StaticResource SysTrayMenu}"
                        DoubleClickCommand="{Binding ShowWindowCommand}"
                        IconSource="Taskbar.ico"&gt;
            &lt;tb:TaskbarIcon.TrayToolTip&gt;
                &lt;Border
                    Background="White"
                    BorderBrush="Orange"
                    BorderThickness="2"
                    CornerRadius="4"
                    Opacity="0.8"
                    Width="160"&gt;
                   &lt;Grid&gt;
                       &lt;TextBlock HorizontalAlignment="Center" VerticalAlignment="Center" Text="可以放文字"&gt;&lt;/TextBlock&gt;
                       &lt;Button Margin="10,100,10,10" Content="可以放按钮"&gt;&lt;/Button&gt;
                   &lt;/Grid&gt;
                &lt;/Border&gt;
            &lt;/tb:TaskbarIcon.TrayToolTip&gt;
            &lt;tb:TaskbarIcon.DataContext&gt;
                &lt;local:NotifyIconViewModel /&gt;
            &lt;/tb:TaskbarIcon.DataContext&gt;
        &lt;/tb:TaskbarIcon&gt;

</code></pre></div></div>

<!-- ![](image/WPF 托盘显示/WPF 托盘显示6.png) -->

<p><img src="http://image.acmx.xyz/lindexi%2F20181121143952232" alt="" /></p>

<p>显示气泡</p>

<p>通过下面的代码可以显示气泡</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Taskbar</span><span class="p">.</span><span class="nf">ShowBalloonTip</span><span class="p">(</span><span class="s">"标题"</span><span class="p">,</span> <span class="s">"内容"</span><span class="p">,</span> <span class="n">BalloonIcon</span><span class="p">.</span><span class="n">Info</span><span class="p">);</span>
</code></pre></div></div>

<!-- ![](image/WPF 托盘显示/WPF 托盘显示7.png) -->

<p><img src="http://image.acmx.xyz/lindexi%2F20181121145319625" alt="" /></p>

<p>如果需要自定义气泡，定义一个继承 UIElement 的类，然后传入 TaskbarIcon.ShowCustomBalloon 就可以</p>

<p>如已经定义了 FancyBalloon 气泡，可以通过下面的代码</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="n">FancyBalloon</span> <span class="n">balloon</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">FancyBalloon</span><span class="p">();</span>
 <span class="n">TaskbarIcon</span><span class="p">.</span><span class="nf">ShowCustomBalloon</span><span class="p">(</span><span class="n">balloon</span><span class="p">,</span> <span class="n">PopupAnimation</span><span class="p">.</span><span class="n">Slide</span><span class="p">,</span> <span class="m">4000</span> <span class="cm">/*多少时间就隐藏*/</span><span class="p">);</span>
</code></pre></div></div>

<p>代码：<a href="https://bitbucket.org/hardcodet/notifyicon-wpf/overview">NotifyIcon WPF — Bitbucket</a></p>

:ET