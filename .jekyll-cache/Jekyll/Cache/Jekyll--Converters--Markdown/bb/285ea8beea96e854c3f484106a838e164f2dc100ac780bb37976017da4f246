I"vv<p>本文比较多个方式进行配置文件的存储，对比各个不同算法的读写性能。
在应用软件启动的时候，需要读取配置文件，但是启动的性能很重要，所以需要有一个很快的读取配置文件的方法。
如果你不想看过程，那么请看拖动滚动条</p>

<!--more-->

<!-- CreateTime:2018/8/10 19:16:52 -->

<div id="toc"></div>

<p>本文将会比较三个世界上最好的序列化算法，一个是 json 、一个是 ProtoBuf 、一个是 wire</p>

<p>原来我的软件在启动的时候是需要读取很多个文件，因为每个模块的配置都不同，所有模块的配置都是模块自己查找配置文件读取，然而大家都知道，在机械硬盘，随机读取文件的性能很差。现在虽然很多用户都是使用固态硬盘，但是对于启动性能优化，还是要尽量减少在软件启动过程的读取文件。</p>

<p>我询问了奎爷，他是一位强大的程序员，他告诉我，谷歌浏览器把很多零碎的文件，如历史记录和密码都压缩为一个文件，这样的启动时候，顺序读取性能很快，所以浏览器才可以快速启动。</p>

<p>于是我就开始了准备把所有的模块的配置文件合为一个，在合并的时候需要做序列化，因为存在很多模块都是使用自己实现的方式进行序列化。</p>

<p>下面就是我进行对比各个算法的性能。</p>

<p>需要注意，在软件启动的时候，还需要计算 dll 加载的性能，也就是如果有一个dll可以提高序列化性能，但是这个 dll 加载性能很差，也是不能使用这个dll的。</p>

<h2 id="定义">定义</h2>

<p>先定义一个简单的类，这个类用来存放数据，只有 key-value 的数据</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="p">[</span><span class="n">ProtoContract</span><span class="p">]</span>
    <span class="p">[</span><span class="n">Serializable</span><span class="p">]</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">Foo</span>
    <span class="p">{</span>
        <span class="p">[</span><span class="nf">ProtoMember</span><span class="p">(</span><span class="m">1</span><span class="p">)]</span>
        <span class="k">public</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="kt">string</span><span class="p">&gt;</span> <span class="n">CurmobeKallbu</span> <span class="p">{</span> <span class="k">set</span><span class="p">;</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
</code></pre></div></div>

<p>在启动之前就需要读取这个文件作为配置，所以需要找到一个很快的方法从文件读取，然后反序列化。</p>

<p>为了方便序列化，我写了一个方法<code class="language-plaintext highlighter-rouge">Foo.BegaymouniWaloujijou</code>用来创建 1000 个随机的 key-value 为数据。因为代码很多，我就不写了，下面就是函数的定义，需要大家写入随机的值</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="k">public</span> <span class="k">static</span> <span class="n">Foo</span> <span class="nf">BegaymouniWaloujijou</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nf">Foo</span><span class="p">()</span>
            <span class="p">{</span>
                <span class="n">CurmobeKallbu</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="kt">string</span><span class="p">&gt;()</span>
                <span class="p">{</span>
                	<span class="c1">// 这里写入随机的值</span>
                <span class="p">}</span>
            <span class="p">};</span>
        <span class="p">}</span>
</code></pre></div></div>

<h2 id="json">json</h2>

<p>首先是使用最有名的 json 来进行序列化，安装 Nuget 第一个，点击管理nuget，然后点击浏览，现在看到的第一个是不是 json 库？如果不是，那么说明本文已经过期</p>

<p>在看本文的时候，如果要运行本文的代码，需要先在自己的 E 盘创建一个叫回收站的文件夹。因为我在代码会对这个文件夹写入。</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>            <span class="kt">var</span> <span class="n">fileInfo</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">FileInfo</span><span class="p">(</span><span class="s">@"E:\回收站\xx5"</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(!</span><span class="n">fileInfo</span><span class="p">.</span><span class="n">Exists</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="kt">var</span> <span class="n">foo</span> <span class="p">=</span> <span class="n">Foo</span><span class="p">.</span><span class="nf">BegaymouniWaloujijou</span><span class="p">();</span>

                <span class="kt">var</span> <span class="n">stopwatch</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Stopwatch</span><span class="p">();</span>

                <span class="n">stopwatch</span><span class="p">.</span><span class="nf">Start</span><span class="p">();</span>

                <span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">stream</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">StreamWriter</span><span class="p">(</span><span class="n">fileInfo</span><span class="p">.</span><span class="nf">OpenWrite</span><span class="p">()))</span>
                <span class="p">{</span>
                    <span class="kt">var</span> <span class="n">str</span> <span class="p">=</span> <span class="n">JsonConvert</span><span class="p">.</span><span class="nf">SerializeObject</span><span class="p">(</span><span class="n">foo</span><span class="p">,</span> <span class="n">Formatting</span><span class="p">.</span><span class="n">Indented</span><span class="p">);</span>
                    <span class="n">stream</span><span class="p">.</span><span class="nf">Write</span><span class="p">(</span><span class="n">str</span><span class="p">);</span>
                <span class="p">}</span>

                <span class="n">stopwatch</span><span class="p">.</span><span class="nf">Stop</span><span class="p">();</span>

                <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"写入"</span> <span class="p">+</span> <span class="n">stopwatch</span><span class="p">.</span><span class="n">ElapsedMilliseconds</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">else</span>
            <span class="p">{</span>
                <span class="kt">var</span> <span class="n">stopwatch</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Stopwatch</span><span class="p">();</span>
                <span class="n">stopwatch</span><span class="p">.</span><span class="nf">Start</span><span class="p">();</span>
                <span class="kt">var</span> <span class="n">stream</span> <span class="p">=</span> <span class="n">fileInfo</span><span class="p">.</span><span class="nf">OpenText</span><span class="p">();</span>
                <span class="k">using</span> <span class="p">(</span><span class="n">stream</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="kt">var</span> <span class="n">foo</span> <span class="p">=</span> <span class="n">JsonConvert</span><span class="p">.</span><span class="n">DeserializeObject</span><span class="p">&lt;</span><span class="n">Foo</span><span class="p">&gt;(</span><span class="n">stream</span><span class="p">.</span><span class="nf">ReadToEnd</span><span class="p">());</span>
                <span class="p">}</span>

                <span class="n">stopwatch</span><span class="p">.</span><span class="nf">Stop</span><span class="p">();</span>
                <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"读取时间"</span> <span class="p">+</span> <span class="n">stopwatch</span><span class="p">.</span><span class="n">ElapsedMilliseconds</span><span class="p">);</span>
                <span class="n">fileInfo</span><span class="p">.</span><span class="nf">Delete</span><span class="p">();</span>
            <span class="p">}</span>
</code></pre></div></div>

<p>上面的代码很简单，就是使用这个方式保存</p>

<p>那么性能怎样？请看下面</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>               <span class="err">读取</span>	<span class="err">写入</span>
               <span class="m">170</span>	<span class="m">188</span>
               <span class="m">161</span>	<span class="m">150</span>
               <span class="m">191</span>	<span class="m">168</span>
               <span class="m">166</span>	<span class="m">164</span>
               <span class="m">230</span>	<span class="m">156</span>
</code></pre></div></div>

<p>数据的单位是毫秒，平均时间是读取 183.6 毫秒，写入165.2毫秒</p>

<h2 id="protobuf">ProtoBuf</h2>

<p>这是 谷歌的一个库，我安装了 protobuf-net ，然后进行序列化</p>

<p><img src="http://image.acmx.xyz/lindexi%2F20186151539553983.jpg" alt="" /></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>         <span class="kt">var</span> <span class="n">fileInfo</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">FileInfo</span><span class="p">(</span><span class="s">@"E:\回收站\xx2"</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(!</span><span class="n">fileInfo</span><span class="p">.</span><span class="n">Exists</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="kt">var</span> <span class="n">foo</span> <span class="p">=</span> <span class="n">Foo</span><span class="p">.</span><span class="nf">BegaymouniWaloujijou</span><span class="p">();</span>

                <span class="kt">var</span> <span class="n">stopwatch</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Stopwatch</span><span class="p">();</span>

                <span class="n">stopwatch</span><span class="p">.</span><span class="nf">Start</span><span class="p">();</span>

                <span class="kt">var</span> <span class="n">stream</span> <span class="p">=</span> <span class="n">fileInfo</span><span class="p">.</span><span class="nf">OpenWrite</span><span class="p">();</span>

                <span class="k">using</span> <span class="p">(</span><span class="n">stream</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="n">Serializer</span><span class="p">.</span><span class="nf">Serialize</span><span class="p">(</span><span class="n">stream</span><span class="p">,</span> <span class="n">foo</span><span class="p">);</span>
                <span class="p">}</span>

                <span class="n">stopwatch</span><span class="p">.</span><span class="nf">Stop</span><span class="p">();</span>

                <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"写入"</span> <span class="p">+</span> <span class="n">stopwatch</span><span class="p">.</span><span class="n">ElapsedMilliseconds</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">else</span>
            <span class="p">{</span>
                <span class="kt">var</span> <span class="n">stopwatch</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Stopwatch</span><span class="p">();</span>
                <span class="n">stopwatch</span><span class="p">.</span><span class="nf">Start</span><span class="p">();</span>
                <span class="kt">var</span> <span class="n">stream</span> <span class="p">=</span> <span class="n">fileInfo</span><span class="p">.</span><span class="nf">OpenRead</span><span class="p">();</span>
                <span class="k">using</span> <span class="p">(</span><span class="n">stream</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="n">stream</span><span class="p">.</span><span class="nf">Seek</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="n">SeekOrigin</span><span class="p">.</span><span class="n">Begin</span><span class="p">);</span>

                    <span class="kt">var</span> <span class="n">foo</span> <span class="p">=</span> <span class="n">Serializer</span><span class="p">.</span><span class="n">Deserialize</span><span class="p">&lt;</span><span class="n">Foo</span><span class="p">&gt;(</span><span class="n">stream</span><span class="p">);</span>
                <span class="p">}</span>

                <span class="n">stopwatch</span><span class="p">.</span><span class="nf">Stop</span><span class="p">();</span>
                <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"读取时间"</span> <span class="p">+</span> <span class="n">stopwatch</span><span class="p">.</span><span class="n">ElapsedMilliseconds</span><span class="p">);</span>
                <span class="n">fileInfo</span><span class="p">.</span><span class="nf">Delete</span><span class="p">();</span>
            <span class="p">}</span>
</code></pre></div></div>

<p>我尝试在 ssd 和 机械硬盘读写，比较两个的性能</p>

<p>下面是在 ssd 的读写性能，平均时间是读取 91.8 毫秒，写入 119.4 毫秒</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>               <span class="err">读取</span>	<span class="err">写入</span>
               <span class="m">90</span>	<span class="m">108</span>
               <span class="m">84</span>	<span class="m">115</span>
               <span class="m">93</span>	<span class="m">142</span>
               <span class="m">80</span>	<span class="m">109</span>
               <span class="m">112</span>	<span class="m">123</span>
</code></pre></div></div>

<p>我尝试在机械硬盘读写，平均时间是读取104.4毫秒，写入140.2毫秒</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>              <span class="err">读取</span>	<span class="err">写入</span>
               <span class="m">95</span>	<span class="m">127</span>
               <span class="m">115</span>	<span class="m">163</span>
               <span class="m">107</span>	<span class="m">168</span>
               <span class="m">98</span>	<span class="m">128</span>
               <span class="m">107</span>	<span class="m">115</span>
</code></pre></div></div>

<h2 id="wire">wire</h2>

<p>这是传说中最快的序列化库，我安装了 Wire 然后使用下面的代码，运行 5 次计算读写时间</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>          <span class="kt">var</span> <span class="n">fileInfo</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">FileInfo</span><span class="p">(</span><span class="s">@"E:\回收站\xx3"</span><span class="p">);</span>


            <span class="k">if</span> <span class="p">(!</span><span class="n">fileInfo</span><span class="p">.</span><span class="n">Exists</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="kt">var</span> <span class="n">foo</span> <span class="p">=</span> <span class="n">Foo</span><span class="p">.</span><span class="nf">BegaymouniWaloujijou</span><span class="p">();</span>

                <span class="kt">var</span> <span class="n">stopwatch</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Stopwatch</span><span class="p">();</span>

                <span class="n">stopwatch</span><span class="p">.</span><span class="nf">Start</span><span class="p">();</span>

                <span class="kt">var</span> <span class="n">stream</span> <span class="p">=</span> <span class="n">fileInfo</span><span class="p">.</span><span class="nf">OpenWrite</span><span class="p">();</span>

                <span class="k">using</span> <span class="p">(</span><span class="n">stream</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="kt">var</span> <span class="n">serializer</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Wire</span><span class="p">.</span><span class="nf">Serializer</span><span class="p">();</span>
                    <span class="n">serializer</span><span class="p">.</span><span class="nf">Serialize</span><span class="p">(</span><span class="n">foo</span><span class="p">,</span> <span class="n">stream</span><span class="p">);</span>
                <span class="p">}</span>

                <span class="n">stopwatch</span><span class="p">.</span><span class="nf">Stop</span><span class="p">();</span>

                <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"写入"</span> <span class="p">+</span> <span class="n">stopwatch</span><span class="p">.</span><span class="n">ElapsedMilliseconds</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">else</span>
            <span class="p">{</span>
                <span class="kt">var</span> <span class="n">stopwatch</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Stopwatch</span><span class="p">();</span>
                <span class="n">stopwatch</span><span class="p">.</span><span class="nf">Start</span><span class="p">();</span>
                <span class="kt">var</span> <span class="n">stream</span> <span class="p">=</span> <span class="n">fileInfo</span><span class="p">.</span><span class="nf">OpenRead</span><span class="p">();</span>
                <span class="k">using</span> <span class="p">(</span><span class="n">stream</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="kt">var</span> <span class="n">serializer</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Wire</span><span class="p">.</span><span class="nf">Serializer</span><span class="p">();</span>
                    <span class="kt">var</span> <span class="n">foo</span> <span class="p">=</span> <span class="n">serializer</span><span class="p">.</span><span class="n">Deserialize</span><span class="p">&lt;</span><span class="n">Foo</span><span class="p">&gt;(</span><span class="n">stream</span><span class="p">);</span>
                <span class="p">}</span>

                <span class="n">stopwatch</span><span class="p">.</span><span class="nf">Stop</span><span class="p">();</span>
                <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"读取时间"</span> <span class="p">+</span> <span class="n">stopwatch</span><span class="p">.</span><span class="n">ElapsedMilliseconds</span><span class="p">);</span>
                <span class="n">fileInfo</span><span class="p">.</span><span class="nf">Delete</span><span class="p">();</span>
            <span class="p">}</span>
</code></pre></div></div>

<p>虽然小伙伴说他是最快的，但是在我的设备，平均读取125.8毫秒，写入101.2毫秒</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>              <span class="err">读取</span>	<span class="err">写入</span>
               <span class="m">109</span>	<span class="m">104</span>
               <span class="m">106</span>	<span class="m">94</span>
               <span class="m">111</span>	<span class="m">92</span>
               <span class="m">190</span>	<span class="m">90</span>
               <span class="m">113</span>	<span class="m">126</span>
</code></pre></div></div>

<h2 id="自己写的">自己写的</h2>

<p>最后我尝试自己写了简单的序列化，因为存放的信息是key-value，我可以控制包含的字符串都是不带换行，也就是我可以一行放 value 一行放关键字。</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>           <span class="kt">var</span> <span class="n">fileInfo</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">FileInfo</span><span class="p">(</span><span class="s">@"E:\回收站\xx7"</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(!</span><span class="n">fileInfo</span><span class="p">.</span><span class="n">Exists</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="kt">var</span> <span class="n">foo</span> <span class="p">=</span> <span class="n">Foo</span><span class="p">.</span><span class="nf">BegaymouniWaloujijou</span><span class="p">();</span>

                <span class="kt">var</span> <span class="n">stopwatch</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Stopwatch</span><span class="p">();</span>

                <span class="n">stopwatch</span><span class="p">.</span><span class="nf">Start</span><span class="p">();</span>

                <span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">stream</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">StreamWriter</span><span class="p">(</span><span class="n">fileInfo</span><span class="p">.</span><span class="nf">OpenWrite</span><span class="p">()))</span>
                <span class="p">{</span>
                    <span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">temp</span> <span class="k">in</span> <span class="n">foo</span><span class="p">.</span><span class="n">CurmobeKallbu</span><span class="p">)</span>
                    <span class="p">{</span>
                        <span class="n">stream</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="n">temp</span><span class="p">.</span><span class="n">Key</span><span class="p">);</span>
                        <span class="n">stream</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="n">temp</span><span class="p">.</span><span class="n">Value</span><span class="p">);</span>
                    <span class="p">}</span>
                <span class="p">}</span>

                <span class="n">stopwatch</span><span class="p">.</span><span class="nf">Stop</span><span class="p">();</span>

                <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"写入"</span> <span class="p">+</span> <span class="n">stopwatch</span><span class="p">.</span><span class="n">ElapsedMilliseconds</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">else</span>
            <span class="p">{</span>
                <span class="kt">var</span> <span class="n">stopwatch</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Stopwatch</span><span class="p">();</span>
                <span class="n">stopwatch</span><span class="p">.</span><span class="nf">Start</span><span class="p">();</span>
                <span class="kt">var</span> <span class="n">stream</span> <span class="p">=</span> <span class="n">fileInfo</span><span class="p">.</span><span class="nf">OpenText</span><span class="p">();</span>
                <span class="k">using</span> <span class="p">(</span><span class="n">stream</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="kt">var</span> <span class="n">str</span> <span class="p">=</span> <span class="n">stream</span><span class="p">.</span><span class="nf">ReadToEnd</span><span class="p">().</span><span class="nf">Split</span><span class="p">(</span><span class="sc">'\n'</span><span class="p">);</span>
                    <span class="kt">var</span> <span class="n">foo</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Foo</span><span class="p">();</span>
                    <span class="n">foo</span><span class="p">.</span><span class="n">CurmobeKallbu</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="kt">string</span><span class="p">&gt;(</span><span class="n">str</span><span class="p">.</span><span class="n">Length</span> <span class="p">/</span> <span class="m">2</span><span class="p">);</span>
                    <span class="kt">string</span> <span class="n">key</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
                    <span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">temp</span> <span class="k">in</span> <span class="n">str</span><span class="p">)</span>
                    <span class="p">{</span>
                        <span class="k">if</span> <span class="p">(</span><span class="n">key</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
                        <span class="p">{</span>
                            <span class="n">key</span> <span class="p">=</span> <span class="n">temp</span><span class="p">;</span>
                        <span class="p">}</span>
                        <span class="k">else</span>
                        <span class="p">{</span>
                            <span class="n">foo</span><span class="p">.</span><span class="n">CurmobeKallbu</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">temp</span><span class="p">);</span>
                            <span class="n">key</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
                        <span class="p">}</span>
                    <span class="p">}</span>
                <span class="p">}</span>

                <span class="n">stopwatch</span><span class="p">.</span><span class="nf">Stop</span><span class="p">();</span>
                <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"读取时间"</span> <span class="p">+</span> <span class="n">stopwatch</span><span class="p">.</span><span class="n">ElapsedMilliseconds</span><span class="p">);</span>
                <span class="n">fileInfo</span><span class="p">.</span><span class="nf">Delete</span><span class="p">();</span>
            <span class="p">}</span>
</code></pre></div></div>

<p>我发现在 ssd 和在机械硬盘读写性能几乎没有相差，有时候相同程序在 ssd 运行的时间比在机械硬盘多。在我测试了自己写的程序才知道，最多的时间在序列化，读取文件的时间反而可以被忽略。使用自己写的序列化读取1毫秒，写入7.2毫秒，所以这么简单的配置文件还是自己做序列化比较快。</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>             <span class="err">读取</span>	<span class="err">写入</span>
               <span class="m">1</span>	<span class="m">6</span>
               <span class="m">1</span>	<span class="m">8</span>
               <span class="m">1</span>	<span class="m">8</span>
               <span class="m">1</span>	<span class="m">5</span>
               <span class="m">1</span>	<span class="m">9</span>
</code></pre></div></div>
<h2 id="建议">建议</h2>

<p>在软件启动的时候，还有一个读取文件是加载库，如果我使用了第三方的 dll ，那么在启动的时候我就需要加载这个 dll ，但是我读取的配置文件只有不到 100 k 但是我加载的几个库都是很大。加载库的时间已经足够我自己写的序列化读取完成，需要知道，在启动程序的时候不是把所有程序的库都加载，只有在用到的时候才去读取库，读取库也是需要时间，所以程序启动的时候尽量不要引用不相关的库。</p>

<p><img src="http://image.acmx.xyz/lindexi%2F20186151548345847.jpg" alt="" /></p>

<!-- ![](image/C# 配置文件存储 各种序列化算法性能比较/C# 配置文件存储 各种序列化算法性能比较0.png) -->

<p>所以在启动的过程如果需要读取配置文件，还是使用自己写序列化，而且要求自己写的配置文件很稳定，不要在启动的时候出现异常。</p>

<p>自己写配置文件可以在一个线程进行读取，然后把整个程序所有在启动过程使用配置文件的地方都删除，只有软件启动的过程读取的文件只有很少的几个，最好是一个，这样才能保证软件启动的性能。</p>

<p>代码：<a href="https://download.csdn.net/download/lindexi_gd/10481176">C# 配置文件存储 各种序列化算法性能比较 程序1.1-CSDN下载</a></p>

<p>如果没有积分需要代码请联系我</p>

<p><img src="https://i.loli.net/2018/04/08/5aca001f44682.jpg" alt="" /></p>

:ET