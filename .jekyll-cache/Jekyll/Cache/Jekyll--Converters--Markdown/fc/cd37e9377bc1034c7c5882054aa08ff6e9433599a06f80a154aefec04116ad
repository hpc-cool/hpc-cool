I"O<p>本文告诉大家如何通过 Microsoft.Extensions.Hosting.BackgroundService  开启后台任务</p>

<!--more-->

<!-- CreateTime:2019/8/31 16:55:58 -->

<!-- 标签：asp,aspdotnetcore,dotnetcore -->

<p>实现 BackManagerService 类继承 BackgroundService 抽象类，请看代码</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">public</span> <span class="k">class</span> <span class="nc">BackManagerService</span> <span class="p">:</span> <span class="n">BackgroundService</span>
    <span class="p">{</span>
        <span class="c1">/// &lt;inheritdoc /&gt;</span>
        <span class="k">protected</span> <span class="k">override</span> <span class="n">Task</span> <span class="nf">ExecuteAsync</span><span class="p">(</span><span class="n">CancellationToken</span> <span class="n">stoppingToken</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">Task</span><span class="p">.</span><span class="n">CompletedTask</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
</code></pre></div></div>

<p>然后打开 Startup.cs 在 ConfigureServices 方法注入</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="k">public</span> <span class="k">void</span> <span class="nf">ConfigureServices</span><span class="p">(</span><span class="n">IServiceCollection</span> <span class="n">services</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">services</span><span class="p">.</span><span class="n">AddSingleton</span><span class="p">&lt;</span><span class="n">IHostedService</span><span class="p">,</span> <span class="n">BackManagerService</span><span class="p">&gt;();</span>

            <span class="n">services</span><span class="p">.</span><span class="nf">AddMvc</span><span class="p">().</span><span class="nf">SetCompatibilityVersion</span><span class="p">(</span><span class="n">CompatibilityVersion</span><span class="p">.</span><span class="n">Version_2_1</span><span class="p">);</span>
        <span class="p">}</span>
</code></pre></div></div>

<p>现在运行 ASP.NET Core 程序就可以看到调用进 ExecuteAsync 方法了</p>

<p>那么如何实现轮询？大概在30秒左右做某个任务？在没有用任何设计的情况，假如这个任务就放在了 BackManagerService 的 Foo 方法，可以通过下面代码调用</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="k">protected</span> <span class="k">override</span> <span class="k">async</span> <span class="n">Task</span> <span class="nf">ExecuteAsync</span><span class="p">(</span><span class="n">CancellationToken</span> <span class="n">stoppingToken</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">while</span> <span class="p">(!</span><span class="n">stoppingToken</span><span class="p">.</span><span class="n">IsCancellationRequested</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="nf">Foo</span><span class="p">();</span>
                <span class="k">await</span> <span class="n">Task</span><span class="p">.</span><span class="nf">Delay</span><span class="p">(</span><span class="n">TimeSpan</span><span class="p">.</span><span class="nf">FromSeconds</span><span class="p">(</span><span class="m">30</span><span class="p">),</span> <span class="n">stoppingToken</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>
</code></pre></div></div>

<p>通过 Task.Delay 的方法延迟指定的时间就可以了，那么更复杂的封装就在大佬们的封装变得更加好用，更多封装请看 Ron 大佬博客</p>

<p>所有代码放在 <a href="https://github.com/lindexi/lindexi_gd/tree/8260ae90d65d616e284b54841e2f95ca6a34f8a3/KorburxetiCheewharorwale">github</a></p>

<p><a href="https://www.cnblogs.com/viter/p/10078488.html">Asp.Net Core 轻松学-基于微服务的后台任务调度管理器 - Ron.Liang - 博客园</a></p>

<p><a href="https://docs.microsoft.com/zh-cn/aspnet/core/fundamentals/host/hosted-services?view=aspnetcore-2.2">在 ASP.NET Core 中使用托管服务实现后台任务</a></p>

:ET