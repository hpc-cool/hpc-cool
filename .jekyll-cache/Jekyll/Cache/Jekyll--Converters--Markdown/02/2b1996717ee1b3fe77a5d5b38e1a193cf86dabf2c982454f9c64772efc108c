I"e<p>本文告诉大家如何做源代码包，源代码包的意思是安装的包不是安装dll的方式，而是使用源代码的方式。也就是最后是编译包的源代码而不是添加dll，这个方式是解决想要把项目分小，功能分细，但是不希望项目有很多的 dll，因为如果项目有很多 dll 会让软件打开的时间比较长</p>

<!--more-->

<!-- CreateTime:2020/2/29 10:58:20 -->

<!-- csdn -->
<div id="toc"></div>
<!-- 标签：Roslyn,MSBuild,编译器 -->

<p>先来告诉大家做这个包的目的，如果是使用分开很多项目，一个项目会创建一个 dll ，在客户端的软件，用户很希望软件点击就打开。但是如果 dll 多了，读取dll文件的时间，加上加载 dll 的时间就会很长，这时用户就需要等待软件启动的时间就比较长。</p>

<p>但是从软件开发的功能，不同的功能应该使用不同的项目，这样才可以尽可能复用代码。为了让项目可以分细，而且减少创建的 dll 库，就需要使用本文的技术。</p>

<p>使用源代码的项目而不是引用 dll 的方法实际上在 Chrome 就是这样做，谷歌的开发就是有很多，大概有几百个项目，但是编译出来的 dll 只有一两个，所以他才有一点击就打开。</p>

<h2 id="准备工作">准备工作</h2>

<p>在开始读本文之前，希望大家先了解一些概念，请看<a href="https://walterlv.github.io/post/understand-the-csproj.html">理解 C# 项目 csproj 文件格式的本质和编译流程 - walterlv</a>，这一个文章告诉了大家一些基础，不然在看本文的时候会不知道为什么我需要这样写。</p>

<p>本文使用了修改编译，方法是 <a href="https://walterlv.github.io/post/write-msbuild-target.html">如何编写基于 Microsoft.NET.Sdk 的跨平台的 MSBuild Target - walterlv</a>，从这个文章可以知道如何修改msbuild的编译</p>

<h2 id="最简单的引用方法">最简单的引用方法</h2>

<p><a href="https://walterlv.github.io/post/the-simplest-way-to-pack-a-source-code-nuget-package.html">将 .NET Core 项目打一个最简单的 NuGet 源码包，安装此包就像直接把源码放进项目一样 - walterlv</a></p>

<h2 id="手工打包-nuget-引用代码">手工打包 Nuget 引用代码</h2>

<p>如果看到了上面的博客，会发现实际上自己的需求还不是这么简单，如果需要真正做一个源码包，那么手动写 nuget 打包还是有必要的。</p>

<p>但是写一个手动打包的 Nuget 程序会占用本文太多的内容，所以我就不使用任何的代码进行打包，使用一步步告诉大家如何打包 nuget 的方法。</p>

<h3 id="准备">准备</h3>

<p>首先需要有一个压缩工具，因为 nuget 的包 nupkg 就是一个压缩包</p>

<p>在应用商店搜索 nuget 可以安装 nuget package explorer ，或者点击<a href="https://www.microsoft.com/store/productId/9WZDNCRDMDM3">安装</a></p>

<p>SublimeText 或 记事本，用来编辑文件</p>

<h3 id="文件夹方式">文件夹方式</h3>

<p>一个可以解析的 nuget 包是需要包括指定的一些文件的，最主要就是<code class="language-plaintext highlighter-rouge">.nuspec</code>文件，其他的文件都不是必要的</p>

<p>下面来告诉大家做一个空白的 nuget 包</p>

<h3 id="创建空白的-nuget-包">创建空白的 nuget 包</h3>

<p>首先创建一个空白文件，文件的后缀名是 nuspec ，文件名就是打包名</p>

<p>下面我创建 <code class="language-plaintext highlighter-rouge">lindexi.nuspec</code> 这个将会打出空白的 nuget 包</p>

<p>使用 SublimeText 打开 lindexi.nuspec 输入下面内容</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;?xml version="1.0"?&gt;
&lt;package&gt;
  &lt;metadata&gt;
    &lt;id&gt;lindexi&lt;/id&gt;
    &lt;version&gt;1.2.0&lt;/version&gt;
    &lt;title&gt;lindexi&lt;/title&gt;
    &lt;authors&gt;lindexi&lt;/authors&gt;
    &lt;owners&gt;林德熙;&lt;/owners&gt;
    &lt;description&gt;林德熙是逗比。&lt;/description&gt;
  &lt;/metadata&gt;
&lt;/package&gt;
</code></pre></div></div>

<p>标准的 nuget 包的 id 和 titile 、作者都是必须的，如果没有输入这些就无法打包</p>

<p>压缩一下，把后缀名修改为 nupkg 然后尝试使用 nuget package explorer 打开。</p>

<!-- ![](image/Roslyn 如何基于 Microsoft.NET.Sdk 制作源代码包/Roslyn 如何基于 Microsoft.NET.Sdk 制作源代码包1.png) -->

<p><img src="http://image.acmx.xyz/lindexi%2F20187201611165012.jpg" alt="" /></p>

<!-- ![](image/Roslyn 如何基于 Microsoft.NET.Sdk 制作源代码包/Roslyn 如何基于 Microsoft.NET.Sdk 制作源代码包0.png) -->

<p><img src="http://image.acmx.xyz/lindexi%2F20187201610533377.jpg" alt="" /></p>

<p>从图片可以看到压缩这个文件的压缩包的名字可以随便写，但是建议格式是 包的 id 加上 包的版本号，这样在垃圾 VisualStudio 才可以找到，不然总是会出现找不到包</p>

<p>现在尝试在 VisualStudio 设置包所在的路径，设置的方法我就不在这里告诉大家了，因为这时入门就需要知道的</p>

<!-- ![](image/Roslyn 如何基于 Microsoft.NET.Sdk 制作源代码包/Roslyn 如何基于 Microsoft.NET.Sdk 制作源代码包3.png) -->

<p><img src="http://image.acmx.xyz/lindexi%2F20187201614114962.jpg" alt="" /></p>

<p>在我设置了 nupkg 文件所在的文件夹之后，就可以在 VisualStudio 点击浏览，可以找到打出来的 nuget 包</p>

<!-- ![](image/Roslyn 如何基于 Microsoft.NET.Sdk 制作源代码包/Roslyn 如何基于 Microsoft.NET.Sdk 制作源代码包2.png) -->

<p><img src="http://image.acmx.xyz/lindexi%2F20187201613171545.jpg" alt="" /></p>

<p>现在需要在这个空白的 nuget 包添加多一些东西</p>

<h2 id="添加-build-修改编译过程">添加 build 修改编译过程</h2>

<p>刚才是不是觉得太简单了，下面就来告诉大家一些难度比较高的做法。</p>

<p>请严格按照本渣的方法来做，建议先自己走一次，发现成功了，再自己尝试修改，在本渣开始使用做源码包时，遇到了很多问题，所以我会在很多博客告诉大家。但是我不会在这个博客说道，这些知识很乱，而且和具体的 VisualStudio 版本有关，最近在给 MSBuild 修改，可能在大家用到就不会遇到这些坑。</p>

<p>如果大家觉得我这么辛苦，既要写文档又要给微软修vs那么就多给本渣点几个赞吧</p>

<p>现在把 nuget 的包的名字修改为清真的名字，现在的这个包是 <code class="language-plaintext highlighter-rouge">lindexi.1.2.0.nupkg</code> 这样就可以统一变量。</p>

<p>现在在 <code class="language-plaintext highlighter-rouge">lindexi.nuspec</code> 相同文件夹创建一个文件夹 <code class="language-plaintext highlighter-rouge">build</code> 注意大小写，现在的文件看起来就是这样</p>

<!-- ![](image/Roslyn 如何基于 Microsoft.NET.Sdk 制作源代码包/Roslyn 如何基于 Microsoft.NET.Sdk 制作源代码包4.png) -->

<p><img src="http://image.acmx.xyz/lindexi%2F2018720162148740.jpg" alt="" /></p>

<p>打开 build 文件夹，创建两个文件，需要注意这两个文件的文件名都需要保持和我一样，如果你修改为其他的文件名，没有开过光就无法使用</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">lindexi</span><span class="p">.</span><span class="n">props</span>
<span class="n">lindexi</span><span class="p">.</span><span class="n">targets</span>
</code></pre></div></div>

<!-- ![](image/Roslyn 如何基于 Microsoft.NET.Sdk 制作源代码包/Roslyn 如何基于 Microsoft.NET.Sdk 制作源代码包5.png) -->

<p><img src="http://image.acmx.xyz/lindexi%2F20187201622196718.jpg" alt="" /></p>

<p>现在还不需要在这两个文件里面写东西，先来写一下需要引用的源代码</p>

<h2 id="引用的源代码">引用的源代码</h2>

<p>为了方便告诉大家源代码包是如何做的，这里就不需要创建一个工程来写源代码，只需要在 <code class="language-plaintext highlighter-rouge">lindexi.nuspec</code> 相同文件夹创建一个文件夹 <code class="language-plaintext highlighter-rouge">src</code> 这个文件夹可以不注意大小写。在这个文件夹创建一个文件 <code class="language-plaintext highlighter-rouge">lindexi.cs</code> 在里面写下面的代码</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">lindexi</span>
<span class="p">{</span>
    <span class="k">class</span> <span class="nc">lindexi</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="k">void</span> <span class="nf">Doubi</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"欢迎访问我的博客 blog.csdn.net/lindexi_gd"</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>如果你先把这个代码修改了也可以，这个代码的内容不需要和我一样</p>

<p>现在的文件结构是</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">├─</span><span class="n">build</span>
<span class="err">├──</span><span class="n">lindexi</span><span class="p">.</span><span class="n">props</span>
<span class="err">├──</span><span class="n">lindexi</span><span class="p">.</span><span class="n">targets</span>
<span class="err">├─</span><span class="n">src</span>
<span class="err">├──</span><span class="n">lindexi</span><span class="p">.</span><span class="n">cs</span>
<span class="err">└─</span><span class="n">lindexi</span><span class="p">.</span><span class="n">nuspec</span>
</code></pre></div></div>

<h2 id="使用源代码">使用源代码</h2>

<p>打开 build 文件夹的 lindexi.props 文件添加下面代码</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;Project&gt;
  &lt;ItemGroup&gt;
    &lt;Compile Include="$(MSBuildThisFileDirectory)..\src\lindexi.cs" &gt;&lt;/Compile&gt;
  &lt;/ItemGroup&gt;
&lt;/Project&gt;
</code></pre></div></div>

<p>然后打开 lindexi.targets 添加下面代码</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;Project&gt;

&lt;/Project&gt;
</code></pre></div></div>

<p>现在把整个文件夹压缩起来，然后修改压缩文件名 <code class="language-plaintext highlighter-rouge">lindexi.1.2.nupkg</code> 注意这个名字一定需要和我一样</p>

<p>现在就可以在 VisualStudio 安装刚才的包，看到这里就是已经告诉大家做的源码包的最简单方法</p>

<h2 id="安装源码包">安装源码包</h2>

<p>打开 VisualStudio 创建一个新的项目，在 nuget 设置刚才的 nuget 包所在文件夹，然后点击浏览就可以安装</p>

<!-- ![](image/Roslyn 如何基于 Microsoft.NET.Sdk 制作源代码包/Roslyn 如何基于 Microsoft.NET.Sdk 制作源代码包6.png) -->

<p><img src="http://image.acmx.xyz/lindexi%2F2018720163773964.jpg" alt="" /></p>

<p>安装之后可以看到 VisualStudio 多了一个文件</p>

<!-- ![](image/Roslyn 如何基于 Microsoft.NET.Sdk 制作源代码包/Roslyn 如何基于 Microsoft.NET.Sdk 制作源代码包7.png) -->

<p><img src="http://image.acmx.xyz/lindexi%2F20187201638185824.jpg" alt="" /></p>

<p>在主函数写下面代码，运行可以看到</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>            <span class="kt">var</span> <span class="n">lindexi</span> <span class="p">=</span> <span class="k">new</span> <span class="n">lindexi</span><span class="p">.</span><span class="nf">lindexi</span><span class="p">();</span>
            <span class="n">lindexi</span><span class="p">.</span><span class="nf">Doubi</span><span class="p">();</span>
</code></pre></div></div>

<!-- ![](image/Roslyn 如何基于 Microsoft.NET.Sdk 制作源代码包/Roslyn 如何基于 Microsoft.NET.Sdk 制作源代码包8.png) -->

<p><img src="http://image.acmx.xyz/lindexi%2F20187201639203907.jpg" alt="" /></p>

<p>现在可以告诉大家源码包就这样做好了，使用这个方式就可以把自己的库作为源代码发给大家，这样即使很小的工具都可以做为一个nuget，而且安装也不需要担心 dll 太多软件启动比较慢。</p>

<p>但是可以看到这个方法都是需要自己对一个项目去写，如果想要自动去打包，请看 <a href="https://github.com/dotnet-campus/SourceYard">dotnet-campus/SourceYard: Add a NuGet package only for dll reference? By using dotnetCampus.SourceYard, you can pack a NuGet package with source code. By installing the new source code package, all source codes behaviors just like it is in your project.</a></p>

<p>如果使用上面的方法会发现自己的资源是找不到，包括 xaml 也是无法编译，在 xaml 里面引用资源也是找不到，不过这些问题我都会在 SourceYard 解决</p>

<h2 id="原理">原理</h2>

<p>刚才大家可以看到我没有在 nuspec 添加引用，但是我可以使用这个源代码，原理就是新的 VisualStudio 格式可以在安装 Nuget 包自动寻找 build 文件夹的 <code class="language-plaintext highlighter-rouge">包id.props</code> 和 <code class="language-plaintext highlighter-rouge">id.targets</code> 文件，自动引用这两个文件</p>

<p>通过引用这两个文件可以发现文件里有下面代码</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;Project&gt;
  &lt;ItemGroup&gt;
    &lt;Compile Include="$(MSBuildThisFileDirectory)..\src\lindexi.cs" &gt;&lt;/Compile&gt;
  &lt;/ItemGroup&gt;
&lt;/Project&gt;
</code></pre></div></div>

<p>从 <a href="https://walterlv.github.io/post/understand-the-csproj.html">理解 C# 项目 csproj 文件格式的本质和编译流程 - walterlv</a> 可以知道，添加的集合就可以在编译引用</p>

<p>上面代码就是添加了<code class="language-plaintext highlighter-rouge">lindexi.cs</code>文件作为编译，上面用到常量，请看<a href="https://walterlv.github.io/post/known-properties-in-csproj.html">项目文件中的已知属性（知道了这些，就不会随便在 csproj 中写死常量啦） - walterlv</a></p>

<p>所以在使用这个包就可以自动添加代码</p>

<h3 id="自定义打包">自定义打包</h3>

<p>虽然本金鱼在上面告诉大家这些变量的名字都需要保持和我说的一样，但是实际大家都想自定义</p>

<p>知道了原理是不是大家就可以写出其他代码，例如我的代码有两个文件 <code class="language-plaintext highlighter-rouge">lindexi.cs</code> 和 <code class="language-plaintext highlighter-rouge">walterlv.cs</code> 难道我需要使用两个代码</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">&lt;</span><span class="n">Project</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="n">ItemGroup</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="n">Compile</span> <span class="n">Include</span><span class="p">=</span><span class="s">"$(MSBuildThisFileDirectory)..\src\lindexi.cs"</span> <span class="p">&gt;&lt;/</span><span class="n">Compile</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="n">Compile</span> <span class="n">Include</span><span class="p">=</span><span class="s">"$(MSBuildThisFileDirectory)..\src\walterlv.cs"</span> <span class="p">&gt;&lt;/</span><span class="n">Compile</span><span class="p">&gt;</span>
  <span class="p">&lt;/</span><span class="n">ItemGroup</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="n">Project</span><span class="p">&gt;</span>
</code></pre></div></div>

<p>实际上我只需要一句代码，请看下面</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">&lt;</span><span class="n">Project</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="n">ItemGroup</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="n">Compile</span> <span class="n">Include</span><span class="p">=</span><span class="s">"$(MSBuildThisFileDirectory)..\src\*.cs"</span> <span class="p">&gt;&lt;/</span><span class="n">Compile</span><span class="p">&gt;</span>
  <span class="p">&lt;/</span><span class="n">ItemGroup</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="n">Project</span><span class="p">&gt;</span>
</code></pre></div></div>

<p>如果我还有文件夹，文件夹里有一些代码，我可以这样写</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">&lt;</span><span class="n">Project</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="n">ItemGroup</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="n">Compile</span> <span class="n">Include</span><span class="p">=</span><span class="s">"$(MSBuildThisFileDirectory)..\src\**\*.cs"</span> <span class="p">&gt;&lt;/</span><span class="n">Compile</span><span class="p">&gt;</span>
  <span class="p">&lt;/</span><span class="n">ItemGroup</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="n">Project</span><span class="p">&gt;</span>
</code></pre></div></div>

<p>现在可以使用所有的 cs 文件了，但是存在的 xaml 文件还没有解决，而且我也不能让开发者去编辑引用的代码</p>

<p>虽然编译引用的代码是可以修改，但是这个修改会在升级版本之后就被去掉，也就是开发者以为自己修改代码解决一个问题，实际上在他升级库的时候会发现自己没有解决。因为这个代码引用的是 nuget 的文件，所以其他的开发者拉代码也会发现没有解决问题</p>

<p>所以这时需要设置 <code class="language-plaintext highlighter-rouge">Visible="False"</code> ，请看代码</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">&lt;</span><span class="n">Project</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="n">ItemGroup</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="n">Compile</span> <span class="n">Include</span><span class="p">=</span><span class="s">"$(MSBuildThisFileDirectory)..\src\**\*.cs"</span> <span class="n">Visible</span><span class="p">=</span><span class="s">"False"</span><span class="p">&gt;&lt;/</span><span class="n">Compile</span><span class="p">&gt;</span>
  <span class="p">&lt;/</span><span class="n">ItemGroup</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="n">Project</span><span class="p">&gt;</span>
</code></pre></div></div>

<p>这样就可以让开发者在 VisualStudio 无法看到源代码，但是还是可以通过 Resharper 的方法跳转到源代码，如果他这么做了，我也没有办法</p>

<p>对于 xaml 资源，我需要在 props 文件使用下面代码才可以让 xaml 可以使用</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="p">&lt;</span><span class="n">Compile</span> <span class="n">Update</span><span class="p">=</span><span class="s">"$(MSBuildThisFileDirectory)..\src\**\*.xaml.cs"</span> <span class="n">Visible</span><span class="p">=</span><span class="s">"False"</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="n">DependentUpon</span><span class="p">&gt;%(</span><span class="n">Filename</span><span class="p">)&lt;/</span><span class="n">DependentUpon</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="n">Compile</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="n">Page</span> <span class="n">Include</span><span class="p">=</span><span class="s">"$(MSBuildThisFileDirectory)..\src\**\*.xaml"</span> <span class="n">Visible</span><span class="p">=</span><span class="s">"False"</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="n">SubType</span><span class="p">&gt;</span><span class="n">Designer</span><span class="p">&lt;/</span><span class="n">SubType</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="n">Generator</span><span class="p">&gt;</span><span class="n">MSBuild</span><span class="p">:</span><span class="n">Compile</span><span class="p">&lt;/</span><span class="n">Generator</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="n">Page</span><span class="p">&gt;</span>
</code></pre></div></div>

<p>对于资源文件，例如 WaterEffect.ps 因为资源是需要使用路径才可以使用，如果直接引用源代码会发现资源的路径是找不到，使用下面的代码就可以找到资源</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="p">&lt;</span><span class="n">Resource</span> <span class="n">Include</span><span class="p">=</span><span class="s">"$(MSBuildThisFileDirectory)..\src\Effects\WaterEffect.ps"</span> <span class="n">Link</span><span class="p">=</span><span class="s">"Effects\WaterEffect.ps"</span> <span class="n">Visible</span><span class="p">=</span><span class="s">"False"</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="n">CopyToOutputDirectory</span><span class="p">&gt;</span><span class="n">PreserveNewest</span><span class="p">&lt;/</span><span class="n">CopyToOutputDirectory</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="n">Resource</span><span class="p">&gt;</span>
</code></pre></div></div>

<p>需要注意，对于资源不能使用 <code class="language-plaintext highlighter-rouge">*.ps</code> 的方法，也就是通配是无法使用的，如果在<code class="language-plaintext highlighter-rouge">Link</code>里使用了 <code class="language-plaintext highlighter-rouge">*</code> 那么就会发现无法编译</p>

<p>这个问题已经告诉了垃圾微软，不知道会不会在 VisualStudio 去修复。</p>

<p>资源问题坑了<a href="https://huangtengxiao.gitee.io/">黄腾霄</a>两天，坑了我一天，所以我才把这个问题在这里和大家说，如果大家使用了上面说道的工具，就不需要了解这么多，做源代码包很简单</p>

<h2 id="解决-xaml-找不到方法问题">解决 xaml 找不到方法问题</h2>

<p>如果使用的是 WPF 程序，就需要额外添加一些代码，在 csproj 文件的开始和最后添加这样的代码</p>

<p>可以解决找不到xx类，或找不到 xx 方法或 <code class="language-plaintext highlighter-rouge">CS1061</code> xx 未包含 xx 的定义，并且找不到可接受的第一个 xx 参数的可访问扩展方法</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;Project</span> <span class="na">Sdk=</span><span class="s">"Microsoft.NET.Sdk"</span> <span class="na">ToolsVersion=</span><span class="s">"15.0"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;Import</span> <span class="na">Condition=</span><span class="s">"Exists('obj\xxx.csproj.nuget.g.props') "</span> <span class="na">Project=</span><span class="s">"obj\$(MSBuildProjectName).csproj.nuget.g.props"</span> <span class="nt">/&gt;</span>

  其他代码

  <span class="nt">&lt;Import</span> <span class="na">Condition=</span><span class="s">"Exists('obj\xxx.csproj.nuget.g.targets') "</span> <span class="na">Project=</span><span class="s">"obj\$(MSBuildProjectName).csproj.nuget.g.targets"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/Project&gt;</span>
</code></pre></div></div>

<p>这里 xxx.csproj.nuget.g.targets 的 xxx 就是项目名，注意此时不能使用 <code class="language-plaintext highlighter-rouge">$(MSBuildProjectName)</code> 代替项目名，因为在编译过程是 <code class="language-plaintext highlighter-rouge">xxx_一段我看不懂的字符_wpftmp.csproj</code> 而不是直接的 <code class="language-plaintext highlighter-rouge">xxx</code> 项目</p>

<p>也就是 <code class="language-plaintext highlighter-rouge">$(MSBuildProjectName).csproj.nuget.g.targets)</code> 是不对的，因为 <code class="language-plaintext highlighter-rouge">$(MSBuildProjectName)</code> 是延迟计算，在 Import 还没有计算出来值</p>

<p>当然我不会让大家从零开始打包，我开源 <a href="https://github.com/dotnet-campus/SourceYard">dotnet-campus/SourceYard</a> 可以将项目的源代码打包为 NuGet 包，使用非常方便，只需要在项目里面安装 SourceYard 库，然后重新打包就可以看到创建了 xx.Source.nupkg 包含源代码的库</p>

<p><a href="https://blog.walterlv.com/post/problems-of-msbuild-and-nuget.html">MSBuild/Roslyn 和 NuGet 的 100 个坑 - walterlv</a></p>

:ET