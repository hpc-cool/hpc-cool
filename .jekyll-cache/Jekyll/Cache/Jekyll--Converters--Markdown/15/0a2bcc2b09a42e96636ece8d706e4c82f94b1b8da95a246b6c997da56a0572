I"$3<p>本文告诉大家如何使用 msbuild 命令行编译一个 UWP 程序</p>

<!--more-->

<!-- CreateTime:2020/2/16 15:48:38 -->

<!-- 标签：UWP,VisualStudio,msbuild -->

<p>在有一些时候，如使用持续集成的时候就不能通过 VisualStudio 的方式编译 UWP 程序，需要使用命令行的方式编译。</p>

<p>尝试在本地从开始菜单打开开发命令提示符，或者从使用命令行调用本机的 VisualStudio 编译命令行</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cmd&gt; <span class="s2">"C:</span><span class="se">\P</span><span class="s2">rogram Files (x86)</span><span class="se">\M</span><span class="s2">icrosoft Visual Studio</span><span class="se">\2</span><span class="s2">017</span><span class="se">\E</span><span class="s2">nterprise</span><span class="se">\C</span><span class="s2">ommon7</span><span class="se">\T</span><span class="s2">ools</span><span class="se">\L</span><span class="s2">aunchDevCmd.bat"</span>
</code></pre></div></div>

<p>在 VisualStudio 在 C 盘安装就可以在 <code class="language-plaintext highlighter-rouge">C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\Common7\Tools\</code> 找到 LunchDevCmd.bat 文件</p>

<p>运行之后可以看到下面界面</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;</span> <span class="s2">"C:</span><span class="se">\P</span><span class="s2">rogram Files (x86)</span><span class="se">\M</span><span class="s2">icrosoft Visual Studio</span><span class="se">\2</span><span class="s2">017</span><span class="se">\E</span><span class="s2">nterprise</span><span class="se">\C</span><span class="s2">ommon7</span><span class="se">\T</span><span class="s2">ools</span><span class="se">\L</span><span class="s2">aunchDevCmd.bat"</span>
<span class="k">**********************************************************************</span>
<span class="k">**</span> Visual Studio 2017 Developer Command Prompt v15.8.5
<span class="k">**</span> Copyright <span class="o">(</span>c<span class="o">)</span> 2017 Microsoft Corporation
<span class="k">**********************************************************************</span>

C:<span class="se">\P</span>rogram Files <span class="o">(</span>x86<span class="o">)</span><span class="se">\M</span>icrosoft Visual Studio<span class="se">\2</span>017<span class="se">\E</span>nterprise&gt;
</code></pre></div></div>

<p>先进入项目所在的文件夹，也就是 sln 或 csproj 文件所在的文件夹，通过 msbuild 可以编译 sln 或编译 csproj 项目，推荐是编译 sln 的方式</p>

<p>在命令行跳转盘符，如从原来的C盘到 D 盘可以通过 <code class="language-plaintext highlighter-rouge">盘符:</code> 的方式</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">cmd</span><span class="p">&gt;</span> <span class="n">D</span><span class="p">:</span>
</code></pre></div></div>

<p>这样就可以跳转到 D 盘，在进入指定的文件夹，可以输入 <code class="language-plaintext highlighter-rouge">cd 文件夹</code> 的方式</p>

<p>如果自己输入很容易就输入错误，推荐输入 <code class="language-plaintext highlighter-rouge">cd </code> 然后在资源管理器打开文件夹，将地址栏的文件夹拖进命令行</p>

<p>在编译 UWP 之前，很重要的是清理原有的文件，假如文件都是通过 git 管理的，当前也不存在没有被跟踪的文件，可以使用下面的代码删除无关的文件，需要注意的是通过这个方式必须保证证书文件是被跟踪的</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cmd&gt; git clean <span class="nt">-xdf</span>
</code></pre></div></div>

<p>清理之后可以通过下面的代码还原 UWP 项目，还原这一步非常重要</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">cmd</span><span class="p">&gt;</span> <span class="n">msbuild</span> <span class="p">/</span><span class="n">t</span><span class="p">:</span><span class="n">restore</span>
</code></pre></div></div>

<p>但是默认欢迎的 ARM 的项目，很多时候需要的是 x86 的项目，可以通过下面的方式还原</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">cmd</span><span class="p">&gt;</span> <span class="n">msbuild</span> <span class="p">/</span><span class="n">t</span><span class="p">:</span><span class="n">restore</span> <span class="p">/</span><span class="n">p</span><span class="p">:</span><span class="n">Platform</span><span class="p">=</span><span class="n">x86</span>
</code></pre></div></div>

<p>如果要还原x64的程序，可以使用下面代码</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">cmd</span><span class="p">&gt;</span> <span class="n">msbuild</span> <span class="p">/</span><span class="n">t</span><span class="p">:</span><span class="n">restore</span> <span class="p">/</span><span class="n">p</span><span class="p">:</span><span class="n">Platform</span><span class="p">=</span><span class="n">x64</span>

</code></pre></div></div>

<p>现在就可以进行编译了，通过下面的代码进行编译</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">cmd</span><span class="p">&gt;</span> <span class="n">msbuild</span> <span class="p">/</span><span class="n">p</span><span class="p">:</span><span class="n">Platform</span><span class="p">=</span><span class="n">x86</span>
</code></pre></div></div>

<p>现在就可以编译 DEBUG 下的 x86 程序了</p>

<p>如果需要编译同时输出，可以尝试下面的代码。下面的 AppxPackageDir 是填写 AppxPackageDir 的文件夹路径，请将这个值修改为自己需要的。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/p:AppxBundlePlatforms<span class="o">=</span><span class="s2">"x86|x64|ARM"</span> /p:AppxPackageDir<span class="o">=</span><span class="s2">"D:</span><span class="se">\l</span><span class="s2">indexi</span><span class="se">\A</span><span class="s2">ppxPackages</span><span class="se">\\</span><span class="s2">"</span> /p:AppxBundle<span class="o">=</span>Always /p:UapAppxPackageBuildMode<span class="o">=</span>StoreUpload /p:platform<span class="o">=</span><span class="s2">"x86"</span> /p:configuration<span class="o">=</span><span class="s2">"release"</span> /p:VisualStudioVersion<span class="o">=</span><span class="s2">"15.0"</span> 
</code></pre></div></div>

<p>如果需要输出可以上传的包，需要先在本地链接到应用商店，然后执行下面代码</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>msbuild /t:restore /t:Publish /p:Configuration<span class="o">=</span>Release /p:AppxPackageDir<span class="o">=</span><span class="s2">"D:</span><span class="se">\l</span><span class="s2">indexi</span><span class="se">\A</span><span class="s2">ppxPackages</span><span class="se">\\</span><span class="s2">"</span> /p:AppxBundle<span class="o">=</span>Always /p:UapAppxPackageBuildMode<span class="o">=</span>StoreUpload /p:AppxBundlePlatforms<span class="o">=</span><span class="s2">"x86|x64|arm"</span>
</code></pre></div></div>

<p>如果是需要编译其他的解决方案，也就是当前的工作文件夹不在指定的项目文件夹，可以在 msbuild 后面添加解决方案的路径。注意这个路径需要使用 <code class="language-plaintext highlighter-rouge">csproj</code> 文件</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>msbuild <span class="s2">"D:</span><span class="se">\l</span><span class="s2">indexi</span><span class="se">\U</span><span class="s2">WP</span><span class="se">\F</span><span class="s2">oo.csproj"</span> /t:restore /t:Publish /p:Configuration<span class="o">=</span>Release /p:AppxPackageDir<span class="o">=</span><span class="s2">"D:</span><span class="se">\l</span><span class="s2">indexi</span><span class="se">\A</span><span class="s2">ppxPackages</span><span class="se">\\</span><span class="s2">"</span> /p:AppxBundle<span class="o">=</span>Always /p:UapAppxPackageBuildMode<span class="o">=</span>StoreUpload /p:AppxBundlePlatforms<span class="o">=</span><span class="s2">"x86|x64|arm"</span>
</code></pre></div></div>

<p>如果是在服务器端编译，推荐先清理一下，然后再重新编译</p>

<p>清理的命令，请注意，如果需要带路径，对于清理命令需要加上 sln 文件</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>msbuild  /t:clean

// 带路径
msbuild <span class="s2">"E:</span><span class="se">\l</span><span class="s2">indexi</span><span class="se">\U</span><span class="s2">WP</span><span class="se">\F</span><span class="s2">oo.sln"</span> /t:clean
</code></pre></div></div>

<p>还原 Nuget 包</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>msbuild /t:restore 

// 带路径
msbuild <span class="s2">"E:</span><span class="se">\l</span><span class="s2">indexi</span><span class="se">\U</span><span class="s2">WP</span><span class="se">\F</span><span class="s2">oo.sln"</span> /t:restore
</code></pre></div></div>

<p>重新编译</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>msbuild <span class="s2">"D:</span><span class="se">\l</span><span class="s2">indexi</span><span class="se">\U</span><span class="s2">WP</span><span class="se">\F</span><span class="s2">oo.csproj"</span> /t:rebuild /t:Publish /p:Configuration<span class="o">=</span>Release /p:AppxPackageDir<span class="o">=</span><span class="s2">"D:</span><span class="se">\l</span><span class="s2">indexi</span><span class="se">\A</span><span class="s2">ppxPackages</span><span class="se">\\</span><span class="s2">"</span> /p:AppxBundle<span class="o">=</span>Always /p:UapAppxPackageBuildMode<span class="o">=</span>StoreUpload /p:AppxBundlePlatforms<span class="o">=</span><span class="s2">"x86|x64|arm"</span>
</code></pre></div></div>

<p>如果是桌面转换制作的，此时命令行要求 AppxBundlePlatforms 的值是 neutral 而 Platform 要求 AnyCPU 才可以编译</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>msbuild /t:rebuild /t:Publish /p:Configuration<span class="o">=</span>Release /p:AppxPackageDir<span class="o">=</span><span class="s2">"D:</span><span class="se">\l</span><span class="s2">indexi</span><span class="se">\A</span><span class="s2">ppxPackages</span><span class="se">\\</span><span class="s2">"</span> /p:AppxBundle<span class="o">=</span>Always /p:UapAppxPackageBuildMode<span class="o">=</span>StoreUpload /p:AppxBundlePlatforms<span class="o">=</span><span class="s2">"neutral"</span> /p:Platform<span class="o">=</span><span class="s2">"AnyCPU"</span>
</code></pre></div></div>

<p>例如在集成工具使用，实际大多数的集成工具默认都有配置 UWP 的编译，具体请看 <a href="https://blog.csdn.net/lindexi_gd/article/details/84252226">win10 uwp 使用 Azure DevOps 自动构建 - lindexi - CSDN博客</a> <a href="https://blog.csdn.net/lindexi_gd/article/details/84252406">win10 uwp 使用 AppCenter 自动构建 - lindexi - CSDN博客</a></p>

<p>在集成工具需要自己写编译的流程的时候，推荐下面的步骤</p>

<ol>
  <li><code class="language-plaintext highlighter-rouge">git clean -xdf</code> 保证清理</li>
  <li><code class="language-plaintext highlighter-rouge">msbuild /t:clean</code> 如果有了 git 的清理，实际也就不需要使用 <code class="language-plaintext highlighter-rouge">msbuild</code> 的清理，只是防止有逗比上传了 obj 文件夹</li>
  <li><code class="language-plaintext highlighter-rouge">msbuild /t:restore</code> 欢迎 nuget 包，注意添加自己的 nuget 网站，如果自己用了内部的 nuget 就需要自己添加</li>
  <li><code class="language-plaintext highlighter-rouge">msbuild /t:rebuild /t:Publish /p:Configuration=Release /p:AppxPackageDir="D:\lindexi\AppxPackages\\" /p:AppxBundle=Always /p:UapAppxPackageBuildMode=StoreUpload /p:AppxBundlePlatforms="x86|x64|arm"</code> 创建可以上传的文件，注意需要先链接应用商店，然后再将代码上传到 git 才可以创建出可以发到应用商店的文件。这时使用本地的测试证书也可以</li>
  <li><code class="language-plaintext highlighter-rouge">git clean</code> 再次清理文件，如果自己的 AppxPackageDir 文件夹在工程所在的文件夹，这时就不要使用 git clean 了</li>
</ol>

:ET