I"^$<p>As you know, the WriteLinesToFile will separate the item by semicolons. How can we use WriteLinesToFile to write the semicolons to file?</p>

<!--more-->

<!-- CreateTime:2019/11/6 19:13:42 -->

<!-- csdn -->

<!-- 标签：Roslyn,MSBuild,编译器 -->

<p>For example, we need to write the code below to file.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"I am lindexi"</span><span class="p">);</span>
</code></pre></div></div>

<p>As you can see, we can find some problems in the code.</p>

<p>The first thing is the code include quotation mark that we can not write the code directly.</p>

<!-- ![](image/Roslyn how to use WriteLinesToFile to write the semicolons to file/Roslyn how to use WriteLinesToFile to write the semicolons to file0.png) -->

<p><img src="http://image.acmx.xyz/lindexi%2F2018111161758689" alt="" /></p>

<p>We can use property item with “CDATA” that CDATA is defined as blocks of text that are not parsed by the parser.</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nt">&lt;PropertyGroup&gt;</span>
      <span class="nt">&lt;SomeThing&gt;</span>
       <span class="cp">&lt;![CDATA[
                Console.WriteLine("I am lindexi");
       ]]&gt;</span>
      <span class="nt">&lt;/SomeThing&gt;</span>
    <span class="nt">&lt;/PropertyGroup&gt;</span>
    <span class="nt">&lt;WriteLinesToFile</span> <span class="na">File=</span><span class="s">"lindexi.cs"</span> <span class="na">Lines=</span><span class="s">"$(SomeThing)"</span><span class="nt">&gt;&lt;/WriteLinesToFile&gt;</span>
</code></pre></div></div>

<p>You can find that your content in the file misses the semicolons character.</p>

<p>We can use <code class="language-plaintext highlighter-rouge">%3b</code> to replace the semicolons.</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nt">&lt;PropertyGroup&gt;</span>
      <span class="nt">&lt;SomeThing&gt;</span>
       <span class="cp">&lt;![CDATA[
                Console.WriteLine("I am lindexi")%3b
       ]]&gt;</span>
      <span class="nt">&lt;/SomeThing&gt;</span>
    <span class="nt">&lt;/PropertyGroup&gt;</span>
    <span class="nt">&lt;WriteLinesToFile</span> <span class="na">File=</span><span class="s">"lindexi.cs"</span> <span class="na">Lines=</span><span class="s">"$(SomeThing)"</span><span class="nt">&gt;&lt;/WriteLinesToFile&gt;</span>
</code></pre></div></div>

<p>After you run the target, you can find a file named lindexi.cs added in your project.</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nt">&lt;Project</span> <span class="na">Sdk=</span><span class="s">"Microsoft.NET.Sdk"</span><span class="nt">&gt;</span>

  <span class="nt">&lt;PropertyGroup&gt;</span>
    <span class="nt">&lt;OutputType&gt;</span>Exe<span class="nt">&lt;/OutputType&gt;</span>
    <span class="nt">&lt;TargetFramework&gt;</span>netcoreapp2.1<span class="nt">&lt;/TargetFramework&gt;</span>
  <span class="nt">&lt;/PropertyGroup&gt;</span>

  <span class="nt">&lt;Target</span> <span class="na">Name=</span><span class="s">"T2"</span> <span class="na">BeforeTargets=</span><span class="s">"BeforeBuild"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;PropertyGroup&gt;</span>
      <span class="nt">&lt;SomeThing&gt;</span>
       <span class="cp">&lt;![CDATA[
                Console.WriteLine("I am lindexi")%3b
       ]]&gt;</span>
      <span class="nt">&lt;/SomeThing&gt;</span>
    <span class="nt">&lt;/PropertyGroup&gt;</span>
    <span class="nt">&lt;WriteLinesToFile</span> <span class="na">File=</span><span class="s">"lindexi.cs"</span> <span class="na">Lines=</span><span class="s">"$(SomeThing)"</span><span class="nt">&gt;&lt;/WriteLinesToFile&gt;</span>
  <span class="nt">&lt;/Target&gt;</span>

 <span class="nt">&lt;/Project&gt;</span>
</code></pre></div></div>

<!-- ![](image/Roslyn how to use WriteLinesToFile to write the semicolons to file/Roslyn how to use WriteLinesToFile to write the semicolons to file1.png) -->

<p><img src="http://image.acmx.xyz/lindexi%2F2018111162627461" alt="" /></p>

<p>Please open the file and then you can find the content in the file include the semicolons character.</p>

<p>We can set the property in the WriteLinesToFile task to Overwrite the file.</p>

<p>You can copy the code below to your project file and then run your project. You will see the console output something interesting.</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nt">&lt;Target</span> <span class="na">Name=</span><span class="s">"T1"</span> <span class="na">BeforeTargets=</span><span class="s">"BeforeBuild"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;PropertyGroup&gt;</span>
      <span class="nt">&lt;SomeThing&gt;</span>
        <span class="cp">&lt;![CDATA[
using System%3b

namespace CeseacooteeGowgu
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("I am lindexi")%3b
        }
    }
}
       ]]&gt;</span>
      <span class="nt">&lt;/SomeThing&gt;</span>
    <span class="nt">&lt;/PropertyGroup&gt;</span>
    <span class="nt">&lt;WriteLinesToFile</span> <span class="na">File=</span><span class="s">"lindexi.cs"</span> <span class="na">Lines=</span><span class="s">"$(SomeThing)"</span> <span class="na">Overwrite=</span><span class="s">"true"</span><span class="nt">&gt;&lt;/WriteLinesToFile&gt;</span>
    <span class="nt">&lt;ItemGroup&gt;</span>
      <span class="nt">&lt;Compile</span> <span class="na">Remove=</span><span class="s">"@(Compile)"</span><span class="nt">&gt;&lt;/Compile&gt;</span>
      <span class="nt">&lt;Compile</span> <span class="na">Include=</span><span class="s">"lindexi.cs"</span><span class="nt">&gt;&lt;/Compile&gt;</span>
    <span class="nt">&lt;/ItemGroup&gt;</span>
  <span class="nt">&lt;/Target&gt;</span>
</code></pre></div></div>

<p>I remove all your code and replace the code to the content in SomeThing property. And then I add the code that named lindexi.cs to compile.</p>

<h2 id="using-msbuild-escape">Using MSBuild Escape</h2>

<p>We can find this way should change the code. We can not copy the code in other to write to file and we should replace all the semicolons to <code class="language-plaintext highlighter-rouge">%3b</code> that is hard to change all the code.</p>

<p>We can use MSBuild Escape to escape the semicolons and you can see the code.</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nt">&lt;Target</span> <span class="na">Name=</span><span class="s">"T1"</span> <span class="na">BeforeTargets=</span><span class="s">"BeforeBuild"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;PropertyGroup&gt;</span>
      <span class="nt">&lt;SomeThing&gt;</span>
        <span class="cp">&lt;![CDATA[
using System;

namespace CeseacooteeGowgu
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("I am lindexi");
        }
    }
}
       ]]&gt;</span>
      <span class="nt">&lt;/SomeThing&gt;</span>
    <span class="nt">&lt;/PropertyGroup&gt;</span>
    <span class="nt">&lt;WriteLinesToFile</span> <span class="na">File=</span><span class="s">"lindexi.cs"</span> <span class="na">Lines=</span><span class="s">"$([MSBuild]::Escape($(SomeThing)))"</span> <span class="na">Overwrite=</span><span class="s">"true"</span><span class="nt">&gt;&lt;/WriteLinesToFile&gt;</span>
    <span class="nt">&lt;ItemGroup&gt;</span>
      <span class="nt">&lt;Compile</span> <span class="na">Remove=</span><span class="s">"@(Compile)"</span><span class="nt">&gt;&lt;/Compile&gt;</span>
      <span class="nt">&lt;Compile</span> <span class="na">Include=</span><span class="s">"lindexi.cs"</span><span class="nt">&gt;&lt;/Compile&gt;</span>
    <span class="nt">&lt;/ItemGroup&gt;</span>
  <span class="nt">&lt;/Target&gt;</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">[MSBuild]::Escape</code> can use <a href="https://docs.microsoft.com/en-us/visualstudio/msbuild/property-functions?wt.mc_id=MVP">property function</a> to escape strings.</p>

<p><a href="https://docs.microsoft.com/en-us/visualstudio/msbuild/how-to-escape-special-characters-in-msbuild?wt.mc_id=MVP">How to: Escape Special Characters in MSBuild - Visual Studio</a></p>

<p>In the CDATA section that follows,</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">%40</code> = <code class="language-plaintext highlighter-rouge">@</code></li>
  <li><code class="language-plaintext highlighter-rouge">%25</code> = <code class="language-plaintext highlighter-rouge">% </code></li>
  <li><code class="language-plaintext highlighter-rouge">%3B</code> = <code class="language-plaintext highlighter-rouge">;</code></li>
  <li><code class="language-plaintext highlighter-rouge">%24</code> = <code class="language-plaintext highlighter-rouge">$</code></li>
</ul>
:ET