I"ک<p>本文来告诉大家如何在上一篇博客创建的窗口里面使用 Sharpdx 初始化，然后设置窗口颜色。</p>

<!--more-->

<!-- CreateTime:2020/1/2 19:20:07 -->

<!-- 标签：C#,D2D,DirectX,SharpDX,Direct2D, -->
<div id="toc"></div>

<p>本文是 SharpDX 系列博客，更多博客请点击<a href="https://blog.lindexi.com/post/sharpdx.html">SharpDX 系列</a></p>

<p>在<a href="https://blog.lindexi.com/post/C-%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%86%99-SharpDx-%E5%BA%94%E7%94%A8-%E6%8E%A7%E5%88%B6%E5%8F%B0%E5%88%9B%E5%BB%BA-Sharpdx-%E7%AA%97%E5%8F%A3.html">C# 控制台创建 Sharpdx 窗口</a>已经创建了一个窗口，现在需要在这个窗口初始化。因为是从零开始写，所以需要非常多细节，我觉得一篇文章是很难全部告诉大家，所以分为了系列的文章。从零开始写有利于大家了解一个渲染框架是如何做出来，并且从底层优化渲染，当然这个方法就是学习的时间会比较长。我会在文章去掉很多细节放在后面的博客讲，让大家先知道总体是如何做的。</p>

<h2 id="创建资源">创建资源</h2>

<p>第一步是需要添加一个方法 <code class="language-plaintext highlighter-rouge">InitializeDeviceResources</code> 用来初始化资源，这里初始化的就是设备的资源。在 dx 的渲染是需要紧密绑定设备。</p>

<p>这个方法就是写在<code class="language-plaintext highlighter-rouge">KikuSimairme</code>类里，关于这个类的代码在<a href="https://blog.lindexi.com/post/C-%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%86%99-SharpDx-%E5%BA%94%E7%94%A8-%E6%8E%A7%E5%88%B6%E5%8F%B0%E5%88%9B%E5%BB%BA-Sharpdx-%E7%AA%97%E5%8F%A3.html">C# 控制台创建 Sharpdx 窗口</a></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
        <span class="c1">// 其他被忽略的代码</span>
        <span class="k">private</span> <span class="k">void</span> <span class="nf">InitializeDeviceResources</span><span class="p">()</span>
        <span class="p">{</span>
        <span class="p">}</span>
</code></pre></div></div>

<p>创建一个可以画出来的类需要先创建显示模式描述，通过显示描述创建交换链描述，交换链描述创建设备和交换链，通过交换链和设备可以创建可以画出来的类，在这个类就可以画出无聊的图形，按照创建的顺序，我将文章分为多个部分，下面先来窗口模式描述</p>

<h3 id="模式描述">模式描述</h3>

<p>首先需要创建一个描述显示模式，模式描述使用的是 <code class="language-plaintext highlighter-rouge">ModeDescription</code> 类，可以使用 new 的方式创建。在 dx 里很多的类都只能通过工厂创建，可以通过 new 创建的类一般都是描述的类。为什么需要描述的类？因为如果直接创建一个类需要传入大量的参数，那么这个写法将会很难，而且存在很多属性，只可以在构造的时候进行设置，不能在构造之后设置。为了方便开发，所以就将多个参数分为不同的类，这些类就是描述类。下面创建的是模式显示描述</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">SharpDX.Direct3D</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">SharpDX.DXGI</span><span class="p">;</span>

<span class="c1">// 其他忽略的代码</span>
    <span class="k">class</span> <span class="nc">KikuSimairme</span> <span class="p">:</span> <span class="n">IDisposable</span>
<span class="c1">// 其他忽略的代码</span>
        <span class="k">private</span> <span class="k">void</span> <span class="nf">InitializeDeviceResources</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="n">ModeDescription</span> <span class="n">backBufferDesc</span> <span class="p">=</span>
                <span class="k">new</span> <span class="nf">ModeDescription</span><span class="p">(</span><span class="n">Width</span><span class="p">,</span> <span class="n">Height</span><span class="p">,</span> <span class="k">new</span> <span class="nf">Rational</span><span class="p">(</span><span class="m">60</span><span class="p">,</span> <span class="m">1</span><span class="p">),</span> <span class="n">Format</span><span class="p">.</span><span class="n">R8G8B8A8_UNorm</span><span class="p">);</span>

        <span class="p">}</span>
</code></pre></div></div>

<p>通过 ModeDescription 就可以描述创建的模式是什么，前两个参数是表示缓存的大小，在很多的情况，这个值都和显示的大小相同。</p>

<p>第三个参数就是表示刷新率，这里使用的就是 <code class="language-plaintext highlighter-rouge">1/60</code> 也就是 60hz</p>

<p>最后一个参数设置的是像素格式，这里使用 8 位的 RGBA 格式，使用一个无符号的 32 位整数表示，在设置格式是很重要，请仔细看自己的设置，因为我就告诉了一位小伙伴看着他将模式的格式写错了。如果有安装 Resharper 就可以按下 RGBA 快速找到这个属性</p>

<p>更多关于 ModeDescription 请看 <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/bb173064(v=vs.85).aspx">DXGI_MODE_DESC</a></p>

<p>这里的 backBufferDesc 是在描述后台缓冲区，后台缓冲区的作用是防止动画中出现闪烁，可以这样看，在用户看到一个白纸的时候，一边有个人在这个白纸上画东西，这时用户就会看到画东西的闪烁。如果有两张纸，给用户看一张纸，在另一张纸上画，画完就把这张纸给用户，把刚才的纸拿来画下一个动画。通过这个方式就可以减少用户看到闪烁。这个不给用户看到的纸就是后台缓冲区（back buffer）。</p>

<h3 id="交换链描述">交换链描述</h3>

<p>下面可以来创建交换链的描述，交换链就是用来交换后台缓冲和显示的类，创建这个类需要先创建描述类，创建的方法是使用 new 的方式创建<code class="language-plaintext highlighter-rouge">SwapChainDescription</code>类，同样是为了减少创建交换链的输入参数，所以将很多参数放在这个类，创建描述类的时候就需要将上面创建的模式描述类传进来，请使用这个代码</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="c1">// 其他忽略的代码</span>
    <span class="k">class</span> <span class="nc">KikuSimairme</span> <span class="p">:</span> <span class="n">IDisposable</span>
<span class="c1">// 其他忽略的代码</span>

        <span class="k">private</span> <span class="k">void</span> <span class="nf">InitializeDeviceResources</span><span class="p">()</span>
<span class="c1">// 其他忽略的代码</span>
            <span class="n">SwapChainDescription</span> <span class="n">swapChainDesc</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">SwapChainDescription</span><span class="p">()</span>
            <span class="p">{</span>
                <span class="n">ModeDescription</span> <span class="p">=</span> <span class="n">backBufferDesc</span><span class="p">,</span>
                <span class="n">SampleDescription</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">SampleDescription</span><span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="m">0</span><span class="p">),</span>
                <span class="n">Usage</span> <span class="p">=</span> <span class="n">Usage</span><span class="p">.</span><span class="n">RenderTargetOutput</span><span class="p">,</span>
                <span class="n">BufferCount</span> <span class="p">=</span> <span class="m">1</span><span class="p">,</span>
                <span class="n">OutputHandle</span> <span class="p">=</span> <span class="n">_renderForm</span><span class="p">.</span><span class="n">Handle</span><span class="p">,</span>
                <span class="n">IsWindowed</span> <span class="p">=</span> <span class="k">true</span>
            <span class="p">};</span>
</code></pre></div></div>

<p>先来解释一下参数。</p>

<p>交换链的 ModeDescription 就是上面定义的 backBufferDesc</p>

<p>多重采用 SampleDescription 用来优化图片，是一种用于采样和平衡渲染像素的创建亮丽色彩变化之间的平滑过渡的一种技术，这里设置等级 1 也就是1重采样，需要传入两个参数一个是Count 指定每个像素的采样数量，一个是Quality指定希望得到的质量级别，参见<a href="https://msdn.microsoft.com/en-us/library/windows/desktop/bb173072(v=vs.85).aspx">DXGI_SAMPLE_DESC structure</a>，在这里质量级别越高，占用的系统资源就越多。</p>

<p>Usage 设置 CPU 访问缓冲的权限，这里设置可以访问 RenderTarget 输出，请看 <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/bb173078(v=vs.85).aspx">DXGI_USAGE</a></p>

<p>后缓冲数量 BufferCount 建议设置一个，设置一个就是双缓冲。两个缓冲区已经足够用了。</p>

<p>OutputHandle 获取渲染窗口句柄</p>

<p>IsWindowed 这个值设置是否希望是全屏，如果是 true 就是窗口。现在软件还没写好，如果这时全屏可能就无法退出，建议先设置这个值为 true 不然难以直接退出。但是我还是设置了全屏，原因是本金鱼有两个屏幕，所以可以让软件退出</p>

<p>现在已经创建交换链，但是我里面很多设置没有告诉大家还有哪些可以设置</p>

<p>这里有很多都需要在微软官方才可以看到，因为本文是简单的博客，不会在本文介绍。</p>

<p>为什么需要设置交换链？为了显示平滑的界面，需要至少两个缓冲区，一个用户前台显示，一个后缓冲区用于下一帧的绘制，在绘制完一帧后通过交换前、后缓冲区对应的指针来显示新一帧，交换就需要用到交换链来做。</p>

<h3 id="私有变量">私有变量</h3>

<p>刚才是在 <code class="language-plaintext highlighter-rouge">InitializeDeviceResources</code> 方法里创建描述，但是创建了描述之后是需要创建出一些具体的类，这些类不能只放在 <code class="language-plaintext highlighter-rouge">InitializeDeviceResources</code> 方法，需要将这些类放在私有变量，这样在这个类的其他地方才可以拿到，请看代码</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">D3D11</span> <span class="p">=</span> <span class="n">SharpDX</span><span class="p">.</span><span class="n">Direct3D11</span><span class="p">;</span>

<span class="c1">// 其他忽略的代码</span>

    <span class="k">class</span> <span class="nc">KikuSimairme</span> <span class="p">:</span> <span class="n">IDisposable</span>
<span class="c1">// 其他忽略的代码</span>

        <span class="k">private</span> <span class="n">D3D11</span><span class="p">.</span><span class="n">DeviceContext</span> <span class="n">_d3DDeviceContext</span><span class="p">;</span>
        <span class="k">private</span> <span class="n">SwapChain</span> <span class="n">_swapChain</span><span class="p">;</span>
        <span class="k">private</span> <span class="n">D3D11</span><span class="p">.</span><span class="n">RenderTargetView</span> <span class="n">_renderTargetView</span><span class="p">;</span>
</code></pre></div></div>

<p>这里使用了 using 定义了 D3D11 ，这样可以区分一些类，如果有看到我之前的博客，会看到我在很多博客里都使用这个方式</p>

<p>渲染上下文 d3DDeviceContext 是一种描述设备如何绘制的渲染设备上下文。</p>

<p>创建的 RenderTargetView 是 渲染目标视图，在CPU把如何渲染写入到渲染目标视图中，它是一个2D纹理，写入 RenderTargetView 不会立刻渲染到屏幕，而是到管线的输出混合阶段，最后才到屏幕。</p>

<h3 id="创建交换链">创建交换链</h3>

<p>准备的代码已经写好，可以创建设备，创建了设备才可以画出</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">SharpDX.Direct3D</span><span class="p">;</span>

<span class="c1">// 其他忽略的代码</span>
    <span class="k">class</span> <span class="nc">KikuSimairme</span> <span class="p">:</span> <span class="n">IDisposable</span>
<span class="c1">// 其他忽略的代码</span>

        <span class="k">private</span> <span class="k">void</span> <span class="nf">InitializeDeviceResources</span><span class="p">()</span>
<span class="c1">// 其他忽略的代码</span>

            <span class="n">D3D11</span><span class="p">.</span><span class="n">Device</span><span class="p">.</span><span class="nf">CreateWithSwapChain</span><span class="p">(</span><span class="n">DriverType</span><span class="p">.</span><span class="n">Hardware</span><span class="p">,</span> <span class="n">D3D11</span><span class="p">.</span><span class="n">DeviceCreationFlags</span><span class="p">.</span><span class="n">None</span><span class="p">,</span> <span class="n">swapChainDesc</span><span class="p">,</span>
                <span class="k">out</span> <span class="n">_d3DDevice</span><span class="p">,</span> <span class="k">out</span> <span class="n">_swapChain</span><span class="p">);</span>
            <span class="n">_d3DDeviceContext</span> <span class="p">=</span> <span class="n">_d3DDevice</span><span class="p">.</span><span class="n">ImmediateContext</span><span class="p">;</span>
</code></pre></div></div>

<p>第一个参数 DriverType.Hardware 表示希望使用 GPU 渲染，设置 驱动设备类型 可以设置硬件设备（hardware device）、参考设备（reference device）、软件驱动设备（software driver device）</p>

<ul>
  <li>
    <p>硬件设备（hardware device）是一个运行在显卡上的D3D设备，在所有设备中运行速度是最快的</p>
  </li>
  <li>
    <p>软件驱动设备（software driverdevice）是开发人员自己编写的用于Direct3D的渲染驱动软件</p>
  </li>
  <li>
    <p>参考设备（reference device）是用于没有可用的硬件支持时在CPU上进行渲染的设备</p>
  </li>
  <li>
    <p>WARP设备（WARPdevice）是一种高效的CPU渲染设备，可以模拟现阶段所有的Direct3D特性</p>
  </li>
</ul>

<p>具体请看<a href="https://blog.csdn.net/pizi0475/article/details/7786348">Direct3D 11入门级知识介绍</a></p>

<p>第二个参数选不使用特殊的方法，参见 <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ff476107(v=vs.85).aspx">D3D11_CREATE_DEVICE_FLAG enumeration</a></p>

<p>第三个参数是输入上面的交换链描述</p>

<p>最后的参数是输出设备和交换链，关于输出设备请看<a href="https://blog.csdn.net/nightelve/article/details/6460477">Direct3D设备</a>。</p>

<p>交换链在Direct3D中为一个设备渲染目标的集合。每一个设备都有至少一个交换链，而多个交换链能够被多个设备所创建。</p>

<p>有了交换链和设备可以在缓冲区画出图形，画图形需要使用<code class="language-plaintext highlighter-rouge">RenderTargetView</code> 渲染目标视图，为了在其他函数可以使用，这里需要把这个类写在私有变量</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="k">private</span> <span class="n">D3D11</span><span class="p">.</span><span class="n">RenderTargetView</span> <span class="n">_renderTargetView</span><span class="p">;</span>

</code></pre></div></div>

<p>然后在 InitializeDeviceResources 使用下面代码，创建缓冲和使用缓冲和设置创建渲染目标视图。因为渲染目标视图可以认为是一张纸，这就是纹理，纹理是比较复杂的，将纹理理解为一副图像就行了。</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 其他忽略的代码</span>
    <span class="k">class</span> <span class="nc">KikuSimairme</span> <span class="p">:</span> <span class="n">IDisposable</span>
<span class="c1">// 其他忽略的代码</span>

        <span class="k">private</span> <span class="k">void</span> <span class="nf">InitializeDeviceResources</span><span class="p">()</span>
<span class="c1">// 其他忽略的代码</span>

            <span class="k">using</span> <span class="p">(</span><span class="n">D3D11</span><span class="p">.</span><span class="n">Texture2D</span> <span class="n">backBuffer</span> <span class="p">=</span> <span class="n">_swapChain</span><span class="p">.</span><span class="n">GetBackBuffer</span><span class="p">&lt;</span><span class="n">D3D11</span><span class="p">.</span><span class="n">Texture2D</span><span class="p">&gt;(</span><span class="m">0</span><span class="p">))</span>
            <span class="p">{</span>
                <span class="n">_renderTargetView</span> <span class="p">=</span> <span class="k">new</span> <span class="n">D3D11</span><span class="p">.</span><span class="nf">RenderTargetView</span><span class="p">(</span><span class="n">_d3DDevice</span><span class="p">,</span> <span class="n">backBuffer</span><span class="p">);</span>
            <span class="p">}</span>
</code></pre></div></div>

<p>总的创建过程很多，所以我使用了思维导图让大家知道每个步骤需要创建的</p>

<!-- ![](image/C# 从零开始写 SharpDx 应用 初始化dx修改颜色/C# 从零开始写 SharpDx 应用 初始化dx修改颜色0.png) -->

<p><img src="http://image.acmx.xyz/lindexi%2F201872164929884.jpg" alt="" /></p>

<h2 id="修改颜色">修改颜色</h2>

<p>如果已经看过了之前的博客，那么知道已经有可以画的类，就可以开始画出。</p>

<p>本文没有告诉大家如何画出线和画出圆形，只是告诉大家初始资源，所以到这里本文就结束了。</p>

<p>但是大家可以看到这时的界面和之前一样，会说我的程序是不是写错了。所以我就简单修改一下界面，创建一个函数 Draw 在这个函数写代码</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 其他忽略的代码</span>
    <span class="k">class</span> <span class="nc">KikuSimairme</span> <span class="p">:</span> <span class="n">IDisposable</span>
<span class="c1">// 其他忽略的代码</span>

        <span class="k">private</span> <span class="k">void</span> <span class="nf">Draw</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="n">_d3DDeviceContext</span><span class="p">.</span><span class="n">OutputMerger</span><span class="p">.</span><span class="nf">SetRenderTargets</span><span class="p">(</span><span class="n">_renderTargetView</span><span class="p">);</span>
            <span class="n">_d3DDeviceContext</span><span class="p">.</span><span class="nf">ClearRenderTargetView</span><span class="p">(</span><span class="n">_renderTargetView</span><span class="p">,</span> <span class="nf">ColorToRaw4</span><span class="p">(</span><span class="n">Color</span><span class="p">.</span><span class="n">Coral</span><span class="p">));</span>

            <span class="n">_swapChain</span><span class="p">.</span><span class="nf">Present</span><span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="n">PresentFlags</span><span class="p">.</span><span class="n">None</span><span class="p">);</span>

            <span class="n">RawColor4</span> <span class="nf">ColorToRaw4</span><span class="p">(</span><span class="n">Color</span> <span class="n">color</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">const</span> <span class="kt">float</span> <span class="n">n</span> <span class="p">=</span> <span class="m">255f</span><span class="p">;</span>
                <span class="k">return</span> <span class="k">new</span> <span class="nf">RawColor4</span><span class="p">(</span><span class="n">color</span><span class="p">.</span><span class="n">R</span> <span class="p">/</span> <span class="n">n</span><span class="p">,</span> <span class="n">color</span><span class="p">.</span><span class="n">G</span> <span class="p">/</span> <span class="n">n</span><span class="p">,</span> <span class="n">color</span><span class="p">.</span><span class="n">B</span> <span class="p">/</span> <span class="n">n</span><span class="p">,</span> <span class="n">color</span><span class="p">.</span><span class="n">A</span> <span class="p">/</span> <span class="n">n</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>
</code></pre></div></div>

<p>这里为了画出颜色，使用 ColorToRaw4 的类，因为 RawColor4 是传入颜色是 [0,1]，但是很多代码使用的是[0,255]，为了让颜色比较容易写，我就写了这个类。</p>

<p>在<code class="language-plaintext highlighter-rouge">_d3DDeviceContext.OutputMerger.SetRenderTargets(_renderTargetView);</code> 设置了刚才创建的<code class="language-plaintext highlighter-rouge">_renderTargetView</code>激活，在每次我们想渲染一个特定的渲染目标的时候，必须在所有的绘制的函数调用之前对它进行设置。</p>

<p>关于 OutputMerger 需要偷一张图来说明管道，通过 SetRenderTargets 也就是相当于调用了 <code class="language-plaintext highlighter-rouge">immediate_context_-&gt;OMSetRenderTargets</code> 绑定渲染目标，这样就将渲染目标绑定到渲染管线</p>

<!-- ![](image/C# 从零开始写 SharpDx 应用 初始化dx修改颜色/C# 从零开始写 SharpDx 应用 初始化dx修改颜色1.png) -->

<p><img src="http://image.acmx.xyz/lindexi%2F20181020172328699" alt="" /></p>

<p>更多关于渲染管线请看 <a href="https://blog.csdn.net/u010333737/article/details/78556583?utm_source=blogxgwz1">渲染管线 - 冠位仓鼠 - CSDN博客</a></p>

<p>第二句代码<code class="language-plaintext highlighter-rouge"> _d3DDeviceContext.ClearRenderTargetView(_renderTargetView, ColorToRaw4(Color.Coral));</code>清理<code class="language-plaintext highlighter-rouge">_renderTargetView</code>设置颜色，把他放在第一个缓冲。在 dx 有两个缓冲，一个是看不见的，一个是显示的。第一个缓冲就是显示的，第二个就是在第一个显示的时候画出来，于是不停交换，让用户看到一个画好的缓冲。通过这个方法用户可以看到动画</p>

<p>调用交换链的Present函数在屏幕上显示渲染缓冲区的内容 <code class="language-plaintext highlighter-rouge">_swapChain.Present(1, PresentFlags.None);</code> 是等待垂直同步，在刷新完成在完成这个方法，第一个参数是同步间隔，第二个参数是演示的标志。</p>

<p>创建资源和颜色设置代码已经写好，现在需要调用方法</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 其他忽略的代码</span>
    <span class="k">class</span> <span class="nc">KikuSimairme</span> <span class="p">:</span> <span class="n">IDisposable</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nf">KikuSimairme</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="n">_renderForm</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">RenderForm</span><span class="p">();</span>
            <span class="n">_renderForm</span><span class="p">.</span><span class="n">ClientSize</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Size</span><span class="p">(</span><span class="n">Width</span><span class="p">,</span> <span class="n">Height</span><span class="p">);</span>

            <span class="nf">InitializeDeviceResources</span><span class="p">();</span>
        <span class="p">}</span>
<span class="c1">// 其他忽略的代码</span>
    <span class="p">}</span>
</code></pre></div></div>

<p>如果有看过之前的博客，会发现有一个方法是空的，现在可以在<code class="language-plaintext highlighter-rouge">RenderCallback</code>添加代码</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 其他忽略的代码</span>
    <span class="k">class</span> <span class="nc">KikuSimairme</span> <span class="p">:</span> <span class="n">IDisposable</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">void</span> <span class="nf">RenderCallback</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="nf">Draw</span><span class="p">();</span>
        <span class="p">}</span>
<span class="c1">// 其他忽略的代码</span>
    <span class="p">}</span>
</code></pre></div></div>

<p>在完成了上面的代码之后，还需要做清理，在 dx 使用的资源都需要手动释放。需要注意释放的顺序，本文在这里不告诉大家释放的顺序是如何确定，所以希望先复制下面代码进行释放。</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">void</span> <span class="nf">Dispose</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">renderTargetView</span><span class="p">.</span><span class="nf">Dispose</span><span class="p">();</span>
    <span class="n">swapChain</span><span class="p">.</span><span class="nf">Dispose</span><span class="p">();</span>
    <span class="n">d3dDevice</span><span class="p">.</span><span class="nf">Dispose</span><span class="p">();</span>
    <span class="n">d3dDeviceContext</span><span class="p">.</span><span class="nf">Dispose</span><span class="p">();</span>
    <span class="n">renderForm</span><span class="p">.</span><span class="nf">Dispose</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>

<p>现在按一下 F5 就可以运行，看到一个绿色的窗口。本文也就告诉了大家如何初始化窗口，在初始化窗口之后离在窗口画东西还需要一步，那就是创建 ViewPort 视口，详细请点击<a href="https://blog.lindexi.com/post/C-%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%86%99-SharpDx-%E5%BA%94%E7%94%A8-%E7%94%BB%E4%B8%89%E8%A7%92.html">C# 从零开始写 SharpDx 应用 画三角</a></p>

<p>所有代码</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Drawing</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">SharpDX.Direct3D</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">SharpDX.DXGI</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">SharpDX.Mathematics.Interop</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">SharpDX.Windows</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">D3D11</span> <span class="p">=</span> <span class="n">SharpDX</span><span class="p">.</span><span class="n">Direct3D11</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">JalficearhallciCearyallcelgi</span>
<span class="p">{</span>
    <span class="k">class</span> <span class="nc">KikuSimairme</span> <span class="p">:</span> <span class="n">IDisposable</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nf">KikuSimairme</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="n">_renderForm</span> <span class="p">=</span> <span class="k">new</span> <span class="n">RenderForm</span>
            <span class="p">{</span>
                <span class="n">ClientSize</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Size</span><span class="p">(</span><span class="n">Width</span><span class="p">,</span> <span class="n">Height</span><span class="p">)</span>
            <span class="p">};</span>
            <span class="nf">InitializeDeviceResources</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">void</span> <span class="nf">Run</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="n">RenderLoop</span><span class="p">.</span><span class="nf">Run</span><span class="p">(</span><span class="n">_renderForm</span><span class="p">,</span> <span class="n">RenderCallback</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="c1">/// &lt;inheritdoc /&gt;</span>
        <span class="k">public</span> <span class="k">void</span> <span class="nf">Dispose</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="c1">// 释放顺序有要求</span>
            <span class="n">_renderTargetView</span><span class="p">.</span><span class="nf">Dispose</span><span class="p">();</span>
            <span class="n">_swapChain</span><span class="p">.</span><span class="nf">Dispose</span><span class="p">();</span>
            <span class="n">_d3DDevice</span><span class="p">.</span><span class="nf">Dispose</span><span class="p">();</span>
            <span class="n">_d3DDeviceContext</span><span class="p">.</span><span class="nf">Dispose</span><span class="p">();</span>
            <span class="n">_renderForm</span><span class="p">?.</span><span class="nf">Dispose</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">private</span> <span class="k">void</span> <span class="nf">RenderCallback</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="nf">Draw</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">private</span> <span class="k">void</span> <span class="nf">InitializeDeviceResources</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="c1">// 模式描述</span>
            <span class="n">ModeDescription</span> <span class="n">backBufferDesc</span> <span class="p">=</span>
                <span class="k">new</span> <span class="nf">ModeDescription</span>
                <span class="p">(</span>
                    <span class="n">Width</span><span class="p">,</span>
                    <span class="n">Height</span><span class="p">,</span>
                    <span class="c1">// 表示刷新率，这里使用的就是 `1/60` 也就是 60hz </span>
                    <span class="k">new</span> <span class="nf">Rational</span><span class="p">(</span><span class="m">60</span><span class="p">,</span> <span class="m">1</span><span class="p">),</span>
                    <span class="c1">// 表示 RGBA 的颜色，注意颜色的顺序哦</span>
                    <span class="n">Format</span><span class="p">.</span><span class="n">R8G8B8A8_UNorm</span>
                <span class="p">);</span>

            <span class="c1">// 创建交换链的描述</span>
            <span class="n">SwapChainDescription</span> <span class="n">swapChainDesc</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">SwapChainDescription</span><span class="p">()</span>
            <span class="p">{</span>
                <span class="n">ModeDescription</span> <span class="p">=</span> <span class="n">backBufferDesc</span><span class="p">,</span>
                <span class="c1">// 多重采用 SampleDescription 用来优化图片，是一种用于采样和平衡渲染像素的创建亮丽色彩变化之间的平滑过渡的一种技术，这里设置等级 1 也就是1重采样，需要传入两个参数一个是Count 指定每个像素的采样数量，一个是Quality指定希望得到的质量级别</span>
                <span class="n">SampleDescription</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">SampleDescription</span><span class="p">(</span><span class="n">count</span><span class="p">:</span> <span class="m">1</span> <span class="cm">/*每个像素的采样数量*/</span><span class="p">,</span> <span class="n">quality</span><span class="p">:</span> <span class="m">0</span> <span class="cm">/*质量级别*/</span><span class="p">),</span>
                <span class="c1">// 设置 CPU 访问缓冲的权限，这里设置可以访问 RenderTarget 输出</span>
                <span class="n">Usage</span> <span class="p">=</span> <span class="n">Usage</span><span class="p">.</span><span class="n">RenderTargetOutput</span><span class="p">,</span>
                <span class="c1">// 后缓冲数量 BufferCount 建议设置一个，设置一个就是双缓冲。两个缓冲区已经足够用了</span>
                <span class="n">BufferCount</span> <span class="p">=</span> <span class="m">1</span><span class="p">,</span>
                <span class="c1">// 获取渲染窗口句柄</span>
                <span class="n">OutputHandle</span> <span class="p">=</span> <span class="n">_renderForm</span><span class="p">.</span><span class="n">Handle</span><span class="p">,</span>
                <span class="c1">// 这个值设置是否希望是全屏，如果是 true 就是窗口</span>
                <span class="n">IsWindowed</span> <span class="p">=</span> <span class="k">true</span>
            <span class="p">};</span>

            <span class="n">D3D11</span><span class="p">.</span><span class="n">Device</span><span class="p">.</span><span class="nf">CreateWithSwapChain</span>
            <span class="p">(</span>
                <span class="cm">/*
                 * 第一个参数 DriverType.Hardware 表示希望使用 GPU 渲染，设置 驱动设备类型 可以设置硬件设备（hardware device）、参考设备（reference device）、软件驱动设备（software driver device）
                   
                   - 硬件设备（hardware device）是一个运行在显卡上的D3D设备，在所有设备中运行速度是最快的
                   
                   - 软件驱动设备（software driverdevice）是开发人员自己编写的用于Direct3D的渲染驱动软件
                   
                   - 参考设备（reference device）是用于没有可用的硬件支持时在CPU上进行渲染的设备
                   
                   - WARP设备（WARPdevice）是一种高效的CPU渲染设备，可以模拟现阶段所有的Direct3D特性
                 */</span>
                <span class="n">DriverType</span><span class="p">.</span><span class="n">Hardware</span><span class="p">,</span>
                <span class="c1">// 第二个参数选不使用特殊的方法，参见 [D3D11_CREATE_DEVICE_FLAG enumeration](https://msdn.microsoft.com/en-us/library/windows/desktop/ff476107(v=vs.85).aspx )</span>
                <span class="n">D3D11</span><span class="p">.</span><span class="n">DeviceCreationFlags</span><span class="p">.</span><span class="n">None</span><span class="p">,</span>
                <span class="c1">// 第三个参数是输入上面的交换链描述</span>
                <span class="n">swapChainDesc</span><span class="p">,</span>
                <span class="c1">// D3D设备（ID3D11Device）通常代表一个显示适配器（即显卡），它最主要的功能是用于创建各种所需资源，最常用的资源有：资源类（ID3D11Resource, 包含纹理和缓冲区），视图类以及着色器。此外，D3D设备还能够用于检测系统环境对功能的支持情况</span>
                <span class="k">out</span> <span class="n">_d3DDevice</span><span class="p">,</span>
                <span class="k">out</span> <span class="n">_swapChain</span><span class="p">);</span>
            <span class="c1">// D3D设备上下文(ID3D11DeviceContext)可以看做是一个渲染管线。通常我们在创建D3D设备的同时也会附赠一个立即设备上下文(Immediate Context)。一个D3D设备仅对应一个D3D立即设备上下文</span>
            <span class="c1">// 渲染管线主要负责渲染和计算工作，它需要绑定来自与它关联的D3D设备所创建的各种资源、视图和着色器才能正常运转，除此之外，它还能够负责对资源的直接读写操作</span>
            <span class="n">_d3DDeviceContext</span> <span class="p">=</span> <span class="n">_d3DDevice</span><span class="p">.</span><span class="n">ImmediateContext</span><span class="p">;</span>

            <span class="k">using</span> <span class="p">(</span><span class="n">D3D11</span><span class="p">.</span><span class="n">Texture2D</span> <span class="n">backBuffer</span> <span class="p">=</span> <span class="n">_swapChain</span><span class="p">.</span><span class="n">GetBackBuffer</span><span class="p">&lt;</span><span class="n">D3D11</span><span class="p">.</span><span class="n">Texture2D</span><span class="p">&gt;(</span><span class="m">0</span><span class="p">))</span>
            <span class="p">{</span>
                <span class="n">_renderTargetView</span> <span class="p">=</span> <span class="k">new</span> <span class="n">D3D11</span><span class="p">.</span><span class="nf">RenderTargetView</span><span class="p">(</span><span class="n">_d3DDevice</span><span class="p">,</span> <span class="n">backBuffer</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>


        <span class="k">private</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">Width</span> <span class="p">=</span> <span class="m">1280</span><span class="p">;</span>

        <span class="k">private</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">Height</span> <span class="p">=</span> <span class="m">720</span><span class="p">;</span>

        <span class="k">private</span> <span class="k">readonly</span> <span class="n">RenderForm</span> <span class="n">_renderForm</span><span class="p">;</span>

        <span class="k">private</span> <span class="n">D3D11</span><span class="p">.</span><span class="n">Device</span> <span class="n">_d3DDevice</span><span class="p">;</span>
        <span class="k">private</span> <span class="n">D3D11</span><span class="p">.</span><span class="n">DeviceContext</span> <span class="n">_d3DDeviceContext</span><span class="p">;</span>
        <span class="k">private</span> <span class="n">SwapChain</span> <span class="n">_swapChain</span><span class="p">;</span>
        <span class="k">private</span> <span class="n">D3D11</span><span class="p">.</span><span class="n">RenderTargetView</span> <span class="n">_renderTargetView</span><span class="p">;</span>

        <span class="k">private</span> <span class="k">void</span> <span class="nf">Draw</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="n">_d3DDeviceContext</span><span class="p">.</span><span class="n">OutputMerger</span><span class="p">.</span><span class="nf">SetRenderTargets</span><span class="p">(</span><span class="n">_renderTargetView</span><span class="p">);</span>
            <span class="n">_d3DDeviceContext</span><span class="p">.</span><span class="nf">ClearRenderTargetView</span><span class="p">(</span><span class="n">_renderTargetView</span><span class="p">,</span> <span class="nf">ColorToRaw4</span><span class="p">(</span><span class="n">Color</span><span class="p">.</span><span class="n">Coral</span><span class="p">));</span>

            <span class="n">_swapChain</span><span class="p">.</span><span class="nf">Present</span><span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="n">PresentFlags</span><span class="p">.</span><span class="n">None</span><span class="p">);</span>

            <span class="n">RawColor4</span> <span class="nf">ColorToRaw4</span><span class="p">(</span><span class="n">Color</span> <span class="n">color</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">const</span> <span class="kt">float</span> <span class="n">n</span> <span class="p">=</span> <span class="m">255f</span><span class="p">;</span>
                <span class="k">return</span> <span class="k">new</span> <span class="nf">RawColor4</span><span class="p">(</span><span class="n">color</span><span class="p">.</span><span class="n">R</span> <span class="p">/</span> <span class="n">n</span><span class="p">,</span> <span class="n">color</span><span class="p">.</span><span class="n">G</span> <span class="p">/</span> <span class="n">n</span><span class="p">,</span> <span class="n">color</span><span class="p">.</span><span class="n">B</span> <span class="p">/</span> <span class="n">n</span><span class="p">,</span> <span class="n">color</span><span class="p">.</span><span class="n">A</span> <span class="p">/</span> <span class="n">n</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>本文代码放在 <a href="https://github.com/lindexi/lindexi_gd/tree/7149f791/JalficearhallciCearyallcelgi">github</a> 欢迎小伙伴访问</p>

<p>参见：<a href="http://www.johanfalk.eu/blog/sharpdx-beginners-tutorial-part-3-initializing-directx">SharpDX Beginners Tutorial Part 3: Initializing DirectX - Johan Falk</a></p>

<p><a href="https://blog.lindexi.com/post/sharpdx.html">SharpDX 系列</a></p>

<p><a href="https://blog.csdn.net/lindexi_gd/category_9276313.html">WPF 底层渲染</a></p>

<p><a href="https://blog.csdn.net/acmmmm/article/details/79369294">Directx11入门之D3D程序初始化 - 九野的博客 - CSDN博客</a></p>

<p><a href="https://blog.csdn.net/acmmmm/article/details/79394416">Directx11入门之第五章 渲染管线 - 九野的博客 - CSDN博客</a></p>

<p><a href="https://blog.csdn.net/pizi0475/article/details/7786348">Direct3D 11入门级知识介绍</a></p>

<p><a href="https://blog.csdn.net/nightelve/article/details/6460477">Direct3D设备</a></p>

<p><a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ff476107(v=vs.85).aspx">D3D11_CREATE_DEVICE_FLAG enumeration</a></p>

<p>上一篇 <a href="https://lindexi.oschina.io/lindexi/post/C-%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%86%99-SharpDx-%E5%BA%94%E7%94%A8-%E6%8E%A7%E5%88%B6%E5%8F%B0%E5%88%9B%E5%BB%BA-Sharpdx-%E7%AA%97%E5%8F%A3.html">C# 从零开始写 SharpDx 应用 控制台创建 Sharpdx 窗口</a></p>

<p>下一篇 <a href="https://blog.lindexi.com/post/C-%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%86%99-SharpDx-%E5%BA%94%E7%94%A8-%E7%94%BB%E4%B8%89%E8%A7%92.html">C# 从零开始写 SharpDx 应用 画三角</a> 将会告诉大家如何创建 视口 ViewPort，视口定义了我们渲染到屏幕上的面积。</p>

:ET