I"/L<p>本文讲的是解决UWP文本GBK打开乱码错误，如何去读取GBK，包括网页GBK。最后本文给出一个方法追加文本。</p>

<!--more-->

<!-- CreateTime:2019/8/24 16:02:27 -->

<div id="toc"></div>

<p>我使用NotePad记事本保存文件，格式ASCII，用微软示例打开文件方式读取，出现错误</p>

<p>“在多字节的目标代码页中，没有此 Unicode 字符可以映射到的字符”</p>

<p>英文 No mapping for the Unicode character exists in the target multi-byte code page</p>

<p>这个问题看来很简单，不就是编码错误，最后我就弄了一晚上</p>

<p>我先换个说法，让大家容易搜索到</p>

<ul>
  <li>
    <p>UWP 读ASCII错误</p>
  </li>
  <li>
    <p>UWP read ASCII</p>
  </li>
  <li>
    <p>UWP GBK</p>
  </li>
  <li>
    <p>UWP 读取记事本</p>
  </li>
  <li>
    <p>UWP 访问GBK网页乱码</p>
  </li>
  <li>
    <p>UWP 乱码</p>
  </li>
  <li>
    <p>UWP GB2312 乱码</p>
  </li>
  <li>
    <p>UWP 网页乱码</p>
  </li>
</ul>

<p>其实不知道垃圾wr怎么想，现在没法读ASCII，把文本用文本编辑器打开，另存为的时候保存为 ASCII 格式，使用官方给的代码，直接错。</p>

<p>用了nos大神的代码<a href="http://blog.csdn.net/nomasp/article/details/50310357">http://blog.csdn.net/nomasp/article/details/50310357</a>，也是报错</p>

<p>用了我csdn博客置顶代码，就直接乱码 所有中文为 “?” ，但是我以前就是这样写，可以读取到？原因是因为文本保存为</p>

<p>查了一下WPF使用默认可以读，原因是默认的 WPF 的编码读取是 GBK 所以这时就可以读取，但是在 UWP 是没有 GBK 的，默认也不是。因为 UWP 是 .net core 程序，.net core 没有默认支持 GBK ，因为 .net core 是最小化的，</p>

<p>从<a href="https://docs.microsoft.com/en-us/dotnet/standard/base-types/character-encoding">微软</a>的文档可以看到下面的说明</p>

<blockquote>
  <p>By default, .NET Core does not make available any code page encodings other than code page 28591 and the Unicode encodings, such as UTF-8 and UTF-16. However, you can add the code page encodings found in standard Windows apps that target .NET to your app. For complete information, see the CodePagesEncodingProvider topic.</p>
</blockquote>

<blockquote>
  <p>默认.net core 不包含除了 代码页为 28591 和 Unicode(utf-8,utf-16) 之外的其他编码，但是标准的 .net Framework 开发的程序中使用其他的编码，而且可以在标准的 windows 程序支持其他编码，详细请看<a href="https://msdn.microsoft.com/en-us/library/mt643901(v=vs.110).aspx">CodePagesEncodingProvider</a></p>
</blockquote>

<p>也就是我们保存时GBK，查询到Encoding没有GBK，没有默认的，所以看起来这个问题不是简单就可以通过。</p>

<p>于是我就在网上找，很久没找到，但是找到 <a href="http://www.cnblogs.com/yffswyf/p/4826207.html">http://www.cnblogs.com/yffswyf/p/4826207.html</a>，写到一半我就不想写，好难</p>

<p>在网上看到Encoding.GetEncoding（0）就是默认编码，于是我找了 GetEncoding，原来有string，那么<code class="language-plaintext highlighter-rouge">Encoding gbk = Encoding.GetEncoding("GBK");</code>是否就是可以，运行代码</p>

<p>报错
 ‘GBK’ is not a supported encoding name.</p>

<p>看来这个也不可以，我觉得我要写个转换</p>

<p>最后发现
https://bbs.uwp.ac.cn/?/article/43 有大神的方法，请看下面代码。</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//使用CodePagesEncodingProvider去注册扩展编码。</span>
<span class="n">Encoding</span><span class="p">.</span><span class="nf">RegisterProvider</span><span class="p">(</span><span class="n">CodePagesEncodingProvider</span><span class="p">.</span><span class="n">Instance</span><span class="p">);</span>
<span class="c1">//注册GBK编码</span>
<span class="n">Encoding</span> <span class="n">encodingGbk</span> <span class="p">=</span> <span class="n">Encoding</span><span class="p">.</span><span class="nf">GetEncoding</span><span class="p">(</span><span class="s">"GBK"</span><span class="p">);</span>
</code></pre></div></div>

<p>如果找不到 CodePagesEncodingProvider ，请在nuget搜索<code class="language-plaintext highlighter-rouge">System.Text.Encoding.CodePages</code>，如果找不到 GBK ，那么请使用 GB3212 代替。</p>

<p>我们在读取之前判断文件的编码，按照不同编码进行不同编码的读取，这个简单判断可以使用这段代码判断</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="k">private</span> <span class="k">static</span> <span class="n">Encoding</span> <span class="nf">AutoEncoding</span><span class="p">(</span><span class="kt">byte</span><span class="p">[]</span> <span class="n">bom</span><span class="p">)</span>

        <span class="p">{</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">bom</span><span class="p">.</span><span class="n">Length</span> <span class="p">!=</span> <span class="m">4</span><span class="p">)</span>

            <span class="p">{</span>

                <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentException</span><span class="p">();</span>

            <span class="p">}</span>

            <span class="c1">// Analyze the BOM</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">bom</span><span class="p">[</span><span class="m">0</span><span class="p">]</span> <span class="p">==</span> <span class="m">0x2b</span> <span class="p">&amp;&amp;</span> <span class="n">bom</span><span class="p">[</span><span class="m">1</span><span class="p">]</span> <span class="p">==</span> <span class="m">0x2f</span> <span class="p">&amp;&amp;</span> <span class="n">bom</span><span class="p">[</span><span class="m">2</span><span class="p">]</span> <span class="p">==</span> <span class="m">0x76</span><span class="p">)</span> <span class="k">return</span> <span class="n">Encoding</span><span class="p">.</span><span class="n">UTF7</span><span class="p">;</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">bom</span><span class="p">[</span><span class="m">0</span><span class="p">]</span> <span class="p">==</span> <span class="m">0xef</span> <span class="p">&amp;&amp;</span> <span class="n">bom</span><span class="p">[</span><span class="m">1</span><span class="p">]</span> <span class="p">==</span> <span class="m">0xbb</span> <span class="p">&amp;&amp;</span> <span class="n">bom</span><span class="p">[</span><span class="m">2</span><span class="p">]</span> <span class="p">==</span> <span class="m">0xbf</span><span class="p">)</span> <span class="k">return</span> <span class="n">Encoding</span><span class="p">.</span><span class="n">UTF8</span><span class="p">;</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">bom</span><span class="p">[</span><span class="m">0</span><span class="p">]</span> <span class="p">==</span> <span class="m">0xff</span> <span class="p">&amp;&amp;</span> <span class="n">bom</span><span class="p">[</span><span class="m">1</span><span class="p">]</span> <span class="p">==</span> <span class="m">0xfe</span><span class="p">)</span> <span class="k">return</span> <span class="n">Encoding</span><span class="p">.</span><span class="n">Unicode</span><span class="p">;</span> <span class="c1">//UTF-16LE</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">bom</span><span class="p">[</span><span class="m">0</span><span class="p">]</span> <span class="p">==</span> <span class="m">0xfe</span> <span class="p">&amp;&amp;</span> <span class="n">bom</span><span class="p">[</span><span class="m">1</span><span class="p">]</span> <span class="p">==</span> <span class="m">0xff</span><span class="p">)</span> <span class="k">return</span> <span class="n">Encoding</span><span class="p">.</span><span class="n">BigEndianUnicode</span><span class="p">;</span> <span class="c1">//UTF-16BE</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">bom</span><span class="p">[</span><span class="m">0</span><span class="p">]</span> <span class="p">==</span> <span class="m">0</span> <span class="p">&amp;&amp;</span> <span class="n">bom</span><span class="p">[</span><span class="m">1</span><span class="p">]</span> <span class="p">==</span> <span class="m">0</span> <span class="p">&amp;&amp;</span> <span class="n">bom</span><span class="p">[</span><span class="m">2</span><span class="p">]</span> <span class="p">==</span> <span class="m">0xfe</span> <span class="p">&amp;&amp;</span> <span class="n">bom</span><span class="p">[</span><span class="m">3</span><span class="p">]</span> <span class="p">==</span> <span class="m">0xff</span><span class="p">)</span> <span class="k">return</span> <span class="n">Encoding</span><span class="p">.</span><span class="n">UTF32</span><span class="p">;</span>

            <span class="k">return</span> <span class="n">Encoding</span><span class="p">.</span><span class="n">ASCII</span><span class="p">;</span>

        <span class="p">}</span>
</code></pre></div></div>

<p>这没有GBK所以我们只好通过一个垃圾方法。</p>

<p>用<code class="language-plaintext highlighter-rouge">Windows.Storage.FileIO.ReadTextAsync</code>如果错误了，就使用GBK读，还错误，那么就是文件错了。</p>

<p>编码的错报的ArgumentOutOfRangeException。我们可以Catch，用<code class="language-plaintext highlighter-rouge">GBK</code>读文本，这样如果读取错误就是文件错了。</p>

<p>全部代码</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="k">private</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="nf">Read</span><span class="p">(</span><span class="n">StorageFile</span> <span class="n">file</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">string</span> <span class="n">str</span> <span class="p">=</span> <span class="s">""</span><span class="p">;</span>
            <span class="k">try</span>
            <span class="p">{</span>
                <span class="n">str</span> <span class="p">=</span> <span class="k">await</span> <span class="n">Windows</span><span class="p">.</span><span class="n">Storage</span><span class="p">.</span><span class="n">FileIO</span><span class="p">.</span><span class="nf">ReadTextAsync</span><span class="p">(</span><span class="n">file</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">ArgumentOutOfRangeException</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="c1">//using(var stream =new StreamReader((await file.OpenReadAsync()).GetInputStreamAt(0).AsStreamForRead()))</span>
                <span class="c1">//{</span>
                <span class="c1">//    string text = stream.ReadToEnd();</span>
                <span class="c1">//    return text;</span>
                <span class="c1">//}</span>


                <span class="n">IBuffer</span> <span class="n">buffer</span> <span class="p">=</span> <span class="k">await</span> <span class="n">FileIO</span><span class="p">.</span><span class="nf">ReadBufferAsync</span><span class="p">(</span><span class="n">file</span><span class="p">);</span>
                <span class="n">DataReader</span> <span class="n">reader</span> <span class="p">=</span> <span class="n">DataReader</span><span class="p">.</span><span class="nf">FromBuffer</span><span class="p">(</span><span class="n">buffer</span><span class="p">);</span>
                <span class="kt">byte</span><span class="p">[]</span> <span class="n">fileContent</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="p">[</span><span class="n">reader</span><span class="p">.</span><span class="n">UnconsumedBufferLength</span><span class="p">];</span>
                <span class="n">reader</span><span class="p">.</span><span class="nf">ReadBytes</span><span class="p">(</span><span class="n">fileContent</span><span class="p">);</span>
                <span class="kt">string</span> <span class="n">text</span> <span class="p">=</span> <span class="s">""</span><span class="p">;</span>

               <span class="c1">// Encoding.ASCII.GetString(fileContent, 0, fileContent.Length);</span>

               <span class="c1">//text= Encoding.GetEncoding(0).GetString(fileContent, 0, fileContent.Length);</span>

                <span class="n">Encoding</span><span class="p">.</span><span class="nf">RegisterProvider</span><span class="p">(</span><span class="n">CodePagesEncodingProvider</span><span class="p">.</span><span class="n">Instance</span><span class="p">);</span>
                <span class="n">Encoding</span> <span class="n">gbk</span> <span class="p">=</span> <span class="n">Encoding</span><span class="p">.</span><span class="nf">GetEncoding</span><span class="p">(</span><span class="s">"GBK"</span><span class="p">);</span>

                <span class="n">text</span> <span class="p">=</span> <span class="n">gbk</span><span class="p">.</span><span class="nf">GetString</span><span class="p">(</span><span class="n">fileContent</span><span class="p">);</span>
                <span class="c1">//string text = AutoEncoding(new byte[4] { fileContent[0], fileContent[1], fileContent[2], fileContent[3] }).GetString(fileContent);</span>

                <span class="k">return</span> <span class="n">text</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="n">str</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">private</span> <span class="k">static</span> <span class="n">Encoding</span> <span class="nf">AutoEncoding</span><span class="p">(</span><span class="kt">byte</span><span class="p">[]</span> <span class="n">bom</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">bom</span><span class="p">.</span><span class="n">Length</span> <span class="p">!=</span> <span class="m">4</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentException</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="c1">// Analyze the BOM</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">bom</span><span class="p">[</span><span class="m">0</span><span class="p">]</span> <span class="p">==</span> <span class="m">0x2b</span> <span class="p">&amp;&amp;</span> <span class="n">bom</span><span class="p">[</span><span class="m">1</span><span class="p">]</span> <span class="p">==</span> <span class="m">0x2f</span> <span class="p">&amp;&amp;</span> <span class="n">bom</span><span class="p">[</span><span class="m">2</span><span class="p">]</span> <span class="p">==</span> <span class="m">0x76</span><span class="p">)</span> <span class="k">return</span> <span class="n">Encoding</span><span class="p">.</span><span class="n">UTF7</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">bom</span><span class="p">[</span><span class="m">0</span><span class="p">]</span> <span class="p">==</span> <span class="m">0xef</span> <span class="p">&amp;&amp;</span> <span class="n">bom</span><span class="p">[</span><span class="m">1</span><span class="p">]</span> <span class="p">==</span> <span class="m">0xbb</span> <span class="p">&amp;&amp;</span> <span class="n">bom</span><span class="p">[</span><span class="m">2</span><span class="p">]</span> <span class="p">==</span> <span class="m">0xbf</span><span class="p">)</span> <span class="k">return</span> <span class="n">Encoding</span><span class="p">.</span><span class="n">UTF8</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">bom</span><span class="p">[</span><span class="m">0</span><span class="p">]</span> <span class="p">==</span> <span class="m">0xff</span> <span class="p">&amp;&amp;</span> <span class="n">bom</span><span class="p">[</span><span class="m">1</span><span class="p">]</span> <span class="p">==</span> <span class="m">0xfe</span><span class="p">)</span> <span class="k">return</span> <span class="n">Encoding</span><span class="p">.</span><span class="n">Unicode</span><span class="p">;</span> <span class="c1">//UTF-16LE</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">bom</span><span class="p">[</span><span class="m">0</span><span class="p">]</span> <span class="p">==</span> <span class="m">0xfe</span> <span class="p">&amp;&amp;</span> <span class="n">bom</span><span class="p">[</span><span class="m">1</span><span class="p">]</span> <span class="p">==</span> <span class="m">0xff</span><span class="p">)</span> <span class="k">return</span> <span class="n">Encoding</span><span class="p">.</span><span class="n">BigEndianUnicode</span><span class="p">;</span> <span class="c1">//UTF-16BE</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">bom</span><span class="p">[</span><span class="m">0</span><span class="p">]</span> <span class="p">==</span> <span class="m">0</span> <span class="p">&amp;&amp;</span> <span class="n">bom</span><span class="p">[</span><span class="m">1</span><span class="p">]</span> <span class="p">==</span> <span class="m">0</span> <span class="p">&amp;&amp;</span> <span class="n">bom</span><span class="p">[</span><span class="m">2</span><span class="p">]</span> <span class="p">==</span> <span class="m">0xfe</span> <span class="p">&amp;&amp;</span> <span class="n">bom</span><span class="p">[</span><span class="m">3</span><span class="p">]</span> <span class="p">==</span> <span class="m">0xff</span><span class="p">)</span> <span class="k">return</span> <span class="n">Encoding</span><span class="p">.</span><span class="n">UTF32</span><span class="p">;</span>
            <span class="k">return</span> <span class="n">Encoding</span><span class="p">.</span><span class="n">ASCII</span><span class="p">;</span>
        <span class="p">}</span>
</code></pre></div></div>

<p>参考：http://stackoverflow.com/questions/35296213/read-unicode-string-from-text-file-in-uwp-app/38299563#38299563</p>

<p>http://www.cnblogs.com/loyieking/p/5617508.html</p>

<p><a href="http://www.cnblogs.com/artech/p/encoding-registeration-4-net-core.html">难道.NET Core到R2连中文编码都不支持吗？ - Artech - 博客园</a></p>

<p>文本还有一个坑，我们如何在文本追加？uwp追加文本其实换了类，在FileIO。</p>

<p>对于一个需要追加的文件，UWP追加文件写入其实可以使用<code class="language-plaintext highlighter-rouge">await FileIO.AppendTextAsync(StorageFile,"追加文本");</code></p>

:ET