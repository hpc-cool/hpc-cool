I"k1<p>在开启 Nullable 可空类型之后，原本可以调用的 API 也许就会提示 400 BadRequest 因为传入参数不合法，模型校验失败，此时将不会进入预期的 API 函数，同时也不会在输出里面找到有用的信息</p>

<!--more-->

<!-- CreateTime:2020/8/26 14:40:08 -->

<p>在 SDK 风格的 csproj 文件开启可空类型可以添加下面代码</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      <span class="nt">&lt;Nullable&gt;</span>enable<span class="nt">&lt;/Nullable&gt;</span>
</code></pre></div></div>

<p>为了方便让小伙伴知道上面代码加在哪里，我贴出更多的 csproj 文件代码</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nt">&lt;PropertyGroup&gt;</span>
      <span class="nt">&lt;TargetFramework&gt;</span>netcoreapp3.1<span class="nt">&lt;/TargetFramework&gt;</span>
      <span class="nt">&lt;Nullable&gt;</span>enable<span class="nt">&lt;/Nullable&gt;</span>
  <span class="nt">&lt;/PropertyGroup&gt;</span>
</code></pre></div></div>

<p>在开启之后，原本工作的很好的 API 也许在客户端调用的时候，将会提示 400 BadRequest 内容大概如下</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{
    "type":"https://tools.ietf.org/html/rfc7231#section-6.5.1",
    "title":"One or more validation errors occurred.",
    "status":400,
    "traceId":"00-99b1c07693a55c4990389901832992a4-b2ed63ee45e85344-01",
    "errors":
    {
        "Account":
        [
            "The Account field is required."
        ]
    }
}
</code></pre></div></div>

<p>复习一下为什么会存在 400 错误</p>

<ul>
  <li>也许调用的 API 错误了，本来是预期调用 Foo 的，但却调用了 A 接口</li>
  <li>也许调用的端口不对，也许是被 Fiddler 干扰了</li>
  <li>也许是传入的参数不合法</li>
</ul>

<p>如上面提示，实际内容是 <code class="language-plaintext highlighter-rouge">The Account field is required</code> 翻译过来就是接口里面的参数，要求一定存在 Account 属性</p>

<p>而明明之前工作的好好的，接口实现如下</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="p">[</span><span class="n">HttpPost</span><span class="p">]</span>
        <span class="c1">// ReSharper disable once StringLiteralTypo</span>
        <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"/lindexi/doubi"</span><span class="p">)]</span>
        <span class="p">[</span><span class="nf">RequestSizeLimit</span><span class="p">(</span><span class="m">100</span><span class="n">_000_000</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="nf">PostFile</span><span class="p">([</span><span class="n">FromForm</span><span class="p">]</span> <span class="n">LindexiUploadFileRequest</span> <span class="n">request</span><span class="p">)</span>
</code></pre></div></div>

<p>也就是需要通过 FromForm 拿到内容，而 LindexiUploadFileRequest 的定义如下</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="p">[</span><span class="n">DataContract</span><span class="p">]</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">LindexiUploadFileRequest</span>
    <span class="p">{</span>
        <span class="p">[</span><span class="nf">DataMember</span><span class="p">(</span><span class="n">Name</span> <span class="p">=</span> <span class="s">"file"</span><span class="p">)]</span>
        <span class="p">[</span><span class="nf">JsonPropertyName</span><span class="p">(</span><span class="s">"file"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="n">IFormFile</span> <span class="n">File</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="p">[</span><span class="nf">DataMember</span><span class="p">(</span><span class="n">Name</span> <span class="p">=</span> <span class="s">"account"</span><span class="p">)]</span>
        <span class="p">[</span><span class="nf">JsonPropertyName</span><span class="p">(</span><span class="s">"account"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Account</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
</code></pre></div></div>

<p>客户端调用代码大概如下</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>       <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="nf">Upload</span><span class="p">(</span><span class="kt">string</span> <span class="n">host</span><span class="p">,</span> <span class="kt">string</span> <span class="n">file</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">multipartFormDataContent</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">MultipartFormDataContent</span><span class="p">();</span>
            <span class="kt">var</span> <span class="n">fileName</span> <span class="p">=</span> <span class="n">Path</span><span class="p">.</span><span class="nf">GetFileName</span><span class="p">(</span><span class="n">file</span><span class="p">);</span>

            <span class="kt">var</span> <span class="n">stringContent</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">StringContent</span><span class="p">(</span><span class="n">fileName</span><span class="p">);</span>
            <span class="n">multipartFormDataContent</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">stringContent</span><span class="p">,</span> <span class="s">"Name"</span><span class="p">);</span>

            <span class="k">using</span> <span class="nn">var</span> <span class="n">fileStream</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">FileStream</span><span class="p">(</span><span class="n">file</span><span class="p">,</span> <span class="n">FileMode</span><span class="p">.</span><span class="n">Open</span><span class="p">);</span>
            <span class="k">using</span> <span class="nn">var</span> <span class="n">streamContent</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">StreamContent</span><span class="p">(</span><span class="n">fileStream</span><span class="p">);</span>
            <span class="n">multipartFormDataContent</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">streamContent</span><span class="p">,</span> <span class="s">"File"</span><span class="p">,</span> <span class="n">fileName</span><span class="p">);</span>

            <span class="kt">var</span> <span class="n">account</span> <span class="p">=</span> <span class="s">""</span><span class="p">;</span>

            <span class="n">multipartFormDataContent</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">StringContent</span><span class="p">(</span><span class="n">account</span><span class="p">),</span> <span class="s">"Account"</span><span class="p">);</span>

            <span class="kt">var</span> <span class="n">httpClient</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">HttpClient</span><span class="p">();</span>
            <span class="kt">var</span> <span class="n">url</span> <span class="p">=</span> <span class="s">$"</span><span class="p">{</span><span class="n">host</span><span class="p">}</span><span class="s">/lindexi/doubi"</span><span class="p">;</span>

            <span class="kt">var</span> <span class="n">response</span> <span class="p">=</span> <span class="k">await</span> <span class="n">httpClient</span><span class="p">.</span><span class="nf">PostAsync</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">multipartFormDataContent</span><span class="p">).</span><span class="nf">ConfigureAwait</span><span class="p">(</span><span class="k">false</span><span class="p">);</span>
            <span class="kt">var</span> <span class="n">content</span> <span class="p">=</span> <span class="k">await</span> <span class="n">response</span><span class="p">.</span><span class="n">Content</span><span class="p">.</span><span class="nf">ReadAsStringAsync</span><span class="p">().</span><span class="nf">ConfigureAwait</span><span class="p">(</span><span class="k">false</span><span class="p">);</span>
            <span class="k">return</span> <span class="s">$"</span><span class="p">{</span><span class="n">response</span><span class="p">.</span><span class="n">StatusCode</span><span class="p">}</span><span class="s">\n</span><span class="p">{</span><span class="n">content</span><span class="p">}</span><span class="s">"</span><span class="p">;</span>
        <span class="p">}</span>
</code></pre></div></div>

<p>小伙伴是否可以看出问题？实际上在开启可空之后，尽管在客户端代码里面设置了 <code class="language-plaintext highlighter-rouge">multipartFormDataContent.Add(new StringContent(account), "Account");</code> 但是传入的内容是空字符串</p>

<p>而开启可空之后，定义的数据模型 <code class="language-plaintext highlighter-rouge">public string Account { get; set; }</code> 表示 Account 一定不是空，于是传入空的 Account 属性将会校验不通过</p>

<p>有两个解决方法，第一个解决方法就是标记 Account 属性可空</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="p">[</span><span class="nf">DataMember</span><span class="p">(</span><span class="n">Name</span> <span class="p">=</span> <span class="s">"account"</span><span class="p">)]</span>
        <span class="p">[</span><span class="nf">JsonPropertyName</span><span class="p">(</span><span class="s">"account"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="kt">string</span><span class="p">?</span> <span class="n">Account</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</code></pre></div></div>

<p>但是对于大项目，很难测试全，此时可以在全局配置，让行为和之前相同</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">services</span><span class="p">.</span><span class="nf">AddControllers</span><span class="p">(</span><span class="n">options</span> <span class="p">=&gt;</span> <span class="n">options</span><span class="p">.</span><span class="n">SuppressImplicitRequiredAttributeForNonNullableReferenceTypes</span> <span class="p">=</span> <span class="k">true</span><span class="p">);</span>
</code></pre></div></div>

<p>打开 Startup.cs 文件，在 ConfigureServices 函数添加上面代码即可</p>

<p>但对于 EF 这边，有更多的变更，详细请看 <a href="https://docs.microsoft.com/en-us/ef/core/miscellaneous/nullable-reference-types">Working with nullable reference types - EF Core</a></p>

<p>因此如果是新项目，我推荐开启可空，而对于现有的项目，我不推荐打开</p>

<p><a href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.mvc.mvcoptions.suppressimplicitrequiredattributefornonnullablereferencetypes?view=aspnetcore-3.1&amp;WT.mc_id=WD-MVP-5003260">MvcOptions.SuppressImplicitRequiredAttributeForNonNullableReferenceTypes Property (Microsoft.AspNetCore.Mvc)</a></p>

<p><a href="https://github.com/dotnet/aspnetcore/issues/18403">Nullable=Enabled results in required validation errors for parameters or bound properties with default values · Issue #18403 · dotnet/aspnetcore</a></p>

:ET