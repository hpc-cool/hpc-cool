I"9<p>在 WPF 中的布局模型里面，可以将每个元素都认为是矩形。而每个矩形都可以将自己的左上角作为原点建立坐标，不同的矩形之间的坐标原点不相同，当这些用矩形表达的元素进行系列的旋转和平移等之后，如何将以某个元素的矩形左上角为原点的坐标换算为另一个元素的矩形左上角为原点的坐标</p>

<!--more-->

<!-- CreateTime:2020/3/18 8:30:31 -->

<p>只要在相同的视觉树上面，所有的元素的矩形范围都能通过矩阵计算换算出来，在 WPF 和 UWP 里面都在每个元素提供了 TranslatePoint 方法，这个方法的作用就是用当前元素的左上角为原点的坐标换算为这个点在传入的元素的坐标，或者说将传入的点相对于视觉树最顶层的坐标不变的前提下，计算出如果放在传入元素里面应该的坐标是多少</p>

<p>如我有一个 Canvas 和 Canvas 里面有一个矩形，我对矩形做了一些复杂的变换，包括设置他的 Margin 和 Canvas.Left 的值，我想要了解这个矩形相对于Canvas的坐标在哪？其实这个问题可以转换为求在矩形坐标中，点(0,0)在 Canvas 上的值是多少</p>

<p>因为求一个元素相对于另一个的元素的坐标，也就是求元素左上角所在另一个元素的坐标，而一个元素的左上角就是通过以元素的左上角为原点的坐标也就是点 (0,0) 在屏幕坐标不变前提下，以另一个元素的左上角为原点的坐标点在哪</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="nt">&lt;Canvas</span> <span class="na">x:Name=</span><span class="s">"Canvas"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;Rectangle</span> <span class="na">x:Name=</span><span class="s">"Rectangle"</span> <span class="na">Margin=</span><span class="s">"10,10,10,10"</span> <span class="na">Width=</span><span class="s">"100"</span> <span class="na">Height=</span><span class="s">"100"</span>
                       <span class="na">Canvas.Left=</span><span class="s">"-5"</span> <span class="na">Fill=</span><span class="s">"Black"</span><span class="nt">&gt;&lt;/Rectangle&gt;</span>
        <span class="nt">&lt;/Canvas&gt;</span>
</code></pre></div></div>

<p>可以通过在 Rectangle 的 TranslatePoint 方法里面传入点 (0,0) 和需要换算的对应的另一个元素 Canvas 对象，就能返回传入的点在画布中的坐标</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="k">private</span> <span class="k">void</span> <span class="nf">MainWindow_Loaded</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">RoutedEventArgs</span> <span class="n">e</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">point</span> <span class="p">=</span> <span class="n">Rectangle</span><span class="p">.</span><span class="nf">TranslatePoint</span><span class="p">(</span><span class="k">new</span> <span class="nf">Point</span><span class="p">(),</span> <span class="n">Canvas</span><span class="p">);</span>
            <span class="n">Debug</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="n">point</span><span class="p">);</span>
        <span class="p">}</span>
</code></pre></div></div>

<p>在元素的TranslatePoint方法里面，第一个参数传入的点是相对于当前元素的左上角为原点的坐标，而第二个值就是将要转换坐标的元素。计算方法就是将传入的点换算为传入的转换坐标的元素的左上角原点的坐标</p>

<p>计算原理是什么？其实小伙伴可以尝试画两个矩形，在其中一个矩形里面点一个点，然后求这个点在使用另一个矩形的左上角作为原点时的坐标，这是一道特别简单的初中数学</p>

<!-- ![](image/WPF 使用 TranslatePoint 换算元素之间相对坐标/WPF 使用 TranslatePoint 换算元素之间相对坐标0.png) -->

<p><img src="http://image.acmx.xyz/lindexi%2F20203188431364.jpg" alt="" /></p>

<p>本文代码放在<a href="https://github.com/lindexi/lindexi_gd/tree/502e65befeee340520968976b023cf9b8b4b70a9/JeelifuwheChaykicinelniyearje">github</a>欢迎小伙伴访问</p>

<p>更多请看 <a href="https://blog.csdn.net/sinat_31608641/article/details/89631824">WPF使用TransformToAncestor获取元素的相对坐标_网络_sinat_31608641的博客-CSDN博客</a></p>

:ET