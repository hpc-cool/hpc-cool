I"<p>现在微软有一个开源项目 CoreRT 能通过将托管的 .NET Core 编译为单个无依赖的 Native 程序
这个项目现在还没发布，但是能尝试使用，可以带来很多的性能提升</p>

<!--more-->

<!-- CreateTime:2019/11/29 8:31:17 -->

<!-- 标签：C#,dotnet,dotnetcore -->

<p>使用 CoreRT 发布的优点：</p>

<ol>
  <li>
    <p>只有一个 exe 文件，是绿色没有依赖</p>
  </li>
  <li>
    <p>发布的文件的大小很小，对比 dotnet core 的独立发布 50M 的大小会小很多</p>
  </li>
  <li>
    <p>能在大多数的系统运行</p>
  </li>
  <li>
    <p>提高很多启动性能</p>
  </li>
</ol>

<p>不足是软件不是非常稳定，同时只能支持x64的程序</p>

<p>使用这个项目是比较难的，本文下面提供的包的版本，请大家按照我的安装的版本使用，因为新的版本可能有一些修改，同时没有更新文档，如果是第一次使用，可能会遇到很多坑。</p>

<p>首先打开 VisualStudio 2017 安装 C++ 依赖，虽然现在已经有了 VisualStudio 2019 了，但是 C++ 的依赖是需要和 VS 的版本关系，所以这里暂时不能使用 VisualStudio 2019 安装</p>

<p>点击 Nuget 源设置，在 VisualStudio 的工具-&gt;选项-&gt;nuget包管理器-&gt;nuget包源里面添加 myget 的使用，这个网站是微软的 CI 输出的，里面大量的库都是没有发布的，所以微软也无法保证这些库稳定</p>

<p>添加一个新的源，路径是 <a href="https://dotnet.myget.org/F/dotnet-core/api/v3/index.json">https://dotnet.myget.org/F/dotnet-core/api/v3/index.json</a> 可以通过 <code class="language-plaintext highlighter-rouge">dotnet new nuget</code> 创建配置文件，在配置文件添加下面代码，这样就可以不在全局添加这个链接</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">&lt;?</span><span class="n">xml</span> <span class="n">version</span><span class="p">=</span><span class="s">"1.0"</span> <span class="n">encoding</span><span class="p">=</span><span class="s">"utf-8"</span><span class="p">?&gt;</span>
<span class="p">&lt;</span><span class="n">configuration</span><span class="p">&gt;</span>
 <span class="p">&lt;</span><span class="n">packageSources</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="k">add</span> <span class="n">key</span><span class="p">=</span><span class="s">"dotnet-core"</span> <span class="k">value</span><span class="p">=</span><span class="s">"https://dotnet.myget.org/F/dotnet-core/api/v3/index.json"</span> <span class="p">/&gt;</span>
 <span class="p">&lt;/</span><span class="n">packageSources</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="n">configuration</span><span class="p">&gt;</span>
</code></pre></div></div>

<p>这个黑科技请看 <a href="https://blog.lindexi.com/post/VisualStudio-%E7%BB%99%E9%A1%B9%E7%9B%AE%E6%B7%BB%E5%8A%A0%E7%89%B9%E6%AE%8A%E7%9A%84-Nuget-%E7%9A%84%E9%93%BE%E6%8E%A5.html">VisualStudio 给项目添加特殊的 Nuget 的链接</a></p>

<p>通过 VisualStudio 2017 创建一个新的控制台项目，或者通过命令行使用 dotnet 命令行创建一个新的控制台项目</p>

<p>然后在项目里面添加 Microsoft.DotNet.ILCompiler 的引用，这里添加的版本是 <code class="language-plaintext highlighter-rouge">1.0.0-alpha-*</code> 版本</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="p">&lt;</span><span class="n">ItemGroup</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="n">PackageReference</span> <span class="n">Include</span><span class="p">=</span><span class="s">"Microsoft.DotNet.ILCompiler"</span> <span class="n">Version</span><span class="p">=</span><span class="s">"1.0.0-alpha-*"</span> <span class="p">/&gt;</span>
    <span class="p">&lt;/</span><span class="n">ItemGroup</span><span class="p">&gt;</span>
</code></pre></div></div>

<p>也就是在 1.0.0 的任意版本都会被添加，我实际使用的是 1.0.0-alpha-27401-01 版本</p>

<p>现在尝试写一个 Hellow 程序，使用命令行发布，注意创建的项目的 dotnet core sdk 版本暂时需要是 2.0 的版本</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">dotnet</span> <span class="n">publish</span> <span class="p">-</span><span class="n">r</span> <span class="n">win</span><span class="p">-</span><span class="n">x64</span> <span class="p">-</span><span class="n">c</span> <span class="n">release</span>
</code></pre></div></div>

<p>注意暂时只能发布 x64 的程序，对 x86 暂时没有支持</p>

<p>现在可以发现发布的文件夹里面有 native 文件夹，里面就只包含一个 exe 程序，同时这个文件也非常小</p>

<p>代码请看 <a href="https://github.com/dotnet/corert/tree/master/samples/HelloWorld">https://github.com/dotnet/corert/tree/master/samples/HelloWorld</a></p>

<p>更详细的博客请看 <a href="https://www.cnblogs.com/ants/p/8630332.html">使用CoreRT将.NET Core发布为Native应用程序 - KAnts - 博客园</a></p>

<p><a href="http://www.cnblogs.com/vipyoumay/p/5613373.html">简析 .NET Core 构成体系 - 帅虫哥 - 博客园</a></p>

:ET