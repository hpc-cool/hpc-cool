I"Y<h1 id="中文">中文</h1>
<h1 id="english"><a href="#English">English</a></h1>
<p>本文主要讲实现一个简单的界面，可以在窗口比较大显示列表和内容，窗口比较小时候显示列表或内容。也就是在窗口比较小的时候，点击列表会显示内容，点击返回会显示列表。</p>

<!--more-->

<!-- CreateTime:2018/2/13 17:23:03 -->

<div id="toc"></div>

<p>先放图，很简单。</p>

<p>开始的窗口是很大，可以两栏，其中左边显示列表，右边因为开始没有点击列表就显示图片，点击列表显示内容，就是下面的图。</p>

<p><img src="http://img.blog.csdn.net/20160806130421310" alt="这里写图片描述" /></p>

<p><img src="http://img.blog.csdn.net/20160806130438076" alt="这里写图片描述" /></p>

<p>如果屏幕小，那么只有一栏显示列表或内容</p>

<p>当然可以看下垃圾wr的，他画的图可以看出来，专业</p>

<p><img src="https://msdn.microsoft.com/zh-cn/windows/uwp/controls-and-patterns/images/patterns-md-stacked.png" alt="这里写图片描述" /></p>

<p>然后发下我的图，可以看到我的最垃圾</p>

<p><img src="http://img.blog.csdn.net/20160806131345316" alt="这里写图片描述" /></p>

<p><img src="http://img.blog.csdn.net/20160806131357113" alt="这里写图片描述" /></p>

<p>https://msdn.microsoft.com/windows/uwp/controls-and-patterns/master-details</p>

<p>国内晓迪文章很好，但是文章对我渣渣很难知道如何做。</p>

<p>本文是很简单的，一般和我一样渣都能大概知道。</p>

<p>代码是我在很大的压力会议上写的，不到一个钟，写完修改，和大家说。我写的很简单，可以修改我代码，可以自己写，下面我来说下如何写。</p>

<p>我们首先需要一个Grid，分为两栏，其中一栏为List，一栏为Content</p>

<p>在大屏宽度，也就是我们可以把Grid两栏显示，基本就是Frame导航就好了。</p>

<p>如果屏幕小，我们合并为一个Grid一栏，那么我们只能显示列表或内容。我们可以使用顺序，对，List和Content的Zindex就是设置他们的位置，Zindex比较大的会显示，也就是判断是否存在Content，存在就显示他，不存在，显示List。</p>

<p>应该可以看懂，如果看不懂欢迎发邮件来喷。</p>

<p>现在来说Frame导航。</p>

<h2 id="uwp-导航">UWP 导航</h2>

<p>Content是一个Frame和一个Image的Grid</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>            <span class="nt">&lt;Grid</span> <span class="na">Grid.Column=</span><span class="s">"{x:Bind View.GridInt,Mode=OneWay}"</span> <span class="na">x:Name=</span><span class="s">"Img"</span> 
                  <span class="na">Canvas.ZIndex=</span><span class="s">"{x:Bind View.ZFrame,Mode=OneWay}"</span><span class="nt">&gt;</span>
                <span class="nt">&lt;Image</span>  <span class="na">Source=</span><span class="s">"../Assets/images.jpg"</span>
                       <span class="nt">&gt;&lt;/Image&gt;</span>
                <span class="nt">&lt;Frame</span> <span class="na">x:Name=</span><span class="s">"frame"</span>
                       <span class="nt">&gt;&lt;/Frame&gt;</span>
            <span class="nt">&lt;/Grid&gt;</span>
</code></pre></div></div>

<p>先不要Grid的属性，我会在后面说。</p>

<p>我们没Frame的Content，也就是我们没点击List，会显示图片，Frame有页面就不会显示，因为ZIndex Frame比Image大，很简单</p>

<p>页面传参数很简单，首先是Frame</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">FrameNavigate</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="err">页</span><span class="p">),</span> <span class="err">参数</span><span class="p">);</span>
</code></pre></div></div>

<p>我们在参数写我们要传页面</p>

<p>在页面</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="k">protected</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">OnNavigatedTo</span><span class="p">(</span><span class="n">NavigationEventArgs</span> <span class="n">e</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="err">参数</span><span class="p">=</span> <span class="n">e</span><span class="p">.</span><span class="n">Parameter</span> <span class="k">as</span> <span class="err">传输的参数</span><span class="p">;</span>
            <span class="k">base</span><span class="p">.</span><span class="nf">OnNavigatedTo</span><span class="p">(</span><span class="n">e</span><span class="p">);</span>
        <span class="p">}</span>
</code></pre></div></div>

<p>如果要保存我们的页面，不要导航都新建，在构造<code class="language-plaintext highlighter-rouge"> NavigationCacheMode = NavigationCacheMode.Enabled;</code></p>

<h2 id="list点击">List点击</h2>

<p>我们创建数据Model，我们使用MVVM</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">public</span> <span class="k">class</span> <span class="nc">AddressBook</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">set</span><span class="p">;</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">set</span><span class="p">;</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Str</span> <span class="p">{</span> <span class="k">set</span><span class="p">;</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
</code></pre></div></div>

<p>随便的，可以根据你需要修改</p>

<p>我们在ViewModel，我在View新建两个<code class="language-plaintext highlighter-rouge">DetailPage.xaml</code> <code class="language-plaintext highlighter-rouge">MasterDetailPage.xaml</code>，所以在ViewModel DetailMasterModel.cs</p>

<p>我们在里面</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="k">public</span> <span class="n">ObservableCollection</span><span class="p">&lt;</span><span class="n">AddressBook</span><span class="p">&gt;</span> <span class="n">EccryptAddress</span> <span class="p">{</span> <span class="k">set</span><span class="p">;</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
</code></pre></div></div>

<p>记住要修改列的数量需要使用的</p>

<p>然后我们需要在View写，让我们的数据显示</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>                <span class="nt">&lt;ListView</span> <span class="na">ItemClick=</span><span class="s">"{x:Bind View.MasterClick}"</span>
                      <span class="na">IsItemClickEnabled=</span><span class="s">"True"</span>
                      <span class="na">ItemsSource=</span><span class="s">"{x:Bind View.EccryptAddress}"</span>
                      <span class="nt">&gt;</span>
                    <span class="nt">&lt;ListView.ItemTemplate&gt;</span>
                        <span class="nt">&lt;DataTemplate</span> <span class="na">x:DataType=</span><span class="s">"view:AddressBook"</span><span class="nt">&gt;</span>
                            <span class="nt">&lt;Grid&gt;</span>
                                <span class="nt">&lt;TextBlock</span> <span class="na">Text=</span><span class="s">"{x:Bind Name}"</span><span class="nt">&gt;&lt;/TextBlock&gt;</span>
                            <span class="nt">&lt;/Grid&gt;</span>
                        <span class="nt">&lt;/DataTemplate&gt;</span>
                    <span class="nt">&lt;/ListView.ItemTemplate&gt;</span>
                <span class="nt">&lt;/ListView&gt;</span>
</code></pre></div></div>

<p>当然需要我们在view.xaml.cs</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="k">public</span> <span class="nf">MasterDetailPage</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="n">View</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">DetailMasterModel</span><span class="p">();</span>
            <span class="k">this</span><span class="p">.</span><span class="nf">InitializeComponent</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">private</span> <span class="n">DetailMasterModel</span> <span class="n">View</span> <span class="p">{</span> <span class="k">set</span><span class="p">;</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
</code></pre></div></div>

<p>我们给ListView我们ViewModel的数据，这样就可以显示，我们使用ItemClick可以得到ListView被点击，当然要<code class="language-plaintext highlighter-rouge">IsItemClickEnabled="True"</code></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="k">public</span> <span class="k">void</span> <span class="nf">MasterClick</span><span class="p">(</span><span class="kt">object</span> <span class="n">o</span><span class="p">,</span> <span class="n">ItemClickEventArgs</span> <span class="n">e</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">AddressBook</span> <span class="n">temp</span> <span class="p">=</span> <span class="n">e</span><span class="p">.</span><span class="n">ClickedItem</span> <span class="k">as</span> <span class="n">AddressBook</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">temp</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="n">HasFrame</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
            <span class="n">Detail</span><span class="p">.</span><span class="nf">Navigate</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">DetailPage</span><span class="p">),</span> <span class="n">temp</span><span class="p">.</span><span class="n">Str</span><span class="p">);</span>
            <span class="nf">Narrow</span><span class="p">();</span>
        <span class="p">}</span>

</code></pre></div></div>

<p>我们拿到点击传给Frame，在ViewModel，把Frame叫Detail</p>

<p>因为点击所以我们的Frame有内容 HasFrame=true;</p>

<h2 id="后退按钮">后退按钮</h2>

<p>在App写</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>            <span class="n">Windows</span><span class="p">.</span><span class="n">UI</span><span class="p">.</span><span class="n">Core</span><span class="p">.</span><span class="n">SystemNavigationManager</span><span class="p">.</span><span class="nf">GetForCurrentView</span><span class="p">().</span><span class="n">AppViewBackButtonVisibility</span> <span class="p">=</span> <span class="n">Windows</span><span class="p">.</span><span class="n">UI</span><span class="p">.</span><span class="n">Core</span><span class="p">.</span><span class="n">AppViewBackButtonVisibility</span><span class="p">.</span><span class="n">Visible</span><span class="p">;</span>

</code></pre></div></div>

<p>我们在ViewModel</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>            <span class="n">SystemNavigationManager</span><span class="p">.</span><span class="nf">GetForCurrentView</span><span class="p">().</span><span class="n">BackRequested</span> <span class="p">+=</span> <span class="n">BackRequested</span><span class="p">;</span>

</code></pre></div></div>

<p>如果不知道我说的是什么，可以去下我源代码https://github.com/lindexi/UWP</p>

<p>然后在按后退按钮，就把我们的hasFrame=false;</p>

<p>大概我们就把一个页面做好，Detail就显示我们点击传的str</p>

<p>我们需要手机按后退也是 <code class="language-plaintext highlighter-rouge">Windows.Phone.UI.Input.HardwareButtons.BackPressed</code></p>

<h2 id="页面更改大小">页面更改大小</h2>

<p>我们获得页面大小修改，可以简单</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>       <span class="nt">&lt;VisualStateManager.VisualStateGroups</span> <span class="nt">&gt;</span>
            <span class="nt">&lt;VisualStateGroup</span> <span class="na">CurrentStateChanged=</span><span class="s">"{x:Bind View.NarrowVisual}"</span><span class="nt">&gt;</span>
                <span class="nt">&lt;VisualState&gt;</span>
                    <span class="nt">&lt;VisualState.StateTriggers&gt;</span>
                        <span class="nt">&lt;AdaptiveTrigger</span> <span class="na">MinWindowWidth=</span><span class="s">"720"</span><span class="nt">/&gt;</span>
                    <span class="nt">&lt;/VisualState.StateTriggers&gt;</span>
                    <span class="nt">&lt;VisualState.Setters</span> <span class="nt">&gt;</span>
                        <span class="c">&lt;!--&lt;Setter Target="Img.Visibility" Value="Collapsed"&gt;&lt;/Setter&gt;--&gt;</span>
                    <span class="nt">&lt;/VisualState.Setters&gt;</span>
                <span class="nt">&lt;/VisualState&gt;</span>
                <span class="nt">&lt;VisualState&gt;</span>
                    <span class="nt">&lt;VisualState.StateTriggers&gt;</span>
                        <span class="nt">&lt;AdaptiveTrigger</span> <span class="na">MinWindowHeight=</span><span class="s">"200"</span><span class="nt">&gt;</span>

                        <span class="nt">&lt;/AdaptiveTrigger&gt;</span>

                    <span class="nt">&lt;/VisualState.StateTriggers&gt;</span>
                    <span class="nt">&lt;VisualState.Setters</span> <span class="nt">&gt;</span>

                    <span class="nt">&lt;/VisualState.Setters&gt;</span>
                <span class="nt">&lt;/VisualState&gt;</span>
            <span class="nt">&lt;/VisualStateGroup&gt;</span>
        <span class="nt">&lt;/VisualStateManager.VisualStateGroups&gt;</span>
</code></pre></div></div>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="k">public</span> <span class="k">void</span> <span class="nf">NarrowVisual</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">VisualStateChangedEventArgs</span> <span class="n">e</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="nf">Narrow</span><span class="p">();</span>
        <span class="p">}</span>
</code></pre></div></div>

<p>CurrentStateChanged就是当触发我们的界面变化发生，用这个比较好，因为我们界面大小修改不一定会小于我们设置的，一旦小于再触发，因为View的函数需要<code class="language-plaintext highlighter-rouge">object sender, VisualStateChangedEventArgs e</code></p>

<p>那么从函数获得我们窗口变化可以使用下面两个：</p>

<p>Window.Current.Bounds.Width放在函数，就可以得到我们的窗口大小。</p>

<p>当然我们可以给我们VisualState名，从e.NewState拿到Name就很简单，我们使用Narrow，判断显示屏是小还是可以显示两个</p>

<p>我推荐是使用第一个，因为第二个我们必须修改前台就修改ViewModel</p>

<h2 id="修改显示">修改显示</h2>

<p>我们先判断我们现在屏幕，显示两个还是显示List一个，如果是显示两个，那么我们不需要什么，当然我们需要给默认。</p>

<p>默认Grid左边Auto，右边*，分两个，然后左边是List，如果没有Frame，那么显示图片</p>

<p>如果屏小，那么就显示List，这时我们修改Grid为左边*，右边auto，然后把我们Grid，有Frame，修改为左边，这样我们右边就没有，左边有List和Grid</p>

<p>如果我们HasFrame，还记得hasFrame在哪？就是我们Frame存在内容就是true，那么我们把Frame的ZIndex&gt;List的ZIndex，我们就显示Frame，如果我们按返回，那么把List的ZIndex大于Frame</p>

<p>可以看到我们需要设置一个ZIndex就好</p>

<p>我们就在界面变化，和点击后悔，点击列表，使用判断，我们判断写成一个函数，函数判断现在窗口，判断HasFrame，很简单。</p>

<p>如果看不懂我上面说的，可以看我代码https://github.com/lindexi/UWP/tree/master/uwp/src/DetailMaster</p>

<p>我们开始的大屏幕是使用Grid有分开，左边列表，右边Content，其中Content是Frame，用到页面导航。</p>

<p>如果屏幕小，那么使用List和Content放在同一个Grid，依靠Zindex显示，如果是需要显示列表就列表的ZIndex大，需要显示内容，就把内容的ZIndex大。</p>

<p>我们需要判断我们是否点击了List和用户是否点了返回键，一旦按返回键，我们显示列表，当然在我们屏幕大，可以不做什么，如果屏幕小，就需要设置ZIndex。</p>

<p>那么我们在界面变化的是否，是否知道我们显示内容还是显示列表，这时就是我们得HasFrame，依靠这个选择ZIndex</p>

<h2 id="修改我代码">修改我代码</h2>

<p>现在需要说下，如何修改我的代码，作为你需要。</p>

<p>一般可以自己写一个，不过通过修改我的代码会让你更加理解</p>

<p>首先我们需要Model，这是你自己定义的，随便写</p>

<p>然后打开ViewModel，我们里面关键的有ObservableCollection的，这是列表。</p>

<p>MasterClick里面把跳转换为你需要的。</p>

<p>BackRequested是返回，按返回键，我们现在简单使用界面的，不使用硬件，如果需要硬件其实简单。</p>

<p>界面开始的Image可以换为你需要的，然后其他的可以选择不修改。</p>

<p>很简单使用。</p>

<h2 id="源码">源码</h2>

<p>接着我们来说下我源代码怎么做。</p>

<p>我首先新建 Model，放下随意的类，作为显示的内容，然后在ViewModel使用ObservableCollection，当然给他的也是随意的</p>

<p>在界面我们需要Grid，这时我绑定了GridLength，设置这个简单。</p>

<p>如果需要auto，简单 ` GridLength.Auto<code class="language-plaintext highlighter-rouge">，如果需要</code>1<em><code class="language-plaintext highlighter-rouge">，可以</code>new GridLength(1, GridUnitType.Star);<code class="language-plaintext highlighter-rouge">就是这样，开始是左边Auto，右边</code>1</em>`，MasterGrid就是列表啦，这个不想说</p>

<p>我绑定是用x:Bind，要OneWay</p>

<p>我写 List 需要使用 Grid 控制他的位置和背景，因为 List 背景透明，其实我在 List 也可以用背景，但是我想我会在 List 做弹出，最后想着用 Grid</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nt">&lt;Grid</span>
                <span class="na">Background=</span><span class="s">"White"</span>
                <span class="na">Canvas.ZIndex=</span><span class="s">"{x:Bind View.ZListView,Mode=OneWay}"</span><span class="nt">&gt;</span>
</code></pre></div></div>

<p>在List</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>            <span class="nt">&lt;Grid</span> <span class="na">Grid.Column=</span><span class="s">"{x:Bind View.GridInt,Mode=OneWay}"</span>
                  <span class="na">Canvas.ZIndex=</span><span class="s">"{x:Bind View.ZFrame,Mode=OneWay}"</span><span class="nt">&gt;</span>
</code></pre></div></div>

<p>我们需要做一点修改，在我们的内容没有，我们是不需要返回键的，那么这时的返回键可以作为按两次退出，这个可以看 <code class="language-plaintext highlighter-rouge">http://blog.csdn.net/xuzhongxuan/article/details/49962705</code>，实际就是写一个字段存储来判断在一段时间是否点击两次。</p>

<p>如果我们按返回，但是我们撸了一半，假如我们是页面跳转，不使用我源码，那么加上 NavigationCacheMode ，保存页面，这样不会让页面现在的选择重新</p>

<h2 id="左右的列表和内容的相互操作">左右的列表和内容的相互操作</h2>

<p>如果需要使用左右两边相互操作，一般建议使用 MVVM 然后绑定 ViewModel ，通过 ViewModel 可以直接操作两边，因为 ViewModel 知道左右的数据。这也是我建议的。</p>

<p>关于 MVVM 可以看这个博客 http://lindexi.oschina.io/lindexi//post/win10-uwp-MVVM%E5%85%A5%E9%97%A8/</p>

<p>下面说下English，其实是Google翻译，因为我这个遇到一个用英文问我的人，不知道是不是，反正就直接翻译</p>

<h1 id="english-1">English</h1>

<p>I make a Easy MasterDetail to use.It’s very easy,and I has not yet been see the other easier that it.</p>

<p>In big screen and the widescreen,we have a Grid with  two columns.And the left is list and the right is content.</p>

<p>The content is an Image and a Frame.If not content,show Image,else show content.</p>

<p>In narrowscreen,we make the list and content in a col.If has content ,the content’s Zindex is greater than the list.And if click the backButton ,the List’s zindex is greater than content.</p>

<p>We make the list’s background white,so if the list zindex is grerater than content and we can’t see content.</p>

<p>We have bool value is hasFrame ,if we has content ,it is true,else false.In the windows be narrow ,if the hasFrame==true ,we make Content’s zindex greater than list.</p>

<p>We can change the model for your class and write ObservableCollection.In <code class="language-plaintext highlighter-rouge">MasterClick</code> ,we can make Navigate.</p>

<p>If something perplexes you,mailto lindexi_gd@163.com.</p>

:ET