I"‡L<p>Now we are making a solution that has to get the package reference. But the version of package reference is a range and the default version parser need input a version but not a version range.
This post will tell you how to parse the version range string to reference version.</p>

<!--more-->

<!-- CreateTime:2019/8/31 16:55:58 -->

<!-- Ê†áÁ≠æÔºöC# Ôºådotnetcore -->

<p>The format for reference version is like this</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="m">2.1</span><span class="p">.</span><span class="m">0.293</span><span class="p">,</span><span class="m">3.0</span><span class="p">)</span>
<span class="p">[</span><span class="m">1.1</span><span class="p">.</span><span class="m">0.34</span><span class="p">,</span><span class="m">2.0</span><span class="p">)</span>
<span class="p">(</span><span class="m">1.1</span><span class="p">.</span><span class="m">0.34</span><span class="p">,</span><span class="m">2.0</span><span class="p">]</span>
<span class="m">2.1</span>

</code></pre></div></div>

<p>For parse the reference version string, we should make some property.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">ReferenceVersion</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nf">ReferenceVersion</span><span class="p">(</span><span class="n">Version</span> <span class="n">version</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Version</span> <span class="p">=</span> <span class="n">version</span><span class="p">;</span>
            <span class="n">MinVersion</span> <span class="p">=</span> <span class="n">version</span><span class="p">;</span>
            <span class="n">MaxVersion</span> <span class="p">=</span> <span class="n">version</span><span class="p">;</span>
            <span class="n">IsIncludeMaxVersion</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
            <span class="n">IsIncludeMinVersion</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="nf">ReferenceVersion</span><span class="p">(</span><span class="n">Version</span> <span class="n">minVersion</span><span class="p">,</span> <span class="n">Version</span> <span class="n">maxVersion</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">isIncludeMinVersion</span><span class="p">,</span>
            <span class="kt">bool</span> <span class="n">isIncludeMaxVersion</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Version</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
            <span class="n">MinVersion</span> <span class="p">=</span> <span class="n">minVersion</span><span class="p">;</span>
            <span class="n">MaxVersion</span> <span class="p">=</span> <span class="n">maxVersion</span><span class="p">;</span>
            <span class="n">IsIncludeMinVersion</span> <span class="p">=</span> <span class="n">isIncludeMinVersion</span><span class="p">;</span>
            <span class="n">IsIncludeMaxVersion</span> <span class="p">=</span> <span class="n">isIncludeMaxVersion</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="n">Version</span> <span class="n">Version</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="n">Version</span> <span class="n">MinVersion</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="n">Version</span> <span class="n">MaxVersion</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="kt">bool</span> <span class="n">IsIncludeMinVersion</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="kt">bool</span> <span class="n">IsIncludeMaxVersion</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>I will use regex to get the string and parse the string to version.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      <span class="k">public</span> <span class="k">static</span> <span class="n">ReferenceVersion</span> <span class="nf">Parser</span><span class="p">(</span><span class="kt">string</span> <span class="n">str</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">_regex</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">_regex</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Regex</span><span class="p">(</span><span class="s">@"([(|\[])([\d|.]*),([\d|.]*)([)|\]])"</span><span class="p">,</span> <span class="n">RegexOptions</span><span class="p">.</span><span class="n">Compiled</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="kt">var</span> <span class="n">res</span> <span class="p">=</span> <span class="n">_regex</span><span class="p">.</span><span class="nf">Match</span><span class="p">(</span><span class="n">str</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">res</span><span class="p">.</span><span class="n">Success</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="kt">var</span> <span class="n">isIncludeMinVersion</span> <span class="p">=</span> <span class="n">res</span><span class="p">.</span><span class="n">Groups</span><span class="p">[</span><span class="m">1</span><span class="p">].</span><span class="n">Value</span><span class="p">;</span>
                <span class="kt">var</span> <span class="n">minVersion</span> <span class="p">=</span> <span class="n">res</span><span class="p">.</span><span class="n">Groups</span><span class="p">[</span><span class="m">2</span><span class="p">].</span><span class="n">Value</span><span class="p">;</span>
                <span class="kt">var</span> <span class="n">maxVersion</span> <span class="p">=</span> <span class="n">res</span><span class="p">.</span><span class="n">Groups</span><span class="p">[</span><span class="m">3</span><span class="p">].</span><span class="n">Value</span><span class="p">;</span>
                <span class="kt">var</span> <span class="n">isIncludeMaxVersion</span> <span class="p">=</span> <span class="n">res</span><span class="p">.</span><span class="n">Groups</span><span class="p">[</span><span class="m">4</span><span class="p">].</span><span class="n">Value</span><span class="p">;</span>

                <span class="k">return</span> <span class="k">new</span> <span class="nf">ReferenceVersion</span>
                <span class="p">(</span>
                    <span class="kt">string</span><span class="p">.</span><span class="nf">IsNullOrEmpty</span><span class="p">(</span><span class="n">minVersion</span><span class="p">)</span> <span class="p">?</span> <span class="k">null</span> <span class="p">:</span> <span class="n">Version</span><span class="p">.</span><span class="nf">Parse</span><span class="p">(</span><span class="n">minVersion</span><span class="p">),</span>
                    <span class="kt">string</span><span class="p">.</span><span class="nf">IsNullOrEmpty</span><span class="p">(</span><span class="n">maxVersion</span><span class="p">)</span> <span class="p">?</span> <span class="k">null</span> <span class="p">:</span> <span class="n">Version</span><span class="p">.</span><span class="nf">Parse</span><span class="p">(</span><span class="n">maxVersion</span><span class="p">),</span>
                    <span class="n">isIncludeMinVersion</span><span class="p">.</span><span class="nf">Equals</span><span class="p">(</span><span class="s">"["</span><span class="p">),</span>
                    <span class="n">isIncludeMaxVersion</span><span class="p">.</span><span class="nf">Equals</span><span class="p">(</span><span class="s">"]"</span><span class="p">)</span>
                <span class="p">);</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="k">new</span> <span class="nf">ReferenceVersion</span><span class="p">(</span><span class="n">Version</span><span class="p">.</span><span class="nf">Parse</span><span class="p">(</span><span class="n">str</span><span class="p">));</span>
        <span class="p">}</span>

        <span class="k">private</span> <span class="k">static</span> <span class="n">Regex</span> <span class="n">_regex</span><span class="p">;</span>
</code></pre></div></div>

<p>We can get the reference version in the solution file and know the solution reference package.</p>

<p>Full code:</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="c1">/// &lt;summary&gt;</span>
    <span class="c1">///     ÂºïÁî®ÁöÑÁâàÊú¨</span>
    <span class="c1">/// Áî®Êù•ËΩ¨Êç¢  [2.1.0.293,3.0)„ÄÅ (1.1.0.3,2.0]„ÄÅ 5.2 ÁöÑÁâàÊú¨</span>
    <span class="c1">/// &lt;/summary&gt;</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">ReferenceVersion</span>
    <span class="p">{</span>
        <span class="c1">/// &lt;summary&gt;</span>
        <span class="c1">///     ÂàõÂª∫ÂºïÁî®ÁâàÊú¨</span>
        <span class="c1">/// &lt;/summary&gt;</span>
        <span class="c1">/// &lt;param name="version"&gt;ÁâàÊú¨&lt;/param&gt;</span>
        <span class="k">public</span> <span class="nf">ReferenceVersion</span><span class="p">(</span><span class="n">Version</span> <span class="n">version</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Version</span> <span class="p">=</span> <span class="n">version</span><span class="p">;</span>
            <span class="n">MinVersion</span> <span class="p">=</span> <span class="n">version</span><span class="p">;</span>
            <span class="n">MaxVersion</span> <span class="p">=</span> <span class="n">version</span><span class="p">;</span>
            <span class="n">IsIncludeMaxVersion</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
            <span class="n">IsIncludeMinVersion</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">/// &lt;summary&gt;</span>
        <span class="c1">///     ÂàõÂª∫ÂºïÁî®ÁâàÊú¨</span>
        <span class="c1">/// &lt;/summary&gt;</span>
        <span class="c1">/// &lt;param name="minVersion"&gt;ÊúÄ‰ΩéÁâàÊú¨&lt;/param&gt;</span>
        <span class="c1">/// &lt;param name="maxVersion"&gt;ÊúÄÈ´òÁâàÊú¨&lt;/param&gt;</span>
        <span class="c1">/// &lt;param name="isIncludeMinVersion"&gt;ÊòØÂê¶ÂåÖÊã¨ÊúÄ‰ΩéÁâàÊú¨&lt;/param&gt;</span>
        <span class="c1">/// &lt;param name="isIncludeMaxVersion"&gt;ÊòØÂê¶ÂåÖÊã¨ÊúÄÈ´òÁâàÊú¨&lt;/param&gt;</span>
        <span class="k">public</span> <span class="nf">ReferenceVersion</span><span class="p">(</span><span class="n">Version</span> <span class="n">minVersion</span><span class="p">,</span> <span class="n">Version</span> <span class="n">maxVersion</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">isIncludeMinVersion</span><span class="p">,</span>
            <span class="kt">bool</span> <span class="n">isIncludeMaxVersion</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Version</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
            <span class="n">MinVersion</span> <span class="p">=</span> <span class="n">minVersion</span><span class="p">;</span>
            <span class="n">MaxVersion</span> <span class="p">=</span> <span class="n">maxVersion</span><span class="p">;</span>
            <span class="n">IsIncludeMinVersion</span> <span class="p">=</span> <span class="n">isIncludeMinVersion</span><span class="p">;</span>
            <span class="n">IsIncludeMaxVersion</span> <span class="p">=</span> <span class="n">isIncludeMaxVersion</span><span class="p">;</span>
        <span class="p">}</span>


        <span class="c1">/// &lt;summary&gt;</span>
        <span class="c1">///     ÁâàÊú¨</span>
        <span class="c1">/// &lt;/summary&gt;</span>
        <span class="k">public</span> <span class="n">Version</span> <span class="n">Version</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>

        <span class="c1">/// &lt;summary&gt;</span>
        <span class="c1">///     ÊúÄ‰ΩéÁâàÊú¨</span>
        <span class="c1">/// &lt;/summary&gt;</span>
        <span class="k">public</span> <span class="n">Version</span> <span class="n">MinVersion</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>

        <span class="c1">/// &lt;summary&gt;</span>
        <span class="c1">///     ÊúÄÈ´òÁâàÊú¨</span>
        <span class="c1">/// &lt;/summary&gt;</span>
        <span class="k">public</span> <span class="n">Version</span> <span class="n">MaxVersion</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>

        <span class="c1">/// &lt;summary&gt;</span>
        <span class="c1">///     ÊòØÂê¶ÂåÖÊã¨ÊúÄ‰ΩéÁâàÊú¨</span>
        <span class="c1">/// &lt;/summary&gt;</span>
        <span class="k">public</span> <span class="kt">bool</span> <span class="n">IsIncludeMinVersion</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>

        <span class="c1">/// &lt;summary&gt;</span>
        <span class="c1">///     ÊòØÂê¶ÂåÖÊã¨ÊúÄÈ´òÁâàÊú¨</span>
        <span class="c1">/// &lt;/summary&gt;</span>
        <span class="k">public</span> <span class="kt">bool</span> <span class="n">IsIncludeMaxVersion</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>

        <span class="c1">/// &lt;summary&gt;</span>
        <span class="c1">///     ËΩ¨Êç¢ÁâàÊú¨</span>
        <span class="c1">/// &lt;/summary&gt;</span>
        <span class="c1">/// &lt;param name="str"&gt;&lt;/param&gt;</span>
        <span class="c1">/// &lt;returns&gt;&lt;/returns&gt;</span>
        <span class="k">public</span> <span class="k">static</span> <span class="n">ReferenceVersion</span> <span class="nf">Parser</span><span class="p">(</span><span class="kt">string</span> <span class="n">str</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">_regex</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">_regex</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Regex</span><span class="p">(</span><span class="s">@"([(|\[])([\d|.]*),([\d|.]*)([)|\]])"</span><span class="p">,</span> <span class="n">RegexOptions</span><span class="p">.</span><span class="n">Compiled</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="kt">var</span> <span class="n">res</span> <span class="p">=</span> <span class="n">_regex</span><span class="p">.</span><span class="nf">Match</span><span class="p">(</span><span class="n">str</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">res</span><span class="p">.</span><span class="n">Success</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="kt">var</span> <span class="n">isIncludeMinVersion</span> <span class="p">=</span> <span class="n">res</span><span class="p">.</span><span class="n">Groups</span><span class="p">[</span><span class="m">1</span><span class="p">].</span><span class="n">Value</span><span class="p">;</span>
                <span class="kt">var</span> <span class="n">minVersion</span> <span class="p">=</span> <span class="n">res</span><span class="p">.</span><span class="n">Groups</span><span class="p">[</span><span class="m">2</span><span class="p">].</span><span class="n">Value</span><span class="p">;</span>
                <span class="kt">var</span> <span class="n">maxVersion</span> <span class="p">=</span> <span class="n">res</span><span class="p">.</span><span class="n">Groups</span><span class="p">[</span><span class="m">3</span><span class="p">].</span><span class="n">Value</span><span class="p">;</span>
                <span class="kt">var</span> <span class="n">isIncludeMaxVersion</span> <span class="p">=</span> <span class="n">res</span><span class="p">.</span><span class="n">Groups</span><span class="p">[</span><span class="m">4</span><span class="p">].</span><span class="n">Value</span><span class="p">;</span>

                <span class="k">return</span> <span class="k">new</span> <span class="nf">ReferenceVersion</span>
                <span class="p">(</span>
                    <span class="kt">string</span><span class="p">.</span><span class="nf">IsNullOrEmpty</span><span class="p">(</span><span class="n">minVersion</span><span class="p">)</span> <span class="p">?</span> <span class="k">null</span> <span class="p">:</span> <span class="n">Version</span><span class="p">.</span><span class="nf">Parse</span><span class="p">(</span><span class="n">minVersion</span><span class="p">),</span>
                    <span class="kt">string</span><span class="p">.</span><span class="nf">IsNullOrEmpty</span><span class="p">(</span><span class="n">maxVersion</span><span class="p">)</span> <span class="p">?</span> <span class="k">null</span> <span class="p">:</span> <span class="n">Version</span><span class="p">.</span><span class="nf">Parse</span><span class="p">(</span><span class="n">maxVersion</span><span class="p">),</span>
                    <span class="n">isIncludeMinVersion</span><span class="p">.</span><span class="nf">Equals</span><span class="p">(</span><span class="s">"["</span><span class="p">),</span>
                    <span class="n">isIncludeMaxVersion</span><span class="p">.</span><span class="nf">Equals</span><span class="p">(</span><span class="s">"]"</span><span class="p">)</span>
                <span class="p">);</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="k">new</span> <span class="nf">ReferenceVersion</span><span class="p">(</span><span class="n">Version</span><span class="p">.</span><span class="nf">Parse</span><span class="p">(</span><span class="n">str</span><span class="p">));</span>
        <span class="p">}</span>

        <span class="k">private</span> <span class="k">static</span> <span class="n">Regex</span> <span class="n">_regex</span><span class="p">;</span>
    <span class="p">}</span>

</code></pre></div></div>

:ET