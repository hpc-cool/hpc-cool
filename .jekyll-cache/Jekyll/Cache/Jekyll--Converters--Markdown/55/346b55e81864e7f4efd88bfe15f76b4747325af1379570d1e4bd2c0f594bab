I"Pr<p>本文来告诉大家使用比较底层的方法来实现 WPF 的笔迹橡皮擦</p>

<!--more-->

<!-- CreateTime:2021/3/15 8:41:27 -->

<!-- 发布 -->

<p>在 WPF 里面，对于笔迹来说，应该放在 Stroke 类里面，而不是作为点的集合存储。在 Stroke 类里面将作为管理笔迹的类提供笔迹的渲染和橡皮擦等功能。咱下面将从 Stroke 类开始，自己定义笔迹橡皮擦。阅读本文，你将了解如何自定义橡皮擦，如自定义橡皮擦的外观样式，了解如何不依赖 InkCanvas 来实现笔迹的擦除</p>

<p>原本我是想采用 <a href="https://blog.lindexi.com/post/WPF-%E6%9C%80%E7%AE%80%E9%80%BB%E8%BE%91%E5%AE%9E%E7%8E%B0%E5%A4%9A%E6%8C%87%E9%A1%BA%E6%BB%91%E7%9A%84%E7%AC%94%E8%BF%B9%E4%B9%A6%E5%86%99.html">WPF 最简逻辑实现多指顺滑的笔迹书写</a> 的方式来做笔迹的绘制部分的，但是考虑使用上面博客的方法将会让大家需要多了解很多触摸相关的知识，因此我就简单使用 InkCanvas 来做笔迹的绘制。以下只是将 InkCanvas 作为笔迹的绘制，而橡皮擦部分是咱定制的</p>

<p>在 XAML 中添加一个 InkCanvas 的代码很简单，请看代码</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="nt">&lt;InkCanvas</span> <span class="na">x:Name=</span><span class="s">"InkCanvas"</span><span class="nt">&gt;&lt;/InkCanvas&gt;</span>
</code></pre></div></div>

<p>咱可以从这个 InkCanvas 里面获取当前的笔迹，如下面代码</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">StrokeCollection</span> <span class="n">strokes</span> <span class="p">=</span> <span class="n">InkCanvas</span><span class="p">.</span><span class="n">Strokes</span><span class="p">;</span>
</code></pre></div></div>

<p>这里拿到的 StrokeCollection 是一个集合，这个集合里面包含了多个 Stroke 类，在 WPF 中，一条笔迹就是一个 Stroke 对象。而多个 Stroke 就放在 StrokeCollection 类里面。可以认为是一个笔画就是一个 Stroke 而一个汉字包含了多个笔画，因此一个汉字的笔迹集合就使用 StrokeCollection 表示</p>

<p>通过上面代码就可以拿到 InkCanvas 里面的所有笔迹，接下来就是自定义橡皮擦部分的逻辑</p>

<p>这里的自定义橡皮擦的核心逻辑就是在 InkCanvas 上再放一个 Canvas 容器，在这个 Canvas 容器里面放自定义的橡皮擦的界面。因为这个 Canvas 容器在 InkCanvas 的上方，因此自定义的橡皮擦界面也将会在 InkCanvas 上</p>

<p>在界面里面放一个 Canvas 和一个用 Rectangle 表示的自定义外观的橡皮擦，大家可以使用自己喜欢的控件来代替 Rectangle 控件</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="nt">&lt;InkCanvas</span> <span class="na">x:Name=</span><span class="s">"InkCanvas"</span><span class="nt">&gt;&lt;/InkCanvas&gt;</span>
        <span class="nt">&lt;Canvas</span> <span class="na">x:Name=</span><span class="s">"EraserCanvas"</span> <span class="na">Grid.Row=</span><span class="s">"0"</span> <span class="na">Background=</span><span class="s">"Transparent"</span> <span class="na">Visibility=</span><span class="s">"Collapsed"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;Rectangle</span> <span class="na">x:Name=</span><span class="s">"EraserShape"</span> <span class="na">HorizontalAlignment=</span><span class="s">"Left"</span> 
                       <span class="na">Width=</span><span class="s">"50"</span> <span class="na">Height=</span><span class="s">"100"</span> <span class="na">Fill=</span><span class="s">"Red"</span> <span class="na">VerticalAlignment=</span><span class="s">"Top"</span><span class="nt">&gt;</span>
                <span class="nt">&lt;Rectangle.RenderTransform&gt;</span>
                    <span class="nt">&lt;TranslateTransform</span> <span class="na">x:Name=</span><span class="s">"TranslateTransform"</span><span class="nt">&gt;&lt;/TranslateTransform&gt;</span>
                <span class="nt">&lt;/Rectangle.RenderTransform&gt;</span>
            <span class="nt">&lt;/Rectangle&gt;</span>
        <span class="nt">&lt;/Canvas&gt;</span>
</code></pre></div></div>

<p>可以看到在上面代码中，使用了 RenderTransform 来控制自定义的橡皮擦所在的坐标。上面代码有一个细节是需要设置这个自定义橡皮擦就在容器的左上角上，通过 HorizontalAlignment 和 VerticalAlignment 设置。当然了咱因为是放在 Canvas 容器里面，默认就是在左上角上，但是有个好习惯还是不错的。我就怕你抄代码的时候，用的容器和用的控件默认不是在左上角的</p>

<p>在上面代码中，咱默认的 EraserCanvas 是不可见的，而且背景色是透明的。这是为了默认可以在 InkCanvas 上写，而在点击按钮的时候，才设置 EraserCanvas 可见。在 EraserCanvas 设置背景色是透明的，是为了让 EraserCanvas 可以收到命中测试，也就是收到触摸或鼠标消息</p>

<p>在界面添加一个按钮，用于点击按钮的时候进入橡皮擦模式，如下面代码</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="nt">&lt;StackPanel</span> <span class="na">Grid.Row=</span><span class="s">"1"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;Button</span> <span class="na">Content=</span><span class="s">"进入橡皮擦"</span> <span class="na">Margin=</span><span class="s">"10,10,10,10"</span> <span class="na">Click=</span><span class="s">"Button_OnClick"</span><span class="nt">&gt;&lt;/Button&gt;</span>
        <span class="nt">&lt;/StackPanel&gt;</span>
</code></pre></div></div>

<p>现在的整个界面的代码大概如下</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nt">&lt;Grid&gt;</span>
        <span class="nt">&lt;Grid.RowDefinitions&gt;</span>
            <span class="nt">&lt;RowDefinition&gt;&lt;/RowDefinition&gt;</span>
            <span class="nt">&lt;RowDefinition</span> <span class="na">Height=</span><span class="s">"Auto"</span><span class="nt">&gt;&lt;/RowDefinition&gt;</span>
        <span class="nt">&lt;/Grid.RowDefinitions&gt;</span>
        <span class="nt">&lt;InkCanvas</span> <span class="na">x:Name=</span><span class="s">"InkCanvas"</span><span class="nt">&gt;&lt;/InkCanvas&gt;</span>
        <span class="nt">&lt;Canvas</span> <span class="na">x:Name=</span><span class="s">"EraserCanvas"</span> <span class="na">Grid.Row=</span><span class="s">"0"</span> <span class="na">Background=</span><span class="s">"Transparent"</span> <span class="na">Visibility=</span><span class="s">"Collapsed"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;Rectangle</span> <span class="na">x:Name=</span><span class="s">"EraserShape"</span> <span class="na">HorizontalAlignment=</span><span class="s">"Left"</span> 
                       <span class="na">Width=</span><span class="s">"50"</span> <span class="na">Height=</span><span class="s">"100"</span> <span class="na">Fill=</span><span class="s">"Red"</span> <span class="na">VerticalAlignment=</span><span class="s">"Top"</span><span class="nt">&gt;</span>
                <span class="nt">&lt;Rectangle.RenderTransform&gt;</span>
                    <span class="nt">&lt;TranslateTransform</span> <span class="na">x:Name=</span><span class="s">"TranslateTransform"</span><span class="nt">&gt;&lt;/TranslateTransform&gt;</span>
                <span class="nt">&lt;/Rectangle.RenderTransform&gt;</span>
            <span class="nt">&lt;/Rectangle&gt;</span>
        <span class="nt">&lt;/Canvas&gt;</span>
  
        <span class="nt">&lt;StackPanel</span> <span class="na">Grid.Row=</span><span class="s">"1"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;Button</span> <span class="na">Content=</span><span class="s">"进入橡皮擦"</span> <span class="na">Margin=</span><span class="s">"10,10,10,10"</span> <span class="na">Click=</span><span class="s">"Button_OnClick"</span><span class="nt">&gt;&lt;/Button&gt;</span>
        <span class="nt">&lt;/StackPanel&gt;</span>
    <span class="nt">&lt;/Grid&gt;</span>
</code></pre></div></div>

<p>进入到咱的后台代码逻辑，在点击按钮的时候，才是进入到核心的逻辑里面</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="k">private</span> <span class="k">void</span> <span class="nf">Button_OnClick</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">RoutedEventArgs</span> <span class="n">e</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">EraserCanvas</span><span class="p">.</span><span class="n">Visibility</span> <span class="p">=</span> <span class="n">Visibility</span><span class="p">.</span><span class="n">Visible</span><span class="p">;</span>
        <span class="p">}</span>
</code></pre></div></div>

<p>其实就是让 EraserCanvas 可见，因为 EraserCanvas 放在 InkCanvas 上方，如果 EraserCanvas 可见，那么 EraserCanvas 将会吃掉在 InkCanvas 上的交互，如鼠标或触摸，都会命中到 EraserCanvas 上。因此 InkCanvas 就不能接收到消息，也就无法进入书写了</p>

<p>在 EraserCanvas 监听输入的事件，如下面代码监听了鼠标事件。那么即可在进入橡皮擦模式的时候，在 EraserCanvas 可以接收到输入消息触发代码</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>            <span class="n">EraserCanvas</span><span class="p">.</span><span class="n">MouseDown</span> <span class="p">+=</span> <span class="n">EraserCanvas_MouseDown</span><span class="p">;</span>
            <span class="n">EraserCanvas</span><span class="p">.</span><span class="n">MouseMove</span> <span class="p">+=</span> <span class="n">EraserCanvas_MouseMove</span><span class="p">;</span>
            <span class="n">EraserCanvas</span><span class="p">.</span><span class="n">MouseUp</span> <span class="p">+=</span> <span class="n">EraserCanvas_MouseUp</span><span class="p">;</span>
</code></pre></div></div>

<p>在鼠标按下的时候咱开始进入核心的逻辑，请看代码</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="k">private</span> <span class="n">IncrementalStrokeHitTester</span> <span class="n">_incrementalStrokeHitTester</span><span class="p">;</span>
        <span class="k">private</span> <span class="kt">bool</span> <span class="n">_isDown</span><span class="p">;</span>

        <span class="k">private</span> <span class="k">void</span> <span class="nf">EraserCanvas_MouseDown</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">MouseButtonEventArgs</span> <span class="n">e</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_isDown</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>

            <span class="n">IncrementalStrokeHitTester</span> <span class="n">incrementalStrokeHitTester</span> <span class="p">=</span>
                <span class="n">InkCanvas</span><span class="p">.</span><span class="n">Strokes</span><span class="p">.</span><span class="nf">GetIncrementalStrokeHitTester</span><span class="p">(</span><span class="k">new</span> <span class="nf">RectangleStylusShape</span><span class="p">(</span><span class="n">EraserShape</span><span class="p">.</span><span class="n">ActualWidth</span><span class="p">,</span>
                    <span class="n">EraserShape</span><span class="p">.</span><span class="n">ActualHeight</span><span class="p">));</span>

            <span class="n">_incrementalStrokeHitTester</span> <span class="p">=</span> <span class="n">incrementalStrokeHitTester</span><span class="p">;</span>
            <span class="n">_incrementalStrokeHitTester</span><span class="p">.</span><span class="n">StrokeHit</span> <span class="p">+=</span> <span class="n">IncrementalStrokeHitTester_StrokeHit</span><span class="p">;</span>
        <span class="p">}</span>
</code></pre></div></div>

<p>在 StrokeCollection 里面有一个方法是 GetIncrementalStrokeHitTester 方法，可以通过这个方法获取这段笔迹的命中测试工具。需要传入的是橡皮擦的形状和大小，可以支持的橡皮擦只有矩形和圆形两个。本文这里使用的是矩形的橡皮擦。如果你需要支持自定义形状的橡皮擦，如三角形等，就需要自己用更底层的方式去实现了，也不在本文范围之内</p>

<p>在获取到 IncrementalStrokeHitTester 工具之后，需要监听他的 StrokeHit 事件，这个事件将会在笔迹被擦到的时候触发，这个事件就是咱的核心逻辑了</p>

<p>在鼠标移动的时候，需要给 IncrementalStrokeHitTester 加上当前的触摸移动的点，请看代码</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="k">private</span> <span class="k">void</span> <span class="nf">EraserCanvas_MouseMove</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">MouseEventArgs</span> <span class="n">e</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">_isDown</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="kt">var</span> <span class="n">point</span> <span class="p">=</span> <span class="n">e</span><span class="p">.</span><span class="nf">GetPosition</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
                <span class="n">TranslateTransform</span><span class="p">.</span><span class="n">X</span> <span class="p">=</span> <span class="n">point</span><span class="p">.</span><span class="n">X</span> <span class="p">-</span> <span class="n">EraserShape</span><span class="p">.</span><span class="n">ActualWidth</span> <span class="p">/</span> <span class="m">2</span><span class="p">;</span>
                <span class="n">TranslateTransform</span><span class="p">.</span><span class="n">Y</span> <span class="p">=</span> <span class="n">point</span><span class="p">.</span><span class="n">Y</span> <span class="p">-</span> <span class="n">EraserShape</span><span class="p">.</span><span class="n">ActualHeight</span> <span class="p">/</span> <span class="m">2</span><span class="p">;</span>

                <span class="n">_incrementalStrokeHitTester</span><span class="p">.</span><span class="nf">AddPoint</span><span class="p">(</span><span class="n">point</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>
</code></pre></div></div>

<p>上面代码有两个功能，一个是移动橡皮擦的外观，另一个是给命中测试工具加上当前的触摸点</p>

<p>在调用 IncrementalStrokeHitTester 的 AddPoint 方法的时候，如果刚好此时命中到了某个笔迹，那么将会触发 StrokeHit 事件</p>

<p>在 StrokeHit 事件里面包含了两个有用的参数，其中一个参数表示的是当前被命中的笔迹是哪个笔迹。另一个是在进行擦除之后新创建的笔迹。也就是说将原有的笔迹，一个笔迹擦为了多个笔迹，当然多个笔迹肯定也包含了零个笔迹</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="k">private</span> <span class="k">void</span> <span class="nf">IncrementalStrokeHitTester_StrokeHit</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">StrokeHitEventArgs</span> <span class="n">e</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">InkCanvas</span><span class="p">.</span><span class="n">Strokes</span><span class="p">.</span><span class="nf">Remove</span><span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">HitStroke</span><span class="p">);</span>
            <span class="n">InkCanvas</span><span class="p">.</span><span class="n">Strokes</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="nf">GetPointEraseResults</span><span class="p">());</span>
        <span class="p">}</span>
</code></pre></div></div>

<p>上面代码的逻辑就是将被擦到的笔迹删除掉，添加为擦出之后新建的多个笔迹。这样就能实现出笔迹被擦的效果。也就是说笔迹被插不是在原有的笔迹上删除某些点，而是将一条笔迹修改为多条的方式进行擦掉</p>

<p>这样的设计的好处在于撤销重做的功能很好做，因为原有的笔迹是不动的，是通过替换笔迹的形式，因此只需要保存笔迹的对象即可</p>

<p>在鼠标抬起的时候，可以清理一下橡皮擦的逻辑。当然在我的业务里面，抬起鼠标就是等于橡皮擦结束了</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="k">private</span> <span class="k">void</span> <span class="nf">EraserCanvas_MouseUp</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">MouseButtonEventArgs</span> <span class="n">e</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">EraserCanvas</span><span class="p">.</span><span class="n">Visibility</span> <span class="p">=</span> <span class="n">Visibility</span><span class="p">.</span><span class="n">Collapsed</span><span class="p">;</span>
            <span class="n">_isDown</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>

            <span class="n">_incrementalStrokeHitTester</span><span class="p">.</span><span class="nf">EndHitTesting</span><span class="p">();</span>
            <span class="n">_incrementalStrokeHitTester</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
        <span class="p">}</span>
</code></pre></div></div>

<p>上面代码核心是调用 EndHitTesting 清理一下资源，不调用也可以，不会存在内存泄露</p>

<p>全部的后台代码如下</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">public</span> <span class="k">partial</span> <span class="k">class</span> <span class="nc">MainWindow</span> <span class="p">:</span> <span class="n">Window</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nf">MainWindow</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="nf">InitializeComponent</span><span class="p">();</span>

            <span class="n">EraserCanvas</span><span class="p">.</span><span class="n">MouseDown</span> <span class="p">+=</span> <span class="n">EraserCanvas_MouseDown</span><span class="p">;</span>
            <span class="n">EraserCanvas</span><span class="p">.</span><span class="n">MouseMove</span> <span class="p">+=</span> <span class="n">EraserCanvas_MouseMove</span><span class="p">;</span>
            <span class="n">EraserCanvas</span><span class="p">.</span><span class="n">MouseUp</span> <span class="p">+=</span> <span class="n">EraserCanvas_MouseUp</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">private</span> <span class="n">IncrementalStrokeHitTester</span> <span class="n">_incrementalStrokeHitTester</span><span class="p">;</span>
        <span class="k">private</span> <span class="kt">bool</span> <span class="n">_isDown</span><span class="p">;</span>

        <span class="k">private</span> <span class="k">void</span> <span class="nf">EraserCanvas_MouseDown</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">MouseButtonEventArgs</span> <span class="n">e</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">_isDown</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>

            <span class="n">IncrementalStrokeHitTester</span> <span class="n">incrementalStrokeHitTester</span> <span class="p">=</span>
                <span class="n">InkCanvas</span><span class="p">.</span><span class="n">Strokes</span><span class="p">.</span><span class="nf">GetIncrementalStrokeHitTester</span><span class="p">(</span><span class="k">new</span> <span class="nf">RectangleStylusShape</span><span class="p">(</span><span class="n">EraserShape</span><span class="p">.</span><span class="n">ActualWidth</span><span class="p">,</span>
                    <span class="n">EraserShape</span><span class="p">.</span><span class="n">ActualHeight</span><span class="p">));</span>

            <span class="n">_incrementalStrokeHitTester</span> <span class="p">=</span> <span class="n">incrementalStrokeHitTester</span><span class="p">;</span>
            <span class="n">_incrementalStrokeHitTester</span><span class="p">.</span><span class="n">StrokeHit</span> <span class="p">+=</span> <span class="n">IncrementalStrokeHitTester_StrokeHit</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">private</span> <span class="k">void</span> <span class="nf">EraserCanvas_MouseUp</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">MouseButtonEventArgs</span> <span class="n">e</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">EraserCanvas</span><span class="p">.</span><span class="n">Visibility</span> <span class="p">=</span> <span class="n">Visibility</span><span class="p">.</span><span class="n">Collapsed</span><span class="p">;</span>
            <span class="n">_isDown</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>

            <span class="n">_incrementalStrokeHitTester</span><span class="p">.</span><span class="nf">EndHitTesting</span><span class="p">();</span>
            <span class="n">_incrementalStrokeHitTester</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">private</span> <span class="k">void</span> <span class="nf">Button_OnClick</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">RoutedEventArgs</span> <span class="n">e</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">EraserCanvas</span><span class="p">.</span><span class="n">Visibility</span> <span class="p">=</span> <span class="n">Visibility</span><span class="p">.</span><span class="n">Visible</span><span class="p">;</span>

            <span class="n">TranslateTransform</span><span class="p">.</span><span class="n">X</span> <span class="p">=</span> <span class="p">-</span><span class="m">1000</span><span class="p">;</span>
            <span class="n">TranslateTransform</span><span class="p">.</span><span class="n">Y</span> <span class="p">=</span> <span class="p">-</span><span class="m">1000</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">private</span> <span class="k">void</span> <span class="nf">IncrementalStrokeHitTester_StrokeHit</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">StrokeHitEventArgs</span> <span class="n">e</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">InkCanvas</span><span class="p">.</span><span class="n">Strokes</span><span class="p">.</span><span class="nf">Remove</span><span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">HitStroke</span><span class="p">);</span>
            <span class="n">InkCanvas</span><span class="p">.</span><span class="n">Strokes</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="nf">GetPointEraseResults</span><span class="p">());</span>
        <span class="p">}</span>

        <span class="k">private</span> <span class="k">void</span> <span class="nf">EraserCanvas_MouseMove</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">MouseEventArgs</span> <span class="n">e</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">_isDown</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="kt">var</span> <span class="n">point</span> <span class="p">=</span> <span class="n">e</span><span class="p">.</span><span class="nf">GetPosition</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
                <span class="n">TranslateTransform</span><span class="p">.</span><span class="n">X</span> <span class="p">=</span> <span class="n">point</span><span class="p">.</span><span class="n">X</span> <span class="p">-</span> <span class="n">EraserShape</span><span class="p">.</span><span class="n">ActualWidth</span> <span class="p">/</span> <span class="m">2</span><span class="p">;</span>
                <span class="n">TranslateTransform</span><span class="p">.</span><span class="n">Y</span> <span class="p">=</span> <span class="n">point</span><span class="p">.</span><span class="n">Y</span> <span class="p">-</span> <span class="n">EraserShape</span><span class="p">.</span><span class="n">ActualHeight</span> <span class="p">/</span> <span class="m">2</span><span class="p">;</span>

                <span class="n">_incrementalStrokeHitTester</span><span class="p">.</span><span class="nf">AddPoint</span><span class="p">(</span><span class="n">point</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
</code></pre></div></div>

<p>本文代码放在 <a href="https://github.com/lindexi/lindexi_gd/tree/0339f56a/BallbujawfemNolahelle">github</a> 和 <a href="https://gitee.com/lindexi/lindexi_gd/tree/0339f56a/BallbujawfemNolahelle">gitee</a> 欢迎小伙伴访问</p>

<p>更多触摸请看 <a href="https://blog.lindexi.com/post/WPF-%E8%A7%A6%E6%91%B8%E7%9B%B8%E5%85%B3.html">WPF 触摸相关</a> 更多笔迹相关请看</p>

<ul>
  <li><a href="https://lindexi.gitee.io/post/WPF-%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86.html">WPF 渲染原理</a></li>
  <li><a href="https://blog.lindexi.com/post/%E9%AB%98%E6%80%A7%E8%83%BD%E7%AC%94%E8%BF%B9%E5%8E%9F%E7%90%86.html">高性能笔迹原理</a></li>
  <li><a href="https://blog.lindexi.com/post/WPF-%E9%AB%98%E6%80%A7%E8%83%BD%E7%AC%94.html">WPF 高性能笔</a></li>
  <li><a href="https://blog.lindexi.com/post/WPF-%E9%AB%98%E9%80%9F%E4%B9%A6%E5%86%99-StylusPlugIn-%E5%8E%9F%E7%90%86.html">WPF 高速书写 StylusPlugIn 原理</a></li>
  <li><a href="https://blog.lindexi.com/post/WPF-%E6%9C%80%E5%B0%8F%E7%9A%84%E4%BB%A3%E7%A0%81%E4%BD%BF%E7%94%A8-DynamicRenderer-%E4%B9%A6%E5%86%99.html">WPF 最小的代码使用 DynamicRenderer 书写</a></li>
  <li><a href="https://blog.lindexi.com/post/WPF-%E4%BD%BF%E7%94%A8-Composition-API-%E5%81%9A%E9%AB%98%E6%80%A7%E8%83%BD%E6%B8%B2%E6%9F%93.html">WPF 使用 Composition API 做高性能渲染</a></li>
  <li><a href="https://blog.lindexi.com/post/WPF-%E4%BD%BF%E7%94%A8-Win2d-%E6%B8%B2%E6%9F%93.html">WPF 使用 Win2d 渲染</a></li>
  <li><a href="https://blog.lindexi.com/post/win10-uwp-win2d-CanvasVirtualControl-%E4%B8%8E-CanvasAnimatedControl.html">win10 uwp win2d CanvasVirtualControl 与 CanvasAnimatedControl</a></li>
  <li><a href="https://blog.lindexi.com/post/WPF-%E6%9C%80%E7%AE%80%E9%80%BB%E8%BE%91%E5%AE%9E%E7%8E%B0%E5%A4%9A%E6%8C%87%E9%A1%BA%E6%BB%91%E7%9A%84%E7%AC%94%E8%BF%B9%E4%B9%A6%E5%86%99.html">WPF 最简逻辑实现多指顺滑的笔迹书写</a></li>
  <li><a href="https://blog.lindexi.com/post/WPF-%E7%AC%94%E8%BF%B9%E8%A7%A6%E6%91%B8%E7%82%B9%E6%94%B6%E9%9B%86%E5%B7%A5%E5%85%B7.html">WPF 笔迹触摸点收集工具</a></li>
  <li><a href="https://blog.lindexi.com/post/WPF-%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84%E7%AC%94%E8%BF%B9%E6%A9%A1%E7%9A%AE%E6%93%A6.html">WPF 实现自定义的笔迹橡皮擦</a></li>
</ul>

:ET