I" <p>我在写一个有趣的 WPF 应用，我想要测试这个 WPF 应用的一个功能，这个功能就是一键点击自动推送 NuGet 包到服务器。我想要做一点自动化的测试，我需要有某个假装是 NuGet 的服务器用来接收我这个应用推送的 NuGet 包。用 ASP.NET Core 写一个假装的 NuGet 服务器，支持被 NuGet 推送包是特别简单的，本文就来和大家说说这个后台如何写</p>

<!--more-->

<!-- CreateTime:4/5/2020 3:39:34 PM -->

<p>其实有现成的整个 NuGet 服务器，包含了包的列举和上传等功能，这就是 <a href="https://github.com/loic-sharma/BaGet">BaGet</a> 项目，但是这个项目存在的问题是太大了，我想要做到自动测试里面去，又有很多有趣的逻辑需要写</p>

<p>那么自己从零开始写一个 NuGet 服务器，这个服务器只有一个功能就是接收 NuGet 推送的包，这个工作量大不大？在使用 ASP.NET Core 时只能说工作量特别小</p>

<p>下面让我用 3 分钟告诉大家如何在 asp dotnet core 里面写一个支持被推送 nuget 包的服务器</p>

<p>首先是创建一个空白的工程，此时这个功能请去掉 https 的逻辑，注意去掉 Startup.cs 的重定向逻辑。先跑通过了 http 之后小伙伴自己再去配置 https 哦</p>

<p>根据 <a href="https://docs.microsoft.com/en-us/nuget/api/package-publish-resource">官方文档</a> 说的，默认的 NuGet 的上传文件就是通过发送一个 multipart form data 数据，发送到制定的源里面，例如我准备推送 <a href="https://github.com/lindexi/ant-design-blazor">ant-design-blazor.nupkg</a> 库的时候，通过下面代码</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nuget push -Source http://localhost:49614/api/v2/package AntBlazor.0.0.1.nupkg -ApiKey 123
</code></pre></div></div>

<p>将会向服务器 <code class="language-plaintext highlighter-rouge">http://localhost:49614/api/v2/package</code> 发送一个 multipart form data 数据，这个数据里面只包含了一个文件信息</p>

<p>在 asp dotnet core 可以通过下面代码接收 form 表单信息</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="p">[</span><span class="n">HttpPut</span><span class="p">]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">Push</span><span class="p">([</span><span class="n">FromForm</span><span class="p">]</span><span class="n">FilePackage</span> <span class="n">package</span><span class="p">)</span>
        <span class="p">{</span>

        <span class="p">}</span>
</code></pre></div></div>

<p>注意加上 FromForm 特性，如果没有加上特性那么将会返回客户端 415 Unsupported Media Type 信息</p>

<p>这里的 FilePackage 的定义如下</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">public</span> <span class="k">class</span> <span class="nc">FilePackage</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="n">IFormFile</span> <span class="n">Package</span> <span class="p">{</span> <span class="k">set</span><span class="p">;</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
</code></pre></div></div>

<p>此时从参数里面拿到的 package 属性就是客户端上传的对应的 NuGet 库</p>

<p>修改一下控制器的路径，这样才好假装这是一个 NuGet 服务器</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="p">[</span><span class="n">ApiController</span><span class="p">]</span>
    <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"api/v2/[controller]"</span><span class="p">)]</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">PackageController</span> <span class="p">:</span> <span class="n">ControllerBase</span>
    <span class="p">{</span>
        <span class="p">[</span><span class="n">HttpPut</span><span class="p">]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">Push</span><span class="p">([</span><span class="n">FromForm</span><span class="p">]</span><span class="n">FilePackage</span> <span class="n">package</span><span class="p">)</span>
        <span class="p">{</span>
        	<span class="c1">// 代码</span>
        <span class="p">}</span>
    <span class="p">}</span>
</code></pre></div></div>

<p>这样就完成了制作一个假装的 NuGet 上传服务器了</p>

<p>其实如果不从参数里面获取客户端上传的 NuGet 库，还可以通过 HttpContext.Request.Form 拿到，请看代码</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>            <span class="kt">var</span> <span class="n">packageFile</span> <span class="p">=</span> <span class="n">package</span><span class="p">.</span><span class="n">Package</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">packageFile</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">packageFile</span> <span class="p">=</span> <span class="n">HttpContext</span><span class="p">.</span><span class="n">Request</span><span class="p">.</span><span class="n">Form</span><span class="p">.</span><span class="n">Files</span><span class="p">.</span><span class="nf">FirstOrDefault</span><span class="p">();</span>
            <span class="p">}</span>
</code></pre></div></div>

<p>而将 IFormFile 保存到本地也很简单，请看代码</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>            <span class="kt">var</span> <span class="n">file</span> <span class="p">=</span> <span class="n">Path</span><span class="p">.</span><span class="nf">GetTempFileName</span><span class="p">();</span>
            <span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">stream</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">FileStream</span><span class="p">(</span><span class="n">file</span><span class="p">,</span> <span class="n">FileMode</span><span class="p">.</span><span class="n">OpenOrCreate</span><span class="p">))</span>
            <span class="p">{</span>
                <span class="k">await</span> <span class="n">packageFile</span><span class="p">.</span><span class="nf">CopyToAsync</span><span class="p">(</span><span class="n">stream</span><span class="p">);</span>
            <span class="p">}</span>
</code></pre></div></div>

<p>大概用不到3分钟就能完成一个假装的 NuGet 服务器</p>

<p>细心的小伙伴还发现了刚才的命令行有添加 ApiKey 信息，这个信息可以偷偷在 HttpContext.Request.Headers 拿到</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>             <span class="kt">var</span> <span class="n">key</span> <span class="p">=</span> <span class="n">HttpContext</span><span class="p">.</span><span class="n">Request</span><span class="p">.</span><span class="n">Headers</span><span class="p">[</span><span class="s">"X-NuGet-ApiKey"</span><span class="p">];</span>
</code></pre></div></div>

<p>本文代码放在 <a href="https://github.com/lindexi/lindexi_gd/tree/457ebad9ce3895bde7c76ae60bd8c4c4be6f93b4/AluwemjealayCheedeaweabewairhur">github</a> 欢迎小伙伴访问</p>

<p>顺便广告一下 <a href="https://github.com/ElderJames/ant-design-blazor">ant-design-blazor</a> 这个使用 Blazor 的 ant 界面库，欢迎小伙伴关注</p>

:ET