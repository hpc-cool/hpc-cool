I"@<p>本文来告诉大家我实际使用基准测试的在 .NET Core 3.1 的链表 LinkedList 和 Dictionary 字典的在元素增删的性能对比</p>

<!--more-->

<!-- CreateTime:2020/12/23 12:39:56 -->

<!-- 发布 -->

<p>从算法分析上，其实字典和链表在时间上的性能是差不多的，甚至可以认为字典的速度会比链表更高。但是从空间上，如果一边增加元素一边删除元素那还是链表省空间。同时在字典空间满了之后，修改字典容量会比链表使用更多的时间</p>

<p>以下是我用不够严谨的基准性能测试的数据</p>

<p>下面是对比一边加入元素一边删除元素的性能</p>

<table>
  <thead>
    <tr>
      <th>Method</th>
      <th style="text-align: right">Mean</th>
      <th style="text-align: right">Error</th>
      <th style="text-align: right">StdDev</th>
      <th style="text-align: right">Ratio</th>
      <th style="text-align: right">RatioSD</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>‘LinkedList’</td>
      <td style="text-align: right">2,424.9 us</td>
      <td style="text-align: right">28.53 us</td>
      <td style="text-align: right">23.83 us</td>
      <td style="text-align: right">?</td>
      <td style="text-align: right">?</td>
    </tr>
    <tr>
      <td>‘Dictionary’</td>
      <td style="text-align: right">686.0 us</td>
      <td style="text-align: right">5.61 us</td>
      <td style="text-align: right">4.97 us</td>
      <td style="text-align: right">1.00</td>
      <td style="text-align: right">0.00</td>
    </tr>
  </tbody>
</table>

<p>下面是将元素完全加入之后再删除全部删除的性能对比</p>

<table>
  <thead>
    <tr>
      <th>Method</th>
      <th style="text-align: right">Mean</th>
      <th style="text-align: right">Error</th>
      <th style="text-align: right">StdDev</th>
      <th style="text-align: right">Ratio</th>
      <th style="text-align: right">RatioSD</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>‘LinkedList’</td>
      <td style="text-align: right">2.582 ms</td>
      <td style="text-align: right">0.0303 ms</td>
      <td style="text-align: right">0.0253 ms</td>
      <td style="text-align: right">?</td>
      <td style="text-align: right">?</td>
    </tr>
    <tr>
      <td>‘Dictionary’</td>
      <td style="text-align: right">1.366 ms</td>
      <td style="text-align: right">0.0192 ms</td>
      <td style="text-align: right">0.0170 ms</td>
      <td style="text-align: right">1.00</td>
      <td style="text-align: right">0.00</td>
    </tr>
  </tbody>
</table>

<p>仅加入元素的性能对比</p>

<table>
  <thead>
    <tr>
      <th>Method</th>
      <th style="text-align: right">Mean</th>
      <th style="text-align: right">Error</th>
      <th style="text-align: right">StdDev</th>
      <th style="text-align: right">Ratio</th>
      <th style="text-align: right">RatioSD</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>‘LinkedList’</td>
      <td style="text-align: right">2.371 ms</td>
      <td style="text-align: right">0.0466 ms</td>
      <td style="text-align: right">0.0697 ms</td>
      <td style="text-align: right">0.83</td>
      <td style="text-align: right">0.02</td>
    </tr>
    <tr>
      <td>‘Dictionary’</td>
      <td style="text-align: right">2.855 ms</td>
      <td style="text-align: right">0.0380 ms</td>
      <td style="text-align: right">0.0317 ms</td>
      <td style="text-align: right">1.00</td>
      <td style="text-align: right">0.00</td>
    </tr>
  </tbody>
</table>

<p>通过测试可以看到，只有在加入元素的性能，链表的性能才会比字典快一点点。而如果包含了删除，那么性能还是字典强</p>

<p>本文代码放在<a href="https://github.com/lindexi/lindexi_gd/tree/aa1ba2b209cd484e9b17d2fe43102f5e7e1fc3e5/HurnabahearwhawJehearhefena">github</a>欢迎小伙伴访问</p>

<p>本文的测试本来是为了给 WPF 框架做性能优化使用的，请看 <a href="https://blog.lindexi.com/post/dotnet-%E8%AF%BB-WPF-%E6%BA%90%E4%BB%A3%E7%A0%81%E7%AC%94%E8%AE%B0-AppDomainShutdownMonitor-%E7%9A%84%E8%AE%BE%E8%AE%A1.html">dotnet 读 WPF 源代码笔记 AppDomainShutdownMonitor 的设计</a> 但实际发现使用字典性能更好</p>

<p>本文的测试仅仅只是适用于 WPF 的 AppDomainShutdownMonitor 类的情况，不代表其他业务下依然是字典更优</p>

:ET