I"Mq<p>有时候我们的网络很垃圾，我的的UWP要在第一次打开网络图片，就把图片存放到本地，下次可以从本地打开。
有时候用户使用的是流量网络，不能每次都联网下载。
我们不得在应用存放用户打开的图片。
这就是先把图片下载，然后显示出来，存放到本地，接着下次要使用就可以从本地获取。
最好这个和我们用户是透明，我们不知道图片在哪，是本地还是网络，只要给一个Uri就有一个图片。</p>

<!--more-->

<!-- CreateTime:2019/9/2 12:57:38 -->

<div id="toc"></div>

<p>这里图片我用BitmapImage，Uri是输入网络的</p>

<h2 id="下载图片">下载图片</h2>

<p>图片也是和其他一样，我们可以简单用系统给的网络web下载。</p>

<p>我们需要输入Uri，然后把图片下载。</p>

<p>图片要显示，需要SetSourceAsync，他需要的参数IRandomAccessStream，而这个需要Buffer写数据，不能用byte，我开始用的<code class="language-plaintext highlighter-rouge">System.Net.Http</code>没有获取Buffer方法，于是我查了垃圾wr，最后用<code class="language-plaintext highlighter-rouge">Windows.Web.Http</code></p>

<p>先获取图片</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
                <span class="n">Windows</span><span class="p">.</span><span class="n">Web</span><span class="p">.</span><span class="n">Http</span><span class="p">.</span><span class="n">HttpClient</span> <span class="n">http</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Windows</span><span class="p">.</span><span class="n">Web</span><span class="p">.</span><span class="n">Http</span><span class="p">.</span><span class="nf">HttpClient</span><span class="p">();</span>

                <span class="n">IBuffer</span> <span class="n">buffer</span> <span class="p">=</span> <span class="k">await</span> <span class="n">http</span><span class="p">.</span><span class="nf">GetBufferAsync</span><span class="p">(</span><span class="n">uri</span><span class="p">);</span>

                <span class="n">BitmapImage</span> <span class="n">img</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">BitmapImage</span><span class="p">();</span>

                <span class="k">using</span> <span class="p">(</span><span class="n">IRandomAccessStream</span> <span class="n">stream</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">InMemoryRandomAccessStream</span><span class="p">())</span>

                <span class="p">{</span>

                    <span class="k">await</span> <span class="n">stream</span><span class="p">.</span><span class="nf">WriteAsync</span><span class="p">(</span><span class="n">buffer</span><span class="p">);</span>

                    <span class="n">stream</span><span class="p">.</span><span class="nf">Seek</span><span class="p">(</span><span class="m">0</span><span class="p">);</span>

                    <span class="k">await</span> <span class="n">img</span><span class="p">.</span><span class="nf">SetSourceAsync</span><span class="p">(</span><span class="n">stream</span><span class="p">);</span>

                    <span class="k">await</span> <span class="nf">StorageImageFolder</span><span class="p">(</span><span class="n">stream</span><span class="p">,</span> <span class="n">uri</span><span class="p">);</span>

                    <span class="k">return</span> <span class="n">img</span><span class="p">;</span>

                <span class="p">}</span>

</code></pre></div></div>

<p>StorageImageFolder就是保存图片</p>

<h2 id="保存图片">保存图片</h2>

<p>我们需要知道一个Uri就可以拿到一个图片，但是Uri不能做文件名，于是我用md5</p>

<p>Uwp使用Md5，可以去看我写的文章</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
        <span class="k">private</span> <span class="k">static</span> <span class="kt">string</span> <span class="nf">Md5</span><span class="p">(</span><span class="kt">string</span> <span class="n">str</span><span class="p">)</span>

        <span class="p">{</span>

            <span class="n">HashAlgorithmProvider</span> <span class="n">hashAlgorithm</span> <span class="p">=</span>

                 <span class="n">HashAlgorithmProvider</span><span class="p">.</span><span class="nf">OpenAlgorithm</span><span class="p">(</span><span class="n">HashAlgorithmNames</span><span class="p">.</span><span class="n">Md5</span><span class="p">);</span>

            <span class="n">CryptographicHash</span> <span class="n">cryptographic</span> <span class="p">=</span> <span class="n">hashAlgorithm</span><span class="p">.</span><span class="nf">CreateHash</span><span class="p">();</span>

            <span class="n">IBuffer</span> <span class="n">buffer</span> <span class="p">=</span> <span class="n">CryptographicBuffer</span><span class="p">.</span><span class="nf">ConvertStringToBinary</span><span class="p">(</span><span class="n">str</span><span class="p">,</span> <span class="n">BinaryStringEncoding</span><span class="p">.</span><span class="n">Utf8</span><span class="p">);</span>

            <span class="n">cryptographic</span><span class="p">.</span><span class="nf">Append</span><span class="p">(</span><span class="n">buffer</span><span class="p">);</span>

            <span class="k">return</span> <span class="n">CryptographicBuffer</span><span class="p">.</span><span class="nf">EncodeToHexString</span><span class="p">(</span><span class="n">cryptographic</span><span class="p">.</span><span class="nf">GetValueAndReset</span><span class="p">());</span>

        <span class="p">}</span>

</code></pre></div></div>

<p>我们的图片存放在本地，最后放在<code class="language-plaintext highlighter-rouge">ApplicationData.Current.LocalCacheFolder</code></p>

<p>在存放文件，RandomAccessStream需要转byte[]</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
        <span class="k">private</span> <span class="k">static</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">byte</span><span class="p">[</span><span class="k">]&gt;</span> <span class="nf">ConvertIRandomAccessStreamByte</span><span class="p">(</span><span class="n">IRandomAccessStream</span> <span class="n">stream</span><span class="p">)</span>

        <span class="p">{</span>

            <span class="n">DataReader</span> <span class="n">read</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">DataReader</span><span class="p">(</span><span class="n">stream</span><span class="p">.</span><span class="nf">GetInputStreamAt</span><span class="p">(</span><span class="m">0</span><span class="p">));</span>

            <span class="k">await</span> <span class="n">read</span><span class="p">.</span><span class="nf">LoadAsync</span><span class="p">((</span><span class="kt">uint</span><span class="p">)</span><span class="n">stream</span><span class="p">.</span><span class="n">Size</span><span class="p">);</span>

            <span class="kt">byte</span><span class="p">[]</span> <span class="n">temp</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="p">[</span><span class="n">stream</span><span class="p">.</span><span class="n">Size</span><span class="p">];</span>

            <span class="n">read</span><span class="p">.</span><span class="nf">ReadBytes</span><span class="p">(</span><span class="n">temp</span><span class="p">);</span>

            <span class="k">return</span> <span class="n">temp</span><span class="p">;</span>

        <span class="p">}</span>

</code></pre></div></div>

<p>存放文件</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
            <span class="kt">string</span> <span class="n">image</span> <span class="p">=</span> <span class="nf">Md5</span><span class="p">(</span><span class="n">uri</span><span class="p">.</span><span class="n">AbsolutePath</span><span class="p">);</span>

            <span class="n">StorageFile</span> <span class="n">file</span> <span class="p">=</span> <span class="k">await</span> <span class="n">folder</span><span class="p">.</span><span class="nf">CreateFileAsync</span><span class="p">(</span><span class="n">image</span><span class="p">);</span>

            <span class="k">await</span> <span class="n">FileIO</span><span class="p">.</span><span class="nf">WriteBytesAsync</span><span class="p">(</span><span class="n">file</span><span class="p">,</span> <span class="k">await</span> <span class="nf">ConvertIRandomAccessStreamByte</span><span class="p">(</span><span class="n">stream</span><span class="p">));</span>

</code></pre></div></div>

<h2 id="从本地打开">从本地打开</h2>

<p>把Uri转为图片名，打开本地文件</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
            <span class="kt">string</span> <span class="n">name</span> <span class="p">=</span> <span class="nf">Md5</span><span class="p">(</span><span class="n">uri</span><span class="p">.</span><span class="n">AbsolutePath</span><span class="p">);</span>

            <span class="n">StorageFile</span> <span class="n">file</span> <span class="p">=</span> <span class="k">await</span> <span class="n">folder</span><span class="p">.</span><span class="nf">GetFileAsync</span><span class="p">(</span><span class="n">name</span><span class="p">);</span>

            <span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">stream</span> <span class="p">=</span> <span class="k">await</span> <span class="n">file</span><span class="p">.</span><span class="nf">OpenAsync</span><span class="p">(</span><span class="n">FileAccessMode</span><span class="p">.</span><span class="n">Read</span><span class="p">))</span>

            <span class="p">{</span>

                <span class="n">BitmapImage</span> <span class="n">img</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">BitmapImage</span><span class="p">();</span>

                <span class="k">await</span> <span class="n">img</span><span class="p">.</span><span class="nf">SetSourceAsync</span><span class="p">(</span><span class="n">stream</span><span class="p">);</span>

                <span class="k">return</span> <span class="n">img</span><span class="p">;</span>

            <span class="p">}</span>

</code></pre></div></div>

<h2 id="所有代码">所有代码</h2>

<p>第一次使用图片从网络打开，第二次就可以放在本地，不使用网络。</p>

<p>先搜索本地，本地存在就打开，不存在只好从网络打开</p>

<p>函数使用就是<code class="language-plaintext highlighter-rouge">ImageStorage.GetImage(uri);</code></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
    <span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">ImageStorage</span>

    <span class="p">{</span>

        <span class="c1">/// &lt;summary&gt;</span>

        <span class="c1">/// 获取图片</span>

        <span class="c1">/// 如果本地存在，就获取本地</span>

        <span class="c1">/// 如果本地不存在，获取网络</span>

        <span class="c1">/// &lt;/summary&gt;</span>

        <span class="c1">/// &lt;param name="uri"&gt;&lt;/param&gt;</span>

        <span class="c1">/// &lt;returns&gt;&lt;/returns&gt;</span>

        <span class="k">public</span> <span class="k">static</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">BitmapImage</span><span class="p">&gt;</span> <span class="nf">GetImage</span><span class="p">(</span><span class="n">Uri</span> <span class="n">uri</span><span class="p">)</span>

        <span class="p">{</span>

            <span class="k">return</span> <span class="k">await</span> <span class="nf">GetLoacalFolderImage</span><span class="p">(</span><span class="n">uri</span><span class="p">)</span> <span class="p">??</span>

                   <span class="k">await</span> <span class="nf">GetHttpImage</span><span class="p">(</span><span class="n">uri</span><span class="p">);</span>

        <span class="p">}</span>

        <span class="c1">/// &lt;summary&gt;</span>

        <span class="c1">/// 从本地获取图片</span>

        <span class="c1">/// &lt;/summary&gt;</span>

        <span class="c1">/// &lt;param name="uri"&gt;&lt;/param&gt;</span>

        <span class="k">private</span> <span class="k">static</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">BitmapImage</span><span class="p">&gt;</span> <span class="nf">GetLoacalFolderImage</span><span class="p">(</span><span class="n">Uri</span> <span class="n">uri</span><span class="p">)</span>

        <span class="p">{</span>

            <span class="n">StorageFolder</span> <span class="n">folder</span> <span class="p">=</span> <span class="k">await</span> <span class="nf">GetImageFolder</span><span class="p">();</span>

            <span class="kt">string</span> <span class="n">name</span> <span class="p">=</span> <span class="nf">Md5</span><span class="p">(</span><span class="n">uri</span><span class="p">.</span><span class="n">AbsolutePath</span><span class="p">);</span>

            <span class="k">try</span>

            <span class="p">{</span>

                <span class="n">StorageFile</span> <span class="n">file</span> <span class="p">=</span> <span class="k">await</span> <span class="n">folder</span><span class="p">.</span><span class="nf">GetFileAsync</span><span class="p">(</span><span class="n">name</span><span class="p">);</span>

                <span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">stream</span> <span class="p">=</span> <span class="k">await</span> <span class="n">file</span><span class="p">.</span><span class="nf">OpenAsync</span><span class="p">(</span><span class="n">FileAccessMode</span><span class="p">.</span><span class="n">Read</span><span class="p">))</span>

                <span class="p">{</span>

                    <span class="n">BitmapImage</span> <span class="n">img</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">BitmapImage</span><span class="p">();</span>

                    <span class="k">await</span> <span class="n">img</span><span class="p">.</span><span class="nf">SetSourceAsync</span><span class="p">(</span><span class="n">stream</span><span class="p">);</span>

                    <span class="k">return</span> <span class="n">img</span><span class="p">;</span>

                <span class="p">}</span>

            <span class="p">}</span>

            <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span><span class="p">)</span>

            <span class="p">{</span>

                <span class="k">return</span> <span class="k">null</span><span class="p">;</span>

            <span class="p">}</span>

        <span class="p">}</span>

        <span class="k">private</span> <span class="k">static</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">BitmapImage</span><span class="p">&gt;</span> <span class="nf">GetHttpImage</span><span class="p">(</span><span class="n">Uri</span> <span class="n">uri</span><span class="p">)</span>

        <span class="p">{</span>

            <span class="k">try</span>

            <span class="p">{</span>

                <span class="n">Windows</span><span class="p">.</span><span class="n">Web</span><span class="p">.</span><span class="n">Http</span><span class="p">.</span><span class="n">HttpClient</span> <span class="n">http</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Windows</span><span class="p">.</span><span class="n">Web</span><span class="p">.</span><span class="n">Http</span><span class="p">.</span><span class="nf">HttpClient</span><span class="p">();</span>

                <span class="n">IBuffer</span> <span class="n">buffer</span> <span class="p">=</span> <span class="k">await</span> <span class="n">http</span><span class="p">.</span><span class="nf">GetBufferAsync</span><span class="p">(</span><span class="n">uri</span><span class="p">);</span>

                <span class="n">BitmapImage</span> <span class="n">img</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">BitmapImage</span><span class="p">();</span>

                <span class="k">using</span> <span class="p">(</span><span class="n">IRandomAccessStream</span> <span class="n">stream</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">InMemoryRandomAccessStream</span><span class="p">())</span>

                <span class="p">{</span>

                    <span class="k">await</span> <span class="n">stream</span><span class="p">.</span><span class="nf">WriteAsync</span><span class="p">(</span><span class="n">buffer</span><span class="p">);</span>

                    <span class="n">stream</span><span class="p">.</span><span class="nf">Seek</span><span class="p">(</span><span class="m">0</span><span class="p">);</span>

                    <span class="k">await</span> <span class="n">img</span><span class="p">.</span><span class="nf">SetSourceAsync</span><span class="p">(</span><span class="n">stream</span><span class="p">);</span>

                    <span class="k">await</span> <span class="nf">StorageImageFolder</span><span class="p">(</span><span class="n">stream</span><span class="p">,</span> <span class="n">uri</span><span class="p">);</span>

                    <span class="k">return</span> <span class="n">img</span><span class="p">;</span>

                <span class="p">}</span>

            <span class="p">}</span>

            <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span><span class="p">)</span>

            <span class="p">{</span>

                <span class="k">return</span> <span class="k">null</span><span class="p">;</span>

            <span class="p">}</span>

        <span class="p">}</span>

        <span class="k">private</span> <span class="k">static</span> <span class="k">async</span> <span class="n">Task</span> <span class="nf">StorageImageFolder</span><span class="p">(</span><span class="n">IRandomAccessStream</span> <span class="n">stream</span><span class="p">,</span> <span class="n">Uri</span> <span class="n">uri</span><span class="p">)</span>

        <span class="p">{</span>

            <span class="n">StorageFolder</span> <span class="n">folder</span> <span class="p">=</span> <span class="k">await</span> <span class="nf">GetImageFolder</span><span class="p">();</span>

            <span class="kt">string</span> <span class="n">image</span> <span class="p">=</span> <span class="nf">Md5</span><span class="p">(</span><span class="n">uri</span><span class="p">.</span><span class="n">AbsolutePath</span><span class="p">);</span>

            <span class="k">try</span>

            <span class="p">{</span>

                <span class="n">StorageFile</span> <span class="n">file</span> <span class="p">=</span> <span class="k">await</span> <span class="n">folder</span><span class="p">.</span><span class="nf">CreateFileAsync</span><span class="p">(</span><span class="n">image</span><span class="p">);</span>

                <span class="k">await</span> <span class="n">FileIO</span><span class="p">.</span><span class="nf">WriteBytesAsync</span><span class="p">(</span><span class="n">file</span><span class="p">,</span> <span class="k">await</span> <span class="nf">ConvertIRandomAccessStreamByte</span><span class="p">(</span><span class="n">stream</span><span class="p">));</span>

            <span class="p">}</span>

            <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span><span class="p">)</span>

            <span class="p">{</span>

            <span class="p">}</span>

        <span class="p">}</span>

        <span class="k">private</span> <span class="k">static</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">byte</span><span class="p">[</span><span class="k">]&gt;</span> <span class="nf">ConvertIRandomAccessStreamByte</span><span class="p">(</span><span class="n">IRandomAccessStream</span> <span class="n">stream</span><span class="p">)</span>

        <span class="p">{</span>

            <span class="n">DataReader</span> <span class="n">read</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">DataReader</span><span class="p">(</span><span class="n">stream</span><span class="p">.</span><span class="nf">GetInputStreamAt</span><span class="p">(</span><span class="m">0</span><span class="p">));</span>

            <span class="k">await</span> <span class="n">read</span><span class="p">.</span><span class="nf">LoadAsync</span><span class="p">((</span><span class="kt">uint</span><span class="p">)</span><span class="n">stream</span><span class="p">.</span><span class="n">Size</span><span class="p">);</span>

            <span class="kt">byte</span><span class="p">[]</span> <span class="n">temp</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="p">[</span><span class="n">stream</span><span class="p">.</span><span class="n">Size</span><span class="p">];</span>

            <span class="n">read</span><span class="p">.</span><span class="nf">ReadBytes</span><span class="p">(</span><span class="n">temp</span><span class="p">);</span>

            <span class="k">return</span> <span class="n">temp</span><span class="p">;</span>

        <span class="p">}</span>

        <span class="k">private</span> <span class="k">static</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">StorageFolder</span><span class="p">&gt;</span> <span class="nf">GetImageFolder</span><span class="p">()</span>

        <span class="p">{</span>

            <span class="c1">//文件夹</span>

            <span class="kt">string</span> <span class="n">name</span> <span class="p">=</span> <span class="s">"image"</span><span class="p">;</span>

            <span class="n">StorageFolder</span> <span class="n">folder</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>

            <span class="c1">//从本地获取文件夹</span>

            <span class="k">try</span>

            <span class="p">{</span>

                <span class="n">folder</span> <span class="p">=</span> <span class="k">await</span> <span class="n">ApplicationData</span><span class="p">.</span><span class="n">Current</span><span class="p">.</span><span class="n">LocalCacheFolder</span><span class="p">.</span><span class="nf">GetFolderAsync</span><span class="p">(</span><span class="n">name</span><span class="p">);</span>

            <span class="p">}</span>

            <span class="k">catch</span> <span class="p">(</span><span class="n">FileNotFoundException</span><span class="p">)</span>

            <span class="p">{</span>

                <span class="c1">//没找到</span>

                <span class="n">folder</span> <span class="p">=</span> <span class="k">await</span> <span class="n">ApplicationData</span><span class="p">.</span><span class="n">Current</span><span class="p">.</span><span class="n">LocalCacheFolder</span><span class="p">.</span>

                    <span class="nf">CreateFolderAsync</span><span class="p">(</span><span class="n">name</span><span class="p">);</span>

            <span class="p">}</span>

            <span class="k">return</span> <span class="n">folder</span><span class="p">;</span>

        <span class="p">}</span>

        <span class="k">private</span> <span class="k">static</span> <span class="kt">string</span> <span class="nf">Md5</span><span class="p">(</span><span class="kt">string</span> <span class="n">str</span><span class="p">)</span>

        <span class="p">{</span>

            <span class="n">HashAlgorithmProvider</span> <span class="n">hashAlgorithm</span> <span class="p">=</span>

                 <span class="n">HashAlgorithmProvider</span><span class="p">.</span><span class="nf">OpenAlgorithm</span><span class="p">(</span><span class="n">HashAlgorithmNames</span><span class="p">.</span><span class="n">Md5</span><span class="p">);</span>

            <span class="n">CryptographicHash</span> <span class="n">cryptographic</span> <span class="p">=</span> <span class="n">hashAlgorithm</span><span class="p">.</span><span class="nf">CreateHash</span><span class="p">();</span>

            <span class="n">IBuffer</span> <span class="n">buffer</span> <span class="p">=</span> <span class="n">CryptographicBuffer</span><span class="p">.</span><span class="nf">ConvertStringToBinary</span><span class="p">(</span><span class="n">str</span><span class="p">,</span> <span class="n">BinaryStringEncoding</span><span class="p">.</span><span class="n">Utf8</span><span class="p">);</span>

            <span class="n">cryptographic</span><span class="p">.</span><span class="nf">Append</span><span class="p">(</span><span class="n">buffer</span><span class="p">);</span>

            <span class="k">return</span> <span class="n">CryptographicBuffer</span><span class="p">.</span><span class="nf">EncodeToHexString</span><span class="p">(</span><span class="n">cryptographic</span><span class="p">.</span><span class="nf">GetValueAndReset</span><span class="p">());</span>

        <span class="p">}</span>

    <span class="p">}</span>

</code></pre></div></div>

<h2 id="nuget安装">Nuget安装</h2>

<p>Nuget搜索<code class="language-plaintext highlighter-rouge">lindexi.uwp.src.ImageStorage</code></p>

<p>命令行</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Install</span><span class="p">-</span><span class="n">Package</span> <span class="n">lindexi</span><span class="p">.</span><span class="n">uwp</span><span class="p">.</span><span class="n">src</span><span class="p">.</span><span class="n">ImageStorage</span>
</code></pre></div></div>

<h2 id="microsofttoolkituwp">Microsoft.Toolkit.Uwp</h2>

<p>当前图片缓存的功能已经合并到 Microsoft.Toolkit.Uwp 工具，不过里面已经看不到我写的代码了，所以变得更加好用</p>

<p>在最低版本为 16299 之后可以通过 nuget 找到 Microsoft.Toolkit.Uwp 安装，然后可以使用下面的代码判断如果图片已经保存在本地，就从本地读取图片。如果图片没有保存到本地，就从网络下载</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 图片可以保存多久的时间</span>
<span class="n">ImageCache</span><span class="p">.</span><span class="n">Instance</span><span class="p">.</span><span class="n">CacheDuration</span> <span class="p">=</span> <span class="n">TimeSpan</span><span class="p">.</span><span class="nf">FromHours</span><span class="p">(</span><span class="m">24</span><span class="p">);</span>

<span class="c1">// 最多可以在内存存放多少张图片</span>
<span class="n">ImageCache</span><span class="p">.</span><span class="n">Instance</span><span class="p">.</span><span class="n">MaxMemoryCacheCount</span> <span class="p">=</span> <span class="m">100</span><span class="p">;</span>

<span class="kt">var</span> <span class="n">distantUri</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Uri</span><span class="p">(</span><span class="s">"http://www.myserver.com/image.jpg"</span><span class="p">);</span>

<span class="c1">// 如果图片没有在缓存里，将会下载图片。如果图片在缓存里，直接返回图片</span>
<span class="kt">var</span> <span class="n">bitmapImage</span> <span class="p">=</span> <span class="k">await</span> <span class="n">ImageCache</span><span class="p">.</span><span class="n">Instance</span><span class="p">.</span><span class="nf">GetFromCacheAsync</span><span class="p">(</span><span class="n">distantUri</span><span class="p">);</span>

<span class="c1">// 清理缓存</span>
<span class="k">await</span> <span class="n">ImageCache</span><span class="p">.</span><span class="n">Instance</span><span class="p">.</span><span class="nf">ClearAsync</span><span class="p">();</span> 
</code></pre></div></div>

<p><a href="https://docs.microsoft.com/en-us/windows/communitytoolkit/helpers/imagecache">ImageCache</a></p>

:ET