I"?<p>在 .NET Framework 有两个不同的异步方法，一个是 Asynchronous Programming Model (APM) 另一个是 Task-based asynchronous pattern (TAP) 说 APM 和 TAP 估计大家都不认识。其实 APM 就是有成对的 Begin 和 End 方法的异步，而 TAP 就是使用 async 和 await 的异步</p>

<!--more-->

<!-- CreateTime:2019/8/31 16:55:58 -->

<p>从代码上看，使用 async 和 await 的方法比较清真，那么如何从古老的 begin 和 end 异步方法转 task 的异步方法？</p>

<p>在 Task 的 Factory 提供了 FromAsync 方法让大家可以将 Begin 和 End 异步方法转 task 异步，但是这个方法参数很多</p>

<p>在 Begin 的方法里面一般都是这样写的</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">IAsyncResult</span> <span class="nf">BeginFoo</span><span class="p">(</span><span class="err">参数</span> <span class="err">参数</span><span class="m">1</span><span class="p">,</span> <span class="err">参数</span> <span class="err">参数</span><span class="m">2.</span><span class="p">..,</span> <span class="n">AsyncCallback</span> <span class="n">asyncCallback</span><span class="p">,</span> <span class="kt">object</span> <span class="n">state</span><span class="p">)</span>
</code></pre></div></div>

<p>在 End 的方法一般都是这样写的</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">返回值</span> <span class="nf">EndFoo</span> <span class="p">(</span><span class="n">IAsyncResult</span> <span class="n">asyncResult</span><span class="p">);</span>
</code></pre></div></div>

<p>先调用 Begin 方法传入参数，拿到了 IAsyncResult 用于传入 EndFoo 作为参数，同时在 AsyncCallback 可以传入方法完成的方法</p>

<p>在 FromAsync 写起来是相反的，首先需要知道 End 方法的返回值，下面使用 FileStream 作为例子，如 EndRead 是返回 int 可以使用 <code class="language-plaintext highlighter-rouge">Task&lt;int&gt;</code> 的方法</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Task</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;.</span><span class="n">Factory</span><span class="p">.</span><span class="n">FromAsync</span>
</code></pre></div></div>

<p>这样就可以拿到 EndRead 的返回值</p>

<p>在 FromAsync 的第一个参数传入的是 BeginRead 方法，第二个参数是 EndRead 方法，然后加上的 BeginRead 方法需要传入的参数，传入除了 AsyncCallback 之外的其他参数，请看下面代码</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">var</span> <span class="n">task</span> <span class="p">=</span> <span class="n">Task</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;.</span><span class="n">Factory</span><span class="p">.</span><span class="nf">FromAsync</span><span class="p">(</span><span class="n">fileStream</span><span class="p">.</span><span class="n">BeginRead</span><span class="p">,</span> <span class="n">fileStream</span><span class="p">.</span><span class="n">EndRead</span><span class="p">,</span> <span class="n">buffer</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">1024</span><span class="p">,</span> <span class="k">null</span><span class="p">);</span>
</code></pre></div></div>

<p>也就是有 <code class="language-plaintext highlighter-rouge">IAsyncResult BeginFoo(参数 参数1, 参数 参数2..., AsyncCallback asyncCallback, object state)</code> 这个方法，那么在转 async 和 await 异步，可以使用下面代码</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Task</span><span class="p">&lt;</span><span class="err">返回值参数</span><span class="p">&gt;.</span><span class="n">Factory</span><span class="p">.</span><span class="nf">FromAsync</span><span class="p">(</span><span class="n">foo</span><span class="p">.</span><span class="n">BeginFoo</span><span class="p">,</span> <span class="n">foo</span><span class="p">.</span><span class="n">EndFoo</span><span class="p">,</span> <span class="err">参数</span><span class="m">1</span><span class="p">,</span> <span class="err">参数</span><span class="m">2</span> <span class="p">...,</span> <span class="n">state</span><span class="p">)</span>
</code></pre></div></div>

<p><a href="https://www.cnblogs.com/dudu/p/async_await_call_begin_end_method.html">C# 中 async/await 调用传统 Begin/End 异步方法 - dudu - 博客园</a></p>

<p><a href="https://docs.microsoft.com/en-us/dotnet/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm?wt.mc_id=MVP">Asynchronous Programming Model (APM)</a></p>

<p><a href="https://docs.microsoft.com/en-us/dotnet/standard/asynchronous-programming-patterns/task-based-asynchronous-pattern-tap?wt.mc_id=MVP">Task-based Asynchronous Pattern (TAP)</a></p>

:ET