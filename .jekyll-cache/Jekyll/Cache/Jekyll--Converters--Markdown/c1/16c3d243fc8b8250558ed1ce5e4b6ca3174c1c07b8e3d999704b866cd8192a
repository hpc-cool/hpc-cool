I"i<p>本文来安利大家一个超强的库，这个库可以让你的 C# 代码利用上 GPU 显卡的性能，进行一些并行计算。这个库是基于 DirectX12GameEngine 的 ComputeSharp 库。在这个库里面将会动态生成 HLSL 代码，使用着色器的方式在 GPU 上跑起来</p>

<!--more-->

<!-- CreateTime:2020/10/12 20:21:56 -->

<p>这个 ComputeSharp 库在 GitHub 完全开源，请看 <a href="https://github.com/Sergio0694/ComputeSharp">https://github.com/Sergio0694/ComputeSharp</a></p>

<p>在开始之前，按照 dotnet 的基本玩法，先通过 NuGet 安装库，然后使用，咱先来创建一个空白的项目。这个 ComputeSharp 库能支持的 .NET Standard 2.1 和以上的版本</p>

<p>通过 NuGet 安装 ComputeSharp 库，在 NuGet 包命令行输入下面代码</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Install</span><span class="p">-</span><span class="n">Package</span> <span class="n">ComputeSharp</span>
</code></pre></div></div>

<p>或者在 csproj 文件上添加下面代码</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nt">&lt;ItemGroup&gt;</span>
    <span class="nt">&lt;PackageReference</span> <span class="na">Include=</span><span class="s">"ComputeSharp"</span> <span class="na">Version=</span><span class="s">"1.4.1"</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;/ItemGroup&gt;</span>
</code></pre></div></div>

<p>下面使用一个并行给一个 float 数组设置顺序值的例子告诉大家如何使用这个库</p>

<p>先定义 Shader 的实现，请看下面代码</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">public</span> <span class="k">readonly</span> <span class="k">struct</span> <span class="nc">MyShader</span> <span class="p">:</span> <span class="n">IComputeShader</span>
    <span class="p">{</span>
        <span class="c1">// 这是特意的命名，请不要更改</span>
        <span class="k">public</span> <span class="k">readonly</span> <span class="n">ReadWriteBuffer</span><span class="p">&lt;</span><span class="kt">float</span><span class="p">&gt;</span> <span class="n">buffer</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">MyShader</span><span class="p">(</span><span class="n">ReadWriteBuffer</span><span class="p">&lt;</span><span class="kt">float</span><span class="p">&gt;</span> <span class="n">buffer</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="n">buffer</span> <span class="p">=</span> <span class="n">buffer</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">void</span> <span class="nf">Execute</span><span class="p">(</span><span class="n">ThreadIds</span> <span class="n">ids</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">buffer</span><span class="p">[</span><span class="n">ids</span><span class="p">.</span><span class="n">X</span><span class="p">]</span> <span class="p">=</span> <span class="n">ids</span><span class="p">.</span><span class="n">X</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
</code></pre></div></div>

<p>这段代码将会被用来生成 HLSL 代码，因此一些属性的命名是不能更改的</p>

<p>然后从 GPU 中申请一段内存</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>            <span class="c1">// Allocate a writeable buffer on the GPU, with the contents of the array</span>
            <span class="n">ReadWriteBuffer</span><span class="p">&lt;</span><span class="kt">float</span><span class="p">&gt;</span> <span class="n">buffer</span> <span class="p">=</span> <span class="n">Gpu</span><span class="p">.</span><span class="n">Default</span><span class="p">.</span><span class="n">AllocateReadWriteBuffer</span><span class="p">&lt;</span><span class="kt">float</span><span class="p">&gt;(</span><span class="m">1000</span><span class="p">);</span>
</code></pre></div></div>

<p>接着在 GPU 上运行</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>            <span class="c1">// Run the shader</span>
            <span class="n">Gpu</span><span class="p">.</span><span class="n">Default</span><span class="p">.</span><span class="nf">For</span><span class="p">(</span><span class="m">1000</span><span class="p">,</span> <span class="k">new</span> <span class="nf">MyShader</span><span class="p">(</span><span class="n">buffer</span><span class="p">));</span>
</code></pre></div></div>

<p>运行完成之后，可以使用下面代码拿到值</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>            <span class="c1">// Get the data back</span>
            <span class="kt">float</span><span class="p">[]</span> <span class="n">array</span> <span class="p">=</span> <span class="n">buffer</span><span class="p">.</span><span class="nf">GetData</span><span class="p">();</span>
</code></pre></div></div>

<p>使用下面代码可以输出数组里面的值</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>            <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="kt">string</span><span class="p">.</span><span class="nf">Join</span><span class="p">(</span><span class="s">","</span><span class="p">,</span> <span class="n">array</span><span class="p">.</span><span class="nf">Select</span><span class="p">(</span><span class="n">temp</span> <span class="p">=&gt;</span> <span class="n">temp</span><span class="p">.</span><span class="nf">ToString</span><span class="p">())));</span>
</code></pre></div></div>

<p>此时可以看到这个数组里面的值都按照顺序被设置了对应的值</p>

<p>本文代码放在<a href="https://github.com/lindexi/lindexi_gd/tree/90d5f5dd/QeyirakarkuWherfoqaybal">github</a>欢迎小伙伴访问</p>

<p>还有更多高级的用法，还请看 <a href="https://github.com/Sergio0694/ComputeSharp">https://github.com/Sergio0694/ComputeSharp</a></p>

:ET