I"qB<p>本题要求实现一个函数</p>

<!--more-->

<!-- CreateTime:2018/6/29 15:24:28 -->

<!-- math -->

<!-- 标签： C,算法 -->

<p>本题要求实现一个函数，计算阶数为<code class="language-plaintext highlighter-rouge">n</code>，系数为<code class="language-plaintext highlighter-rouge">a[0]</code> <code class="language-plaintext highlighter-rouge">...</code> <code class="language-plaintext highlighter-rouge">a[n]</code>的多项式$f(x)=\sum_{i=0}^{n}(a[i]\times x^i)$在<code class="language-plaintext highlighter-rouge">x</code>点的值。</p>

<p>函数接口定义</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	<span class="kt">double</span> <span class="nf">f</span><span class="p">(</span> <span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="kt">double</span> <span class="n">a</span><span class="p">[],</span> <span class="kt">double</span> <span class="n">x</span> <span class="p">);</span>
</code></pre></div></div>

<p>其中<code class="language-plaintext highlighter-rouge">n</code>是多项式的阶数，<code class="language-plaintext highlighter-rouge">a[]</code>中存储系数，<code class="language-plaintext highlighter-rouge">x</code>是给定点。函数须返回多项式<code class="language-plaintext highlighter-rouge">f(x)</code>的值。</p>

<p>裁判测试程序样例</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;stdio.h&gt;
</span>
<span class="cp">#define MAXN 10
</span>
<span class="kt">double</span> <span class="nf">f</span><span class="p">(</span> <span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="kt">double</span> <span class="n">a</span><span class="p">[],</span> <span class="kt">double</span> <span class="n">x</span> <span class="p">);</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">i</span><span class="p">;</span>
    <span class="kt">double</span> <span class="n">a</span><span class="p">[</span><span class="n">MAXN</span><span class="p">],</span> <span class="n">x</span><span class="p">;</span>
	
    <span class="n">scanf</span><span class="p">(</span><span class="s">"%d %lf"</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">n</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">x</span><span class="p">);</span>
    <span class="k">for</span> <span class="p">(</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span> <span class="p">)</span>
        <span class="n">scanf</span><span class="p">(</span><span class="err">“</span><span class="o">%</span><span class="n">lf</span><span class="err">”</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"%.1f</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">f</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">x</span><span class="p">));</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="cm">/* 你的代码将被嵌在这里 */</span>
</code></pre></div></div>

<p>输入样例</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="m">2</span> <span class="m">1.1</span>
<span class="m">1</span> <span class="m">2.5</span> <span class="p">-</span><span class="m">38.7</span>
</code></pre></div></div>

<p>输出样例</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">-</span><span class="m">43.1</span>
</code></pre></div></div>

<p>可通过代码</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kt">double</span> <span class="nf">f</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="kt">double</span> <span class="n">a</span><span class="p">[],</span> <span class="kt">double</span> <span class="n">x</span><span class="p">)</span>
<span class="p">{</span>
	<span class="kt">double</span> <span class="n">sum</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
	<span class="c1">// 如果这时的 n 大于最大的数值，就返回比他小 1 的值</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="p">&gt;=</span> <span class="n">MAXN</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">n</span> <span class="p">=</span> <span class="n">MAXN</span> <span class="p">-</span> <span class="m">1</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="c1">// 这个值用来做中间的计算，也就是计算 x 的中间计算</span>
	<span class="c1">// 为什么 temp 默认值会是 1 ？ 原因就是无论多大的数</span>
	<span class="c1">// 100000000^0 等于 1 </span>

	<span class="kt">double</span> <span class="n">temp</span> <span class="p">=</span> <span class="m">1</span><span class="p">;</span>

	<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;=</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="p">++)</span>
	<span class="p">{</span>
		<span class="c1">// 第 1 次 是 x^0 刚好就是现在 temp 的值</span>
		<span class="n">sum</span> <span class="p">=</span> <span class="n">sum</span> <span class="p">+</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="p">*</span> <span class="n">temp</span><span class="p">;</span>
		<span class="c1">// 进行第 2 次计算 x^1 = x = temp * x</span>
		<span class="n">temp</span> <span class="p">=</span> <span class="n">temp</span> <span class="p">*</span> <span class="n">x</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="k">return</span> <span class="n">sum</span><span class="p">;</span>
<span class="p">}</span>


<span class="cm">/*
// 里面存在x的多少次方，就需要重新定义一个函数来写，如果直接写在代码，代码很不好看
// 但是因为有时间的限制，所以不能使用这个方式，这个方式是每个 x 都需要重新计算多少次方
// 而比较快的方式是下一次的计算使用上一次计算的结果
// 在工程的开发，要尽量避免这种优化
// 但是在写题目到是可以这样考虑
// 每次计算的 x 的方都比原来的大 1 次，也就是我第 2 次的计算可以用到第 1 次计算的结果
double Pow(double x, int count)
{
	double sum = x;

	// 任何一个数的0次都是等于多少？
	if (0 == count) 
	{
		// 100000000^0
		return 1;
	}

	// 这里使用 i = 1 因为这里的值默认 sum 就是等于 x 
	// 如输入 x^2 那么就是 x = x count = 2
	// 如果这里的 i = 0 开始就会首先设置 sum = x；
	// sum 会循环两次，于是返回 x^3 和需要的不一样
	for (int i = 1; i &lt; count; i++)
	{
		//sum = sum * x;
		sum *= x;
	}

	return sum;
}

double f(int n, double a[], double x)
{
	double sum = 0;
	if (n &gt;= MAXN) 
	{
		n = MAXN - 1;
	}

	for (int i = 0; i &lt;= n; i++)
	{
		sum = sum + a[i] * Pow(x, i);
	}

	return sum;
}


*/</span>
</code></pre></div></div>

<p>考点：</p>

<ol>
  <li>
    <p>大概的输入</p>
  </li>
  <li>
    <p>是否可以在下一次运算使用上一次的值</p>
  </li>
  <li>
    <p>阅读题目能力</p>
  </li>
</ol>

<p>第2个考点是有些问题，如果比较会设计的小伙伴，就会写出我注释的代码</p>

<p>在工程使用是建议使用被注释的代码，但是被注释的代码会多了一次循环，于是会运行超时</p>

<p>第3个考点在于一开始的 n 的值，<code class="language-plaintext highlighter-rouge">i &lt;= n</code>的循环和 <code class="language-plaintext highlighter-rouge">i &lt; n</code> 的循环次数不相同</p>

<p>另外<code class="language-plaintext highlighter-rouge">for (int i = 0; i &lt; n; i++)</code>和<code class="language-plaintext highlighter-rouge">for (int i = 1; i &lt; n; i++)</code>的循环次数也不相同，都是相差 1 ，在于初始化 i 的大小和判断循环。</p>

<p>因为 PTA 没有告诉说代码的输出是什么，而且输出在哪里出错了，所以对于初学者还是比较难的，很多很难知道自己的程序在哪错了。一个建议是使用 CodeBlock 进行调试或者 VisualStudio 调试。</p>

<p>两个调试是不相同，可以看到 CodeBlock 支持比较简单的程序，而且使用也很简单。比较推荐简单的代码使用 CodeBlock ，如果训练的要求是实际使用，那么建议使用 VisualStudio 。可以从安装的时候看到 VisualStuio 很大，而且开始部署环境也是比较困难。但是 VisualStudio 可以开发几乎任何的软件。</p>

<p>下载CodeBlock请到官网：<a href="http://www.codeblocks.org/downloads/26">Download binary</a></p>

<p>下载 VisualStudio 请到官网 <a href="https://www.visualstudio.com/zh-hans/">Visual Studio</a></p>

<p>在部署完成VisualStudio 之后，可以使用我修改的代码运行。需要注意在 VisualStduio 需要使用  <code class="language-plaintext highlighter-rouge">scanf_s</code> 替换<code class="language-plaintext highlighter-rouge">scanf</code>，其他几乎不需要修改。</p>

<p>下面的代码复制之后就可以在 VisualStudio 运行调试，注意 VisualStudio</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// JisnaicasManawashar.cpp: 定义控制台应用程序的入口点。</span>


<span class="cp">#include "stdafx.h"
</span>
<span class="cp">#define MAXN 10
</span>
<span class="kt">double</span> <span class="nf">f</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="kt">double</span> <span class="n">a</span><span class="p">[],</span> <span class="kt">double</span> <span class="n">x</span><span class="p">);</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">i</span><span class="p">;</span>
	<span class="kt">double</span> <span class="n">a</span><span class="p">[</span><span class="n">MAXN</span><span class="p">],</span> <span class="n">x</span><span class="p">;</span>

	<span class="c1">//scanf("%d %lf", &amp;n, &amp;x);</span>
	<span class="c1">//for (i = 0; i &lt;= n; i++)</span>
	<span class="c1">//	scanf("%lf", &amp;a[i]);</span>

	<span class="n">n</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
	<span class="n">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">.</span><span class="mi">1</span><span class="p">;</span>
	<span class="c1">//1 2.5 -38.7</span>
	<span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
	<span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2</span><span class="p">.</span><span class="mi">5</span><span class="p">;</span>
	<span class="n">a</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="o">-</span><span class="mi">38</span><span class="p">.</span><span class="mi">7</span><span class="p">;</span>

	<span class="n">printf</span><span class="p">(</span><span class="s">"%.1f</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">f</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">x</span><span class="p">));</span>
	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>


<span class="kt">double</span> <span class="nf">f</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="kt">double</span> <span class="n">a</span><span class="p">[],</span> <span class="kt">double</span> <span class="n">x</span><span class="p">)</span>
<span class="p">{</span>
	<span class="kt">double</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
	<span class="c1">// 如果这时的 n 大于最大的数值，就返回比他小 1 的值</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">&gt;=</span> <span class="n">MAXN</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">n</span> <span class="o">=</span> <span class="n">MAXN</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="c1">// 这个值用来做中间的计算，也就是计算 x 的中间计算</span>
	<span class="c1">// 为什么 temp 默认值会是 1 ？ 原因就是无论多大的数</span>
	<span class="c1">// 100000000^0 等于 1 </span>

	<span class="kt">double</span> <span class="n">temp</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>

	<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="c1">// 第 1 次 是 x^0 刚好就是现在 temp 的值</span>
		<span class="n">sum</span> <span class="o">=</span> <span class="n">sum</span> <span class="o">+</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">*</span> <span class="n">temp</span><span class="p">;</span>
		<span class="c1">// 进行第 2 次计算 x^1 = x = temp * x</span>
		<span class="n">temp</span> <span class="o">=</span> <span class="n">temp</span> <span class="o">*</span> <span class="n">x</span><span class="p">;</span>

		<span class="c1">// 第1次 sum = 1</span>
		<span class="c1">// 第2次 sum = 3.75</span>
		<span class="c1">// 第3次 sum = -43.1</span>
	<span class="p">}</span>

	<span class="k">return</span> <span class="n">sum</span><span class="p">;</span>
<span class="p">}</span>


<span class="cm">/*
// 里面存在x的多少次方，就需要重新定义一个函数来写，如果直接写在代码，代码很不好看
// 但是因为有时间的限制，所以不能使用这个方式，这个方式是每个 x 都需要重新计算多少次方
// 而比较快的方式是下一次的计算使用上一次计算的结果
// 在工程的开发，要尽量避免这种优化
// 但是在写题目到是可以这样考虑
// 每次计算的 x 的方都比原来的大 1 次，也就是我第 2 次的计算可以用到第 1 次计算的结果
double Pow(double x, int count)
{
	double sum = x;

	// 任何一个数的0次都是等于多少？
	if (0 == count) 
	{
		// 100000000^0
		return 1;
	}

	// 这里使用 i = 1 因为这里的值默认 sum 就是等于 x 
	// 如输入 x^2 那么就是 x = x count = 2
	// 如果这里的 i = 0 开始就会首先设置 sum = x；
	// sum 会循环两次，于是返回 x^3 和需要的不一样
	for (int i = 1; i &lt; count; i++)
	{
		//sum = sum * x;
		sum *= x;
	}

	return sum;
}

double f(int n, double a[], double x)
{
	double sum = 0;
	if (n &gt;= MAXN) 
	{
		n = MAXN - 1;
	}

	for (int i = 0; i &lt;= n; i++)
	{
		sum = sum + a[i] * Pow(x, i);
	}

	return sum;
}


*/</span>
</code></pre></div></div>

<script type="text/javascript" async="" src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML">

</script>

<script type="text/x-mathjax-config">
  MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$'], ['\\(','\\)']]}});
</script>

:ET