I"`<p>如果使用 Newtonsoft Json 解析字符串，字符串里面有不清真的格式，那么默认的解析将会炸掉。如果想要自己解决字符串中的不清真格式，可以使用传入 JsonSerializerSettings 的方法</p>

<!--more-->

<!-- CreateTime:2019/8/31 16:55:58 -->

<p>我写了一段字符串，里面需要解析为日期请看代码</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">@"[
      '2009-09-09T00:00:00Z',
      '这是歪楼的',
      [
        1
      ],
      '1977-02-20T00:00:00Z',
      null,
      '2000-12-01T00:00:00Z'
    ]"</span>
</code></pre></div></div>

<p>小伙伴很快就可以看到，这里有一个歪楼的字符串</p>

<p>如果直接解析，那么将会炸掉</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
            <span class="n">List</span><span class="p">&lt;</span><span class="n">DateTime</span><span class="p">&gt;</span> <span class="n">list</span> <span class="p">=</span> <span class="n">JsonConvert</span><span class="p">.</span><span class="n">DeserializeObject</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">DateTime</span><span class="p">&gt;&gt;(</span><span class="s">@"[
      '2009-09-09T00:00:00Z',
      '这是歪楼的',
      [
        1
      ],
      '1977-02-20T00:00:00Z',
      null,
      '2000-12-01T00:00:00Z'
    ]"</span><span class="p">);</span>
</code></pre></div></div>

<p>运行上面代码，可以看到一个有趣的代码</p>

<p><img src="http://image.acmx.xyz/lindexi%2F20193208581815" alt="" /></p>

<p>自己解决不合法的字符串可以通过 JsonSerializerSettings 的方法，里面有一个委托，在发现有不清真的字符串的时候就会调用这个委托</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>             <span class="n">List</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">errors</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;();</span>

               <span class="k">new</span> <span class="n">JsonSerializerSettings</span>
                <span class="p">{</span>
                    <span class="n">Error</span> <span class="p">=</span> <span class="p">(</span><span class="n">sender</span><span class="p">,</span> <span class="n">e</span><span class="p">)</span> <span class="p">=&gt;</span>
                    <span class="p">{</span>
                        <span class="n">errors</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">ErrorContext</span><span class="p">.</span><span class="n">Error</span><span class="p">.</span><span class="n">Message</span><span class="p">);</span>
                        <span class="n">e</span><span class="p">.</span><span class="n">ErrorContext</span><span class="p">.</span><span class="n">Handled</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
                    <span class="p">},</span>
                    <span class="n">Converters</span> <span class="p">=</span> <span class="p">{</span> <span class="k">new</span> <span class="nf">IsoDateTimeConverter</span><span class="p">()</span> <span class="p">}</span>
                <span class="p">}</span>
</code></pre></div></div>

<p>其实这里的 DeserializeObject 可以传入两个参数，一个是字符串，一个是 JsonSerializerSettings 所以就可以做到在发现不清真的字符串的时候调用委托，同时支持传入从字符串转类的方法</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>           <span class="n">List</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">errors</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;();</span>

            <span class="n">List</span><span class="p">&lt;</span><span class="n">DateTime</span><span class="p">&gt;</span> <span class="n">list</span> <span class="p">=</span> <span class="n">JsonConvert</span><span class="p">.</span><span class="n">DeserializeObject</span><span class="p">&lt;</span><span class="n">List</span><span class="p">&lt;</span><span class="n">DateTime</span><span class="p">&gt;&gt;(</span><span class="s">@"[
      '2009-09-09T00:00:00Z',
      '这是歪楼的',
      [
        1
      ],
      '1977-02-20T00:00:00Z',
      null,
      '2000-12-01T00:00:00Z'
    ]"</span><span class="p">,</span>
                <span class="k">new</span> <span class="n">JsonSerializerSettings</span>
                <span class="p">{</span>
                    <span class="n">Error</span> <span class="p">=</span> <span class="p">(</span><span class="n">sender</span><span class="p">,</span> <span class="n">e</span><span class="p">)</span> <span class="p">=&gt;</span>
                    <span class="p">{</span>
                        <span class="n">errors</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">ErrorContext</span><span class="p">.</span><span class="n">Error</span><span class="p">.</span><span class="n">Message</span><span class="p">);</span>
                        <span class="n">e</span><span class="p">.</span><span class="n">ErrorContext</span><span class="p">.</span><span class="n">Handled</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
                    <span class="p">},</span>
                    <span class="n">Converters</span> <span class="p">=</span> <span class="p">{</span> <span class="k">new</span> <span class="nf">IsoDateTimeConverter</span><span class="p">()</span> <span class="p">}</span>
                <span class="p">});</span>
</code></pre></div></div>

<p>这时运行代码不会炸掉，因为设置了 <code class="language-plaintext highlighter-rouge">e.ErrorContext.Handled</code> 是 true 如果想要记录问题同时需要炸掉，那么就不要写这个代码</p>

<p>所有代码请看 <a href="https://github.com/lindexi/lindexi_gd/tree/7d553d290d68b567f91daed16c814c023e90c1a8/BepirquwiKedoucawji">github</a></p>

<p><a href="https://www.newtonsoft.com/json/help/html/SerializationErrorHandling.htm">Serialization Error Handling</a></p>

:ET