I"J7<p>本文来告诉大家 dotnet core 里面使用的黑科技，如何提高<code class="language-plaintext highlighter-rouge">String.IndexOf(char)</code>的性能</p>

<!--more-->

<!-- CreateTime:2019/8/31 16:55:58 -->

<!-- 标签：dotnet，dotnet-core，黑科技 -->

<p>在<a href="https://blogs.msdn.microsoft.com/dotnet/2017/06/07/performance-improvements-in-net-core/">Performance Improvements in .NET Core</a>有说道哪些提高性能的代码，所以我就去看了一下，发现有一些黑科技。</p>

<p>里面包括了 <code class="language-plaintext highlighter-rouge">Concat</code> 的提升和很多 linq 的提升，我准备在自己的 WPF 项目使用这些代码，因为现在的项目没有使用 .net Framework 4.7 。</p>

<p>感觉垃圾微软把很多功能放在一个 Framework 让很多开发者无法升级</p>

<p>本文主要来让大家看一下 IndexOf 的黑科技</p>

<p>修改的提交在<a href="https://github.com/dotnet/corert/pull/1339">Improve performance of String.IndexOf(char) and String.LastIndexOf(char) by bbowyersmyth</a></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>         <span class="k">public</span> <span class="k">unsafe</span> <span class="kt">int</span> <span class="nf">IndexOf</span><span class="p">(</span><span class="kt">char</span> <span class="k">value</span><span class="p">,</span> <span class="kt">int</span> <span class="n">startIndex</span><span class="p">,</span> <span class="kt">int</span> <span class="n">count</span><span class="p">)</span>
         <span class="p">{</span>
             <span class="k">if</span> <span class="p">(</span><span class="n">startIndex</span> <span class="p">&lt;</span> <span class="m">0</span> <span class="p">||</span> <span class="n">startIndex</span> <span class="p">&gt;</span> <span class="n">Length</span><span class="p">)</span>
                 <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentOutOfRangeException</span><span class="p">(</span><span class="s">"startIndex"</span><span class="p">,</span> <span class="n">SR</span><span class="p">.</span><span class="n">ArgumentOutOfRange_Index</span><span class="p">);</span>
 
             <span class="k">if</span> <span class="p">(</span><span class="n">count</span> <span class="p">&lt;</span> <span class="m">0</span> <span class="p">||</span> <span class="n">count</span> <span class="p">&gt;</span> <span class="n">Length</span> <span class="p">-</span> <span class="n">startIndex</span><span class="p">)</span>
                 <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentOutOfRangeException</span><span class="p">(</span><span class="s">"count"</span><span class="p">,</span> <span class="n">SR</span><span class="p">.</span><span class="n">ArgumentOutOfRange_Count</span><span class="p">);</span>
 
             <span class="k">fixed</span> <span class="p">(</span><span class="kt">char</span><span class="p">*</span> <span class="n">pChars</span> <span class="p">=</span> <span class="p">&amp;</span><span class="n">_firstChar</span><span class="p">)</span>
             <span class="p">{</span>
                 <span class="kt">char</span><span class="p">*</span> <span class="n">pCh</span> <span class="p">=</span> <span class="n">pChars</span> <span class="p">+</span> <span class="n">startIndex</span><span class="p">;</span>
<span class="p">-</span>                <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="n">count</span><span class="p">;</span> <span class="n">i</span><span class="p">++)</span>
<span class="p">+</span>
<span class="p">+</span>                <span class="k">while</span> <span class="p">(</span><span class="n">count</span> <span class="p">&gt;=</span> <span class="m">4</span><span class="p">)</span>
<span class="p">+</span>                <span class="p">{</span>
<span class="p">+</span>                    <span class="k">if</span> <span class="p">(*</span><span class="n">pCh</span> <span class="p">==</span> <span class="k">value</span><span class="p">)</span> <span class="k">goto</span> <span class="n">ReturnIndex</span><span class="p">;</span>
<span class="p">+</span>                    <span class="k">if</span> <span class="p">(*(</span><span class="n">pCh</span> <span class="p">+</span> <span class="m">1</span><span class="p">)</span> <span class="p">==</span> <span class="k">value</span><span class="p">)</span> <span class="k">goto</span> <span class="n">ReturnIndex1</span><span class="p">;</span>
<span class="p">+</span>                    <span class="k">if</span> <span class="p">(*(</span><span class="n">pCh</span> <span class="p">+</span> <span class="m">2</span><span class="p">)</span> <span class="p">==</span> <span class="k">value</span><span class="p">)</span> <span class="k">goto</span> <span class="n">ReturnIndex2</span><span class="p">;</span>
<span class="p">+</span>                    <span class="k">if</span> <span class="p">(*(</span><span class="n">pCh</span> <span class="p">+</span> <span class="m">3</span><span class="p">)</span> <span class="p">==</span> <span class="k">value</span><span class="p">)</span> <span class="k">goto</span> <span class="n">ReturnIndex3</span><span class="p">;</span>
<span class="p">+</span>
<span class="p">+</span>                    <span class="n">count</span> <span class="p">-=</span> <span class="m">4</span><span class="p">;</span>
<span class="p">+</span>                    <span class="n">pCh</span> <span class="p">+=</span> <span class="m">4</span><span class="p">;</span>
<span class="p">+</span>                <span class="p">}</span>
<span class="p">+</span>
<span class="p">+</span>                <span class="k">while</span> <span class="p">(</span><span class="n">count</span> <span class="p">&gt;</span> <span class="m">0</span><span class="p">)</span>
                 <span class="p">{</span>
                     <span class="k">if</span> <span class="p">(*</span><span class="n">pCh</span> <span class="p">==</span> <span class="k">value</span><span class="p">)</span>
<span class="p">-</span>                        <span class="k">return</span> <span class="n">i</span> <span class="p">+</span> <span class="n">startIndex</span><span class="p">;</span>
<span class="p">+</span>                        <span class="k">goto</span> <span class="n">ReturnIndex</span><span class="p">;</span>
<span class="p">+</span>
<span class="p">+</span>                    <span class="n">count</span><span class="p">--;</span>
                     <span class="n">pCh</span><span class="p">++;</span>
                 <span class="p">}</span>
<span class="p">-</span>            <span class="p">}</span>
 
<span class="p">-</span>            <span class="k">return</span> <span class="p">-</span><span class="m">1</span><span class="p">;</span>
<span class="p">+</span>                <span class="k">return</span> <span class="p">-</span><span class="m">1</span><span class="p">;</span>
<span class="p">+</span>
<span class="p">+</span>                <span class="n">ReturnIndex3</span><span class="p">:</span> <span class="n">pCh</span><span class="p">++;</span>
<span class="p">+</span>                <span class="n">ReturnIndex2</span><span class="p">:</span> <span class="n">pCh</span><span class="p">++;</span>
<span class="p">+</span>                <span class="n">ReturnIndex1</span><span class="p">:</span> <span class="n">pCh</span><span class="p">++;</span>
<span class="p">+</span>                <span class="n">ReturnIndex</span><span class="p">:</span>
<span class="p">+</span>                <span class="k">return</span> <span class="p">(</span><span class="kt">int</span><span class="p">)(</span><span class="n">pCh</span> <span class="p">-</span> <span class="n">pChars</span><span class="p">);</span>
<span class="p">+</span>            <span class="p">}</span>
         <span class="p">}</span>
</code></pre></div></div>

<p>可以看到.net Framework 的代码是使用循环</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">fixed</span> <span class="p">(</span><span class="kt">char</span><span class="p">*</span> <span class="n">pChars</span> <span class="p">=</span> <span class="p">&amp;</span><span class="n">_firstChar</span><span class="p">)</span>
 <span class="p">{</span>
 	<span class="kt">char</span><span class="p">*</span> <span class="n">pCh</span> <span class="p">=</span> <span class="n">pChars</span> <span class="p">+</span> <span class="n">startIndex</span><span class="p">;</span>
 	<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="n">count</span><span class="p">;</span> <span class="n">i</span><span class="p">++)</span>
 	<span class="p">{</span>
 		<span class="k">if</span> <span class="p">(*</span><span class="n">pCh</span> <span class="p">==</span> <span class="k">value</span><span class="p">)</span>
 		<span class="p">{</span>
 			<span class="k">return</span> <span class="n">i</span> <span class="p">+</span> <span class="n">startIndex</span><span class="p">;</span>
 		<span class="p">}</span>

 		<span class="n">pCh</span><span class="p">++;</span>
 	<span class="p">}</span>
 <span class="p">}</span> 
 
</code></pre></div></div>

<p>代码很简单，但是优化只有就使用了很黑的</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>         <span class="k">fixed</span> <span class="p">(</span><span class="kt">char</span><span class="p">*</span> <span class="n">pChars</span> <span class="p">=</span> <span class="p">&amp;</span><span class="n">_firstChar</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="kt">char</span><span class="p">*</span> <span class="n">pCh</span> <span class="p">=</span> <span class="n">pChars</span> <span class="p">+</span> <span class="n">startIndex</span><span class="p">;</span>

                <span class="k">while</span> <span class="p">(</span><span class="n">count</span> <span class="p">&gt;=</span> <span class="m">4</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="k">if</span> <span class="p">(*</span><span class="n">pCh</span> <span class="p">==</span> <span class="k">value</span><span class="p">)</span> <span class="k">goto</span> <span class="n">ReturnIndex</span><span class="p">;</span>
                    <span class="k">if</span> <span class="p">(*(</span><span class="n">pCh</span> <span class="p">+</span> <span class="m">1</span><span class="p">)</span> <span class="p">==</span> <span class="k">value</span><span class="p">)</span> <span class="k">goto</span> <span class="n">ReturnIndex1</span><span class="p">;</span>
                    <span class="k">if</span> <span class="p">(*(</span><span class="n">pCh</span> <span class="p">+</span> <span class="m">2</span><span class="p">)</span> <span class="p">==</span> <span class="k">value</span><span class="p">)</span> <span class="k">goto</span> <span class="n">ReturnIndex2</span><span class="p">;</span>
                    <span class="k">if</span> <span class="p">(*(</span><span class="n">pCh</span> <span class="p">+</span> <span class="m">3</span><span class="p">)</span> <span class="p">==</span> <span class="k">value</span><span class="p">)</span> <span class="k">goto</span> <span class="n">ReturnIndex3</span><span class="p">;</span>

                    <span class="n">count</span> <span class="p">-=</span> <span class="m">4</span><span class="p">;</span>
                    <span class="n">pCh</span> <span class="p">+=</span> <span class="m">4</span><span class="p">;</span>
                <span class="p">}</span>

                <span class="k">while</span> <span class="p">(</span><span class="n">count</span> <span class="p">&gt;</span> <span class="m">0</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="k">if</span> <span class="p">(*</span><span class="n">pCh</span> <span class="p">==</span> <span class="k">value</span><span class="p">)</span>
                        <span class="k">goto</span> <span class="n">ReturnIndex</span><span class="p">;</span>

                    <span class="n">count</span><span class="p">--;</span>
                    <span class="n">pCh</span><span class="p">++;</span>
                <span class="p">}</span>

                <span class="k">return</span> <span class="p">-</span><span class="m">1</span><span class="p">;</span>

                <span class="n">ReturnIndex3</span><span class="p">:</span> <span class="n">pCh</span><span class="p">++;</span>
                <span class="n">ReturnIndex2</span><span class="p">:</span> <span class="n">pCh</span><span class="p">++;</span>
                <span class="n">ReturnIndex1</span><span class="p">:</span> <span class="n">pCh</span><span class="p">++;</span>
                <span class="n">ReturnIndex</span><span class="p">:</span>
                <span class="k">return</span> <span class="p">(</span><span class="kt">int</span><span class="p">)(</span><span class="n">pCh</span> <span class="p">-</span> <span class="n">pChars</span><span class="p">);</span>
</code></pre></div></div>

<p>为什么需要使用这样的方法，因为这样可以直接塞满寄存器，做判断会快很多。这和具体编译有关</p>

<p>测试代码可以使用<a href="https://gist.github.com/bbowyersmyth/791ff071a10ef901ed7a">IndexOfChar.cs</a></p>

<p>如果想看大神的测试，<a href="http://aakinshin.net/blog/post/stephen-toub-benchmarks-part1/">Measuring Performance Improvements in .NET Core with BenchmarkDotNet</a></p>

:ET