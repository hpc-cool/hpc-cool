I"7V<p>在开发 WPF 程序，虽然 xaml 很好用，但是经常会出现小伙伴把绑定写错了。因为默认的 VisualStudio 是没有自动提示，这时很容易复制粘贴写出一个不存在的属性。
在 xaml 如果绑定失败了，那么内部会有一个异常，但是 WPF 不会把这个异常抛出来，这个异常也不会让用户拿到，只是会在输出窗口提示。但是异常会影响性能，而且会让界面和设计的不一样，所以我就想在找到绑定异常就抛出，弹出窗口告诉小伙伴。
本文会告诉大家如何找到绑定失败，并且抛出异常，如何防止修改属性名让xaml绑定失败。</p>

<!--more-->

<!-- CreateTime:2019/11/29 10:13:57 -->

<!-- csdn -->
<!-- 标签：WPF，调试，WPF调试 -->

<div id="toc"></div>

<p>在绑定失败异常建议只在调试下抛出，抛出异常建议弹出，告诉开发者现在你的界面有绑定异常</p>

<h2 id="拿到绑定信息">拿到绑定信息</h2>

<p>先来写简单的代码，做一个 ViewModel ，里面有两个属性</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">class</span> <span class="nc">ViewModel</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span> <span class="p">=</span> <span class="s">"lindexi"</span><span class="p">;</span>

        <span class="k">public</span> <span class="kt">string</span> <span class="n">JaslorbafelStojou</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span> <span class="p">=</span> <span class="s">"lindexi.gitee.io"</span><span class="p">;</span>
    <span class="p">}</span>
</code></pre></div></div>

<p>可以看到第二个属性是比较复杂的，现在来写 xaml 界面，</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="p">&lt;</span><span class="n">Grid</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="n">StackPanel</span> <span class="n">Margin</span><span class="p">=</span><span class="s">"10,10,10,10"</span> <span class="n">HorizontalAlignment</span><span class="p">=</span><span class="s">"Center"</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="n">TextBlock</span> <span class="n">Margin</span><span class="p">=</span><span class="s">"10,10,10,10"</span> <span class="n">Text</span><span class="p">=</span><span class="s">"{Binding Name}"</span><span class="p">&gt;&lt;/</span><span class="n">TextBlock</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="n">TextBlock</span> <span class="n">Margin</span><span class="p">=</span><span class="s">"10,10,10,10"</span> <span class="n">Text</span><span class="p">=</span><span class="s">"{Binding JaslorbafelStoj}"</span><span class="p">&gt;&lt;/</span><span class="n">TextBlock</span><span class="p">&gt;</span>
        <span class="p">&lt;/</span><span class="n">StackPanel</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="n">Grid</span><span class="p">&gt;</span>
</code></pre></div></div>

<p>然后在后台代码添加这个代码</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="k">public</span> <span class="nf">MainWindow</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="nf">InitializeComponent</span><span class="p">();</span>

            <span class="n">DataContext</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">ViewModel</span><span class="p">();</span>
        <span class="p">}</span>
</code></pre></div></div>

<p>现在运行一下，你猜是不是会显示两行，一行是 lindexi 一行是 lindexi.gitee.io ，实际上你看到只有一行，因为第二个绑定写错了</p>

<p><img src="http://image.acmx.xyz/lindexi%2F2018517144793266.jpg" alt="" /></p>

<p>第二个在 ViewModel 的属性是 JaslorbafelStojou 但是 xaml 写的是 JaslorbafelStoj ，如果这时看到了输出，就会看到下面代码</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>System.Windows.Data Error: 40 : BindingExpression path error: 'JaslorbafelStoj' property not found on 'object' ''ViewModel' (HashCode=16468652)'. BindingExpression:Path=JaslorbafelStoj; DataItem='ViewModel' (HashCode=16468652); target element is 'TextBlock' (Name=''); target property is 'Text' (type 'String')
</code></pre></div></div>

<p>那么这个代码是否可以用来判断出现绑定失败，是的，让我来告诉大家如何拿到输出</p>

<h2 id="转发绑定">转发绑定</h2>

<p>因为绑定失败输出是使用 Trace ，关于 Trace 请看<a href="https://blog.lindexi.com/post/WPF-%E8%B0%83%E8%AF%95-%E8%8E%B7%E5%BE%97%E8%BF%BD%E8%B8%AA%E8%BE%93%E5%87%BA.html">WPF 调试 获得追踪输出</a></p>

<p>那么如何拿到 Trace 的输出？</p>

<p>首先需要定义一个类继承 TraceListener ，下面定义一个  BindingErrorTraceListener 收到了消息就输出</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    
    <span class="k">public</span> <span class="k">class</span> <span class="nc">BindingErrorTraceListener</span> <span class="p">:</span> <span class="n">TraceListener</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">Write</span><span class="p">(</span><span class="kt">string</span> <span class="n">message</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Trace</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="kt">string</span><span class="p">.</span><span class="nf">Format</span><span class="p">(</span><span class="s">"[Write]{0}"</span><span class="p">,</span> <span class="n">message</span><span class="p">));</span>
        <span class="p">}</span>
 
        <span class="k">public</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">WriteLine</span><span class="p">(</span><span class="kt">string</span> <span class="n">message</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Trace</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="kt">string</span><span class="p">.</span><span class="nf">Format</span><span class="p">(</span><span class="s">"[WriteLine]{0}"</span><span class="p">,</span> <span class="n">message</span><span class="p">));</span>
        <span class="p">}</span>
    <span class="p">}</span>
</code></pre></div></div>

<p>然后在构造函数加入，注意在 InitializeComponent 之前</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="k">public</span> <span class="nf">MainWindow</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="n">PresentationTraceSources</span><span class="p">.</span><span class="n">DataBindingSource</span><span class="p">.</span><span class="n">Switch</span><span class="p">.</span><span class="n">Level</span> <span class="p">=</span> <span class="n">SourceLevels</span><span class="p">.</span><span class="n">Error</span><span class="p">;</span>
            <span class="n">PresentationTraceSources</span><span class="p">.</span><span class="n">DataBindingSource</span><span class="p">.</span><span class="n">Listeners</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">BindingErrorTraceListener</span><span class="p">());</span>

            <span class="nf">InitializeComponent</span><span class="p">();</span>

            <span class="n">DataContext</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">ViewModel</span><span class="p">();</span>
        <span class="p">}</span>
</code></pre></div></div>

<p>这时运行代码可以看到输出</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[Write]System.Windows.Data Error: 40 : 
[WriteLine]BindingExpression path error: 'JaslorbafelStoj' property not found on 'object' ''ViewModel' (HashCode=16468652)'. BindingExpression:Path=JaslorbafelStoj; DataItem='ViewModel' (HashCode=16468652); target element is 'TextBlock' (Name=''); target property is 'Text' (type 'String')
</code></pre></div></div>

<p>所以很容易就知道如何判断是绑定输出</p>

<h2 id="绑定失败异常">绑定失败异常</h2>

<p>从上面代码可以知道，所有的绑定输出可以<code class="language-plaintext highlighter-rouge">PresentationTraceSources.DataBindingSource.Listeners</code>拿到，重写方法就可以转发</p>

<p>而且 TraceListener 是一个很强的类，支持了很多输入，不只字符串，还支持 object ，所以尝试使用 TraceListener 可以做到比较好调试</p>

<p>因为需要在失败抛出异常，就需要定义一个异常</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">public</span> <span class="k">class</span> <span class="nc">BindingErrorException</span> <span class="p">:</span> <span class="n">Exception</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">SourceObject</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">SourceProperty</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">TargetElement</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">TargetProperty</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
 
    <span class="k">public</span> <span class="nf">BindingErrorException</span><span class="p">()</span> 
        <span class="p">:</span> <span class="k">base</span><span class="p">()</span> 
    <span class="p">{</span> 

    <span class="p">}</span>
 
    <span class="k">public</span> <span class="nf">BindingErrorException</span><span class="p">(</span><span class="kt">string</span> <span class="n">message</span><span class="p">)</span>
        <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="n">message</span><span class="p">)</span> 
    <span class="p">{</span> 

    <span class="p">}</span> 
<span class="p">}</span>

</code></pre></div></div>

<p>判断当前存在绑定失败很简单，主要使用正则判断</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">public</span> <span class="k">class</span> <span class="nc">BindingErrorTraceListener</span> <span class="p">:</span> <span class="n">TraceListener</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">const</span> <span class="kt">string</span> <span class="n">BindingErrorPattern</span> <span class="p">=</span> <span class="s">@"^BindingExpression path error(?:.+)'(.+)' property not found(?:.+)object[\s']+(.+?)'(?:.+)target element is '(.+?)'(?:.+)target property is '(.+?)'(?:.+)$"</span><span class="p">;</span>

        <span class="k">public</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">Write</span><span class="p">(</span><span class="kt">string</span> <span class="n">message</span><span class="p">)</span>
        <span class="p">{</span>
            
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">WriteLine</span><span class="p">(</span><span class="kt">string</span> <span class="n">message</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">match</span> <span class="p">=</span> <span class="n">Regex</span><span class="p">.</span><span class="nf">Match</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="n">BindingErrorPattern</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">match</span><span class="p">.</span><span class="n">Success</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="kt">var</span> <span class="n">exception</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">BindingErrorException</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="n">SourceObject</span> <span class="p">=</span> <span class="n">match</span><span class="p">.</span><span class="n">Groups</span><span class="p">[</span><span class="m">2</span><span class="p">].</span><span class="nf">ToString</span><span class="p">(),</span>
                    <span class="n">SourceProperty</span> <span class="p">=</span> <span class="n">match</span><span class="p">.</span><span class="n">Groups</span><span class="p">[</span><span class="m">1</span><span class="p">].</span><span class="nf">ToString</span><span class="p">(),</span>
                    <span class="n">TargetElement</span> <span class="p">=</span> <span class="n">match</span><span class="p">.</span><span class="n">Groups</span><span class="p">[</span><span class="m">3</span><span class="p">].</span><span class="nf">ToString</span><span class="p">(),</span>
                    <span class="n">TargetProperty</span> <span class="p">=</span> <span class="n">match</span><span class="p">.</span><span class="n">Groups</span><span class="p">[</span><span class="m">4</span><span class="p">].</span><span class="nf">ToString</span><span class="p">()</span>
                <span class="p">};</span>
                <span class="k">throw</span> <span class="n">exception</span><span class="p">;</span>
            <span class="p">}</span>

        <span class="p">}</span>
    <span class="p">}</span>

</code></pre></div></div>

<p>这时会发现代码抛出异常</p>

<p><img src="http://image.acmx.xyz/lindexi%2F2018517158181899.jpg" alt="" /></p>

<p>但是抛出了异常建议弹出窗口，这样开发者才会看到</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
     <span class="k">public</span> <span class="nf">MainWindow</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="n">PresentationTraceSources</span><span class="p">.</span><span class="n">DataBindingSource</span><span class="p">.</span><span class="n">Switch</span><span class="p">.</span><span class="n">Level</span> <span class="p">=</span> <span class="n">SourceLevels</span><span class="p">.</span><span class="n">Error</span><span class="p">;</span>
            <span class="n">PresentationTraceSources</span><span class="p">.</span><span class="n">DataBindingSource</span><span class="p">.</span><span class="n">Listeners</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">BindingErrorTraceListener</span><span class="p">());</span>

            <span class="nf">InitializeComponent</span><span class="p">();</span>

            <span class="n">DataContext</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">ViewModel</span><span class="p">();</span>

            <span class="n">App</span><span class="p">.</span><span class="n">Current</span><span class="p">.</span><span class="n">DispatcherUnhandledException</span> <span class="p">+=</span> <span class="n">DispatcherUnhandledException</span><span class="p">;</span>
        <span class="p">}</span>

         <span class="k">private</span> <span class="k">void</span> <span class="nf">DispatcherUnhandledException</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">System</span><span class="p">.</span><span class="n">Windows</span><span class="p">.</span><span class="n">Threading</span><span class="p">.</span><span class="n">DispatcherUnhandledExceptionEventArgs</span> <span class="n">e</span><span class="p">)</span>
         <span class="p">{</span>
             <span class="k">if</span> <span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">Exception</span> <span class="k">is</span> <span class="n">BindingErrorException</span> <span class="n">bindingErrorException</span><span class="p">)</span>
             <span class="p">{</span>
                 <span class="n">MessageBox</span><span class="p">.</span><span class="nf">Show</span><span class="p">(</span><span class="s">$"Binding error. </span><span class="p">{</span><span class="n">bindingErrorException</span><span class="p">.</span><span class="n">SourceObject</span><span class="p">}</span><span class="s">.</span><span class="p">{</span><span class="n">bindingErrorException</span><span class="p">.</span><span class="n">SourceProperty</span><span class="p">}</span><span class="s"> </span><span class="p">{</span><span class="n">bindingErrorException</span><span class="p">.</span><span class="n">TargetElement</span><span class="p">}</span><span class="s">.</span><span class="p">{</span><span class="n">bindingErrorException</span><span class="p">.</span><span class="n">TargetProperty</span><span class="p">}</span><span class="s">"</span><span class="p">);</span>
             <span class="p">}</span>
         <span class="p">}</span>
</code></pre></div></div>

<p><img src="http://image.acmx.xyz/lindexi%2F20185171510425622.jpg" alt="" /></p>

<h2 id="自动提示">自动提示</h2>

<p>我找到绑定失败很多是因为写错了属性，很多小伙伴不知道实际 xaml 是可以自动提示。</p>

<p>先在 对应的窗口写入绑定的类型，使用<code class="language-plaintext highlighter-rouge">d:DataContext</code>可以告诉 xaml 使用的数据类型，这样做绑定就可以自动提示</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="p">&lt;</span><span class="n">Grid</span> <span class="n">d</span><span class="p">:</span><span class="n">DataContext</span><span class="p">=</span><span class="s">"{d:DesignInstance local:ViewModel}"</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="n">StackPanel</span> <span class="n">Margin</span><span class="p">=</span><span class="s">"10,10,10,10"</span> <span class="n">HorizontalAlignment</span><span class="p">=</span><span class="s">"Center"</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="n">TextBlock</span> <span class="n">Text</span><span class="p">=</span><span class="s">"{Binding Name}"</span><span class="p">&gt;&lt;/</span><span class="n">TextBlock</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="n">TextBlock</span> <span class="n">Text</span><span class="p">=</span><span class="s">"{Binding JaslorbafelStoj}"</span><span class="p">&gt;&lt;/</span><span class="n">TextBlock</span><span class="p">&gt;</span>
        <span class="p">&lt;/</span><span class="n">StackPanel</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="n">Grid</span><span class="p">&gt;</span>
</code></pre></div></div>

<p>这时尝试删除 JaslorbafelStoj 重新写，就会提示 需要写 JaslorbafelStojou ，这样会自动提示就很难写错。</p>

<p>我很建议大家安装 Resharper 这样在修改变量名时，会自动修改 xaml 的属性名</p>

<p>在有安装 Resharper 的设备，修改一个属性名，然后按 Alt+enter 就会提示 apply rename factoring ，这样会修改所有引用这个属性的变量名</p>

<p>需要注意，必须添加 <code class="language-plaintext highlighter-rouge">d:DataContext</code> 或者这样设置 ViewModel 才可以通过 Resharper 修改变量名</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="p">&lt;</span><span class="n">Window</span><span class="p">.</span><span class="n">DataContext</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="n">local</span><span class="p">:</span><span class="n">ViewModel</span> <span class="p">/&gt;</span>
    <span class="p">&lt;/</span><span class="n">Window</span><span class="p">.</span><span class="n">DataContext</span><span class="p">&gt;</span>
</code></pre></div></div>

<p>如果需要调试 Binding ，参见 <a href="https://lindexi.gitee.io/post/WPF-%E5%A6%82%E4%BD%95%E8%B0%83%E8%AF%95-binding.html">WPF 如何调试 binding</a></p>

<p>参见：</p>

<p><a href="https://wpf.2000things.com/2017/05/16/1208-catching-data-binding-errors-part-1/#comment-61403">#1,208 – Catching Data Binding Errors Part 1</a></p>

:ET