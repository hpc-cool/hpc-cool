I"G<p>我在写一个有趣的 WPF 软件可以通过 dll 反射重新生成代码，我需要了解dll里面每个属性是抽象的还是继承的还是虚属性</p>

<!--more-->

<!-- CreateTime:2020/3/17 19:23:02 -->

<p>在 C# 中可以方便通过反射拿到一个类里面的所有属性，在阅读本文之前，我期望你先看 <a href="https://blog.lindexi.com/post/win10-uwp-%E5%8F%8D%E5%B0%84.html">win10 uwp 反射</a></p>

<h2 id="抽象">抽象</h2>

<p>需要知道在 C# 中属性是使用两个方法做的，一个是 Set 方法一个是 Get 方法，其中 Set 方法用来做设置，而 Get 方法用来做获取。但是不一定每个属性都有 Set 和 Get 方法，但是至少有一个。而 C# 中没有提供任何一个判断属性是否抽象的方法，但是提供了方法的判断是否抽象。所以可以尝试获取某个属性的 Set 或 Get 方法是否是抽象方法从而判断这个属性是否抽象属性</p>

<p>假设通过反射拿到了一个属性 <code class="language-plaintext highlighter-rouge">PropertyInfo pi</code> 那么可以通过下面代码判断 Set 方法是否是抽象的</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span><span class="p">(</span><span class="n">pi</span><span class="p">.</span><span class="nf">GetSetMethod</span><span class="p">().</span><span class="n">IsAbstract</span><span class="p">)</span>
<span class="p">{</span>
<span class="p">}</span>
</code></pre></div></div>

<p>如果发现 Set 方法是抽象的，那么这个属性就是抽象属性</p>

<h2 id="虚属性">虚属性</h2>

<p>判断属性是虚属性也是通过属性的 Set 或 Get 方法判断，但是属性不一定存在 Set 或 Get 方法，如上面代码说的，可以通过 CanRead 属性判断能否读取，如果能读取那么可以用 GetMethod 的方法</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">var</span> <span class="n">m</span> <span class="p">=</span> <span class="n">p</span><span class="p">.</span><span class="n">CanRead</span> <span class="p">?</span> <span class="n">p</span><span class="p">.</span><span class="nf">GetMethod</span><span class="p">()</span> <span class="p">:</span> <span class="n">p</span><span class="p">.</span><span class="nf">SetMethod</span><span class="p">();</span>
<span class="k">if</span><span class="p">(</span><span class="n">m</span><span class="p">.</span><span class="n">IsVirtual</span><span class="p">)</span>
<span class="p">{</span>

<span class="p">}</span>
</code></pre></div></div>

<h2 id="重写">重写</h2>

<p>也就是继承重写基类的方法，简单的判断就是这个属性的 Set 或 Get 方法的定义的类和当前的类不相同</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">var</span> <span class="n">getMethod</span> <span class="p">=</span> <span class="n">property</span><span class="p">.</span><span class="nf">GetGetMethod</span><span class="p">();</span>
</code></pre></div></div>

<p>使用 GetBaseDefinition 可以尝试拿到基类的定义，如果能拿到和当前类不同的，那么这个 Get 方法就是继承的，也就是属性是重写的</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="n">getMethod</span><span class="p">.</span><span class="nf">GetBaseDefinition</span><span class="p">().</span><span class="n">DeclaringType</span> <span class="p">!=</span> <span class="n">getMethod</span><span class="p">.</span><span class="n">DeclaringType</span><span class="p">)</span>
<span class="p">{</span>

<span class="p">}</span>
</code></pre></div></div>

<p><a href="https://stackoverflow.com/questions/1025803/how-to-identify-abstract-members-via-reflection">c# - How to identify abstract members via reflection - Stack Overflow</a></p>

<p><a href="https://stackoverflow.com/questions/12305945/how-to-check-if-a-property-is-virtual-with-reflection">c# - How to check if a property is virtual with reflection?</a></p>

<p><a href="https://stackoverflow.com/questions/4505232/how-do-i-determine-if-a-property-was-overridden">c# - How do I determine if a property was overridden? - Stack Overflow</a></p>

:ET