I"<<p>我需要窗口内的某个元素拥有拖动整个窗口的功能，也就是这个元素在拖动的时候是拖动整个窗口。而且我还开出一个有趣的方法，这个作为窗口的拖拽的元素如果是用户在元素上拖动，那么将会拖动窗口，如果用户是点击，将会触发点击事件</p>

<!--more-->

<!-- CreateTime:6/16/2020 7:44:54 PM -->

<p>附加属性可以给某个元素附加有趣的功能，本文的功能需要拖动元素的时候实际上是拖动窗口，第二个是元素是支持点击的</p>

<p>拖动窗口使用的是窗口的 DragMove 方法</p>

<p>元素支持点击用的是 <a href="https://blog.lindexi.com/post/WPF-%E7%BB%99%E4%BB%BB%E6%84%8F%E6%8E%A7%E4%BB%B6%E9%80%9A%E8%BF%87%E6%8C%89%E4%B8%8B%E7%A7%BB%E5%8A%A8%E6%8A%AC%E8%B5%B7%E5%B0%81%E8%A3%85%E7%82%B9%E5%87%BB%E4%BA%8B%E4%BB%B6.html">WPF 给任意控件通过按下移动抬起封装点击事件</a> 方法</p>

<p>因此本文需要引入 <a href="https://blog.lindexi.com/post/WPF-%E7%BB%99%E4%BB%BB%E6%84%8F%E6%8E%A7%E4%BB%B6%E9%80%9A%E8%BF%87%E6%8C%89%E4%B8%8B%E7%A7%BB%E5%8A%A8%E6%8A%AC%E8%B5%B7%E5%B0%81%E8%A3%85%E7%82%B9%E5%87%BB%E4%BA%8B%E4%BB%B6.html">WPF 给任意控件通过按下移动抬起封装点击事件</a> 的 InputHelper 类作为辅助</p>

<p>用法如下，写一个简单的界面，放一个元素作为拖动的元素</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;Border</span> <span class="na">x:Name=</span><span class="s">"DraggingElement"</span> <span class="na">Width=</span><span class="s">"100"</span> <span class="na">Height=</span><span class="s">"100"</span> <span class="na">Background=</span><span class="s">"Gray"</span><span class="nt">&gt;</span>
 

    <span class="nt">&lt;TextBlock</span> <span class="na">x:Name=</span><span class="s">"TextBlock"</span> <span class="na">Margin=</span><span class="s">"10,10,10,10"</span> <span class="na">HorizontalAlignment=</span><span class="s">"Center"</span><span class="nt">&gt;&lt;/TextBlock&gt;</span>
<span class="nt">&lt;/Border&gt;</span>
</code></pre></div></div>

<p>上面代码的 DraggingElement 就是用来拖动窗口的元素</p>

<p>接下来在元素放一个 WindowDraggingExtension.DragWindow 附加属性</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;Border</span> <span class="na">x:Name=</span><span class="s">"DraggingElement"</span> <span class="na">Width=</span><span class="s">"100"</span> <span class="na">Height=</span><span class="s">"100"</span> <span class="na">Background=</span><span class="s">"Gray"</span><span class="nt">&gt;</span>

   <span class="nt">&lt;framework:WindowDraggingExtension.DragWindow&gt;</span>
        <span class="nt">&lt;framework:WindowDraggingExtension</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;/framework:WindowDraggingExtension.DragWindow&gt;</span> 

    <span class="nt">&lt;TextBlock</span> <span class="na">x:Name=</span><span class="s">"TextBlock"</span> <span class="na">Margin=</span><span class="s">"10,10,10,10"</span> <span class="na">HorizontalAlignment=</span><span class="s">"Center"</span><span class="nt">&gt;&lt;/TextBlock&gt;</span>
<span class="nt">&lt;/Border&gt;</span>
</code></pre></div></div>

<p>注意 <code class="language-plaintext highlighter-rouge">framework:</code> 是我的命名空间，请按照自己的代码修改为你的命名空间</p>

<p>此时尝试运行代码，拖动一下 DraggingElement 这个元素，可以看到拖动的是窗口。这个方法支持触摸拖动</p>

<p>这个附加属性能做到的功能类似 QQ 宠物，可以拖动，可以点击提示更多内容</p>

<p>本文用到的这个附加属性代码如下</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="c1">/// &lt;summary&gt;</span>
    <span class="c1">/// 窗口拖拽的附加方法</span>
    <span class="c1">/// &lt;/summary&gt;</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">WindowDraggingExtension</span>
    <span class="p">{</span>
        <span class="c1">/// &lt;summary&gt;</span>
        <span class="c1">/// 表示元素作为附加某个窗口提供拖拽的功能</span>
        <span class="c1">/// &lt;/summary&gt;</span>
        <span class="k">public</span> <span class="k">static</span> <span class="k">readonly</span> <span class="n">DependencyProperty</span> <span class="n">DragWindowProperty</span> <span class="p">=</span> <span class="n">DependencyProperty</span><span class="p">.</span><span class="nf">RegisterAttached</span><span class="p">(</span>
            <span class="s">"DragWindow"</span><span class="p">,</span> <span class="k">typeof</span><span class="p">(</span><span class="n">WindowDraggingExtension</span><span class="p">),</span> <span class="k">typeof</span><span class="p">(</span><span class="n">WindowDraggingExtension</span><span class="p">),</span>
            <span class="k">new</span> <span class="nf">PropertyMetadata</span><span class="p">(</span><span class="k">default</span><span class="p">(</span><span class="n">WindowDraggingExtension</span><span class="p">),</span>
                <span class="n">OnDragWindowPropertyChanged</span><span class="p">));</span>

        <span class="c1">/// &lt;summary&gt;</span>
        <span class="c1">/// 附加的拖动的窗口，提供此属性仅仅是为了提升性能，可以不设置。如不设置将使用 Window.GetWindow 方法获取当前元素所在窗口</span>
        <span class="c1">/// &lt;/summary&gt;</span>
        <span class="k">public</span> <span class="n">Window</span> <span class="n">TargetWindow</span> <span class="p">{</span> <span class="k">set</span><span class="p">;</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>

        <span class="c1">/// &lt;summary&gt;</span>
        <span class="c1">/// 拖动的元素实际是被点击时触发</span>
        <span class="c1">/// &lt;/summary&gt;</span>
        <span class="k">public</span> <span class="k">event</span> <span class="n">EventHandler</span> <span class="n">DraggingElementClicked</span><span class="p">;</span>

        <span class="c1">/// &lt;summary&gt;</span>
        <span class="c1">/// 拖动时触发</span>
        <span class="c1">/// &lt;/summary&gt;</span>
        <span class="k">public</span> <span class="k">event</span> <span class="n">EventHandler</span> <span class="n">Dragging</span><span class="p">;</span>

        <span class="c1">/// &lt;summary&gt;</span>
        <span class="c1">/// 设置元素作为窗口的拖拽元素</span>
        <span class="c1">/// &lt;/summary&gt;</span>
        <span class="c1">/// &lt;param name="element"&gt;&lt;/param&gt;</span>
        <span class="c1">/// &lt;param name="value"&gt;&lt;/param&gt;</span>
        <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">SetDragWindow</span><span class="p">(</span><span class="n">DependencyObject</span> <span class="n">element</span><span class="p">,</span> <span class="n">WindowDraggingExtension</span> <span class="k">value</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">element</span><span class="p">.</span><span class="nf">SetValue</span><span class="p">(</span><span class="n">DragWindowProperty</span><span class="p">,</span> <span class="k">value</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="c1">/// &lt;summary&gt;</span>
        <span class="c1">/// 获取元素作为窗口拖拽属性</span>
        <span class="c1">/// &lt;/summary&gt;</span>
        <span class="c1">/// &lt;param name="element"&gt;&lt;/param&gt;</span>
        <span class="c1">/// &lt;returns&gt;&lt;/returns&gt;</span>
        <span class="k">public</span> <span class="k">static</span> <span class="n">WindowDraggingExtension</span> <span class="nf">GetDragWindow</span><span class="p">(</span><span class="n">DependencyObject</span> <span class="n">element</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="p">(</span><span class="n">WindowDraggingExtension</span><span class="p">)</span> <span class="n">element</span><span class="p">.</span><span class="nf">GetValue</span><span class="p">(</span><span class="n">DragWindowProperty</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">private</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">OnDragWindowPropertyChanged</span><span class="p">(</span><span class="n">DependencyObject</span> <span class="n">d</span><span class="p">,</span> <span class="n">DependencyPropertyChangedEventArgs</span> <span class="n">e</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="c1">// 仅有设置，不会存在多次设置，也没有反过来</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">NewValue</span> <span class="k">is</span> <span class="n">WindowDraggingExtension</span> <span class="n">windowDragging</span> <span class="p">&amp;&amp;</span> <span class="n">d</span> <span class="k">is</span> <span class="n">UIElement</span> <span class="n">element</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">InputHelper</span><span class="p">.</span><span class="nf">AttachMouseDownMoveUpToClick</span><span class="p">(</span><span class="n">element</span><span class="p">,</span>
                    <span class="k">delegate</span> <span class="p">{</span> <span class="n">windowDragging</span><span class="p">.</span><span class="nf">OnDraggingElementClicked</span><span class="p">();</span> <span class="p">},</span> <span class="k">delegate</span>
                    <span class="p">{</span>
                        <span class="n">windowDragging</span><span class="p">.</span><span class="nf">OnDragging</span><span class="p">();</span>

                        <span class="k">if</span> <span class="p">(</span><span class="n">Mouse</span><span class="p">.</span><span class="n">LeftButton</span> <span class="p">==</span> <span class="n">MouseButtonState</span><span class="p">.</span><span class="n">Pressed</span><span class="p">)</span>
                        <span class="p">{</span>
                            <span class="kt">var</span> <span class="n">targetWindow</span> <span class="p">=</span> <span class="n">windowDragging</span><span class="p">.</span><span class="n">TargetWindow</span>
                                               <span class="p">??</span> <span class="n">Window</span><span class="p">.</span><span class="nf">GetWindow</span><span class="p">(</span><span class="n">element</span><span class="p">);</span>

                            <span class="n">targetWindow</span><span class="p">?.</span><span class="nf">DragMove</span><span class="p">();</span>
                        <span class="p">}</span>
                    <span class="p">});</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">private</span> <span class="k">void</span> <span class="nf">OnDraggingElementClicked</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="n">DraggingElementClicked</span><span class="p">?.</span><span class="nf">Invoke</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="n">EventArgs</span><span class="p">.</span><span class="n">Empty</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">private</span> <span class="k">void</span> <span class="nf">OnDragging</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="n">Dragging</span><span class="p">?.</span><span class="nf">Invoke</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="n">EventArgs</span><span class="p">.</span><span class="n">Empty</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
</code></pre></div></div>

<p>上面代码 InputHelper 需要从 <a href="https://blog.lindexi.com/post/WPF-%E7%BB%99%E4%BB%BB%E6%84%8F%E6%8E%A7%E4%BB%B6%E9%80%9A%E8%BF%87%E6%8C%89%E4%B8%8B%E7%A7%BB%E5%8A%A8%E6%8A%AC%E8%B5%B7%E5%B0%81%E8%A3%85%E7%82%B9%E5%87%BB%E4%BA%8B%E4%BB%B6.html">WPF 给任意控件通过按下移动抬起封装点击事件</a> 复制</p>

<p>通过阅读上面代码，可以看到还有两个可以设置的属性，一个是 TargetWindow 属性，一个是元素被点击的事件</p>

<p>设置 TargetWindow 属性主要是为了提升一点性能，通过 TargetWindow 获取窗口，而不需要通过 Window.GetWindow 方法获取当前元素所在窗口，使用方法如下</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;Window</span> <span class="na">x:Name=</span><span class="s">"CurrentWindow"</span> <span class="err">忽略元素</span><span class="nt">&gt;</span>

  <span class="nt">&lt;Border</span> <span class="na">x:Name=</span><span class="s">"DraggingElement"</span> <span class="na">Width=</span><span class="s">"100"</span> <span class="na">Height=</span><span class="s">"100"</span> <span class="na">Background=</span><span class="s">"Gray"</span><span class="nt">&gt;</span>

     <span class="nt">&lt;framework:WindowDraggingExtension.DragWindow&gt;</span>
          <span class="nt">&lt;framework:WindowDraggingExtension</span> <span class="na">TargetWindow=</span><span class="s">"{x:Reference CurrentWindow}"</span> <span class="na">DraggingElementClicked=</span><span class="s">"WindowDraggingExtension_OnDraggingElementClicked"</span><span class="nt">/&gt;</span>
      <span class="nt">&lt;/framework:WindowDraggingExtension.DragWindow&gt;</span> 

      <span class="nt">&lt;TextBlock</span> <span class="na">x:Name=</span><span class="s">"TextBlock"</span> <span class="na">Margin=</span><span class="s">"10,10,10,10"</span> <span class="na">HorizontalAlignment=</span><span class="s">"Center"</span><span class="nt">&gt;&lt;/TextBlock&gt;</span>
  <span class="nt">&lt;/Border&gt;</span>
<span class="nt">&lt;/Window&gt;</span>
</code></pre></div></div>

<p>上面代码还使用方法拿到元素点击的事件，后台代码如下</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="k">private</span> <span class="k">void</span> <span class="nf">WindowDraggingExtension_OnDraggingElementClicked</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">EventArgs</span> <span class="n">e</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">TextBlock</span><span class="p">.</span><span class="n">Text</span> <span class="p">=</span> <span class="s">"林德熙是逗比"</span><span class="p">;</span>
        <span class="p">}</span>
</code></pre></div></div>

:ET