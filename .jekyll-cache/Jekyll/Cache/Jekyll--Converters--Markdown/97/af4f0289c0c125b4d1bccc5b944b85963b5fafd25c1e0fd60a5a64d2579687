I"g5<p>本文告诉大家如何创建一个 asp dotnet core 程序，这个程序使用 sqlite 保存，部署程序到 Centos 7 服务器</p>

<!--more-->

<!-- CreateTime:2019/8/29 19:17:48 -->

<!-- 标签： dotnetcore,aspdotnetcore,asp,数据库,sqlite -->

<h2 id="创建项目">创建项目</h2>

<p>本文是在 Windows 使用 VisualStudio 开发，通过 VisualStudio 可以快速创建一个 asp dotnet core 程序</p>

<p>点击文件，新建一个 ASP.NET Core 程序</p>

<!-- ![](image/dotnet core 使用 sqlite 部署到 Centos 服务器/dotnet core 使用 sqlite 部署到 Centos 服务器0.png) -->

<p><img src="http://image.acmx.xyz/lindexi%2F201892720503941" alt="" /></p>

<p>这里需要随意给一个项目的名，我这里给了 <code class="language-plaintext highlighter-rouge">CataiLerlasur</code> 随机的名，点击确定，选择 API 主要不要设置身份验证和启动 Docker 支持，关闭 https 这样才比较简单</p>

<!-- ![](image/dotnet core 使用 sqlite 部署到 Centos 服务器/dotnet core 使用 sqlite 部署到 Centos 服务器1.png) -->

<p><img src="http://image.acmx.xyz/lindexi%2F2018927205122243" alt="" /></p>

<h2 id="创建模型">创建模型</h2>

<p>在项目右击创建文件夹，这个文件夹建议叫 Model 在这个文件夹里面创建一个类，这个类需要有一个属性是 id 至于创建的是 int 还是字符串都随意。我就创建了一个 Lindexi 的类</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">public</span> <span class="k">class</span> <span class="nc">Lindexi</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="k">public</span> <span class="kt">string</span> <span class="n">Blog</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
</code></pre></div></div>

<p>这样就创建完成了模型，下面需要创建对应的控制</p>

<p>右击添加控制器，请看下图</p>

<!-- ![](image/dotnet core 使用 sqlite 部署到 Centos 服务器/dotnet core 使用 sqlite 部署到 Centos 服务器2.png) -->

<p><img src="http://image.acmx.xyz/lindexi%2F2018927205450633" alt="" /></p>

<p>通过这个方式可以快速创建</p>

<!-- ![](image/dotnet core 使用 sqlite 部署到 Centos 服务器/dotnet core 使用 sqlite 部署到 Centos 服务器3.png) -->

<p><img src="http://image.acmx.xyz/lindexi%2F201892720555568" alt="" /></p>

<p>现在可以选择模型类，也就是刚才创建的模型</p>

<!-- ![](image/dotnet core 使用 sqlite 部署到 Centos 服务器/dotnet core 使用 sqlite 部署到 Centos 服务器4.png) -->

<p><img src="http://image.acmx.xyz/lindexi%2F2018927205635970" alt="" /></p>

<p>然后点击加号添加上下文</p>

<!-- ![](image/dotnet core 使用 sqlite 部署到 Centos 服务器/dotnet core 使用 sqlite 部署到 Centos 服务器5.png) -->

<p><img src="http://image.acmx.xyz/lindexi%2F201892720579669" alt="" /></p>

<p>添加上下文等待 VisualStudio 创建类</p>

<!-- ![](image/dotnet core 使用 sqlite 部署到 Centos 服务器/dotnet core 使用 sqlite 部署到 Centos 服务器6.png) -->

<p><img src="http://image.acmx.xyz/lindexi%2F2018927205758438" alt="" /></p>

<h2 id="安装-sqlite">安装 Sqlite</h2>

<p>通过 Nuget 的方式可以安装，在 Nuget 搜索 <code class="language-plaintext highlighter-rouge">dotnet add package Microsoft.EntityFrameworkCore.Sqlite</code> 就可以安装</p>

<!-- ![](image/dotnet core 使用 sqlite 部署到 Centos 服务器/dotnet core 使用 sqlite 部署到 Centos 服务器7.png) -->

<p><img src="http://image.acmx.xyz/lindexi%2F201892720598596" alt="" /></p>

<h2 id="设置连接">设置连接</h2>

<p>现在默认还没有使用 Sqlite 连接，需要在 Startup 类的 ConfigureServices 函数使用 Sqlite 连接</p>

<!-- ![](image/dotnet core 使用 sqlite 部署到 Centos 服务器/dotnet core 使用 sqlite 部署到 Centos 服务器8.png) -->

<p><img src="http://image.acmx.xyz/lindexi%2F201892721113181" alt="" /></p>

<p>注意这里写的连接字符串是 <code class="language-plaintext highlighter-rouge">Filename=./xx.db</code> 这里的 xx.db 需要存在这个数据库，通过下面的命令行可以创建数据库</p>

<p>创建 Sqlite 数据库需要用到命令行，通过 cmd 命令行进入到对应的文件夹</p>

<p>如我刚才创建项目是在 <code class="language-plaintext highlighter-rouge">D:\程序\ethylene156\CataiLerlasur\CataiLerlasur\</code> 这个文件夹可以找到 <code class="language-plaintext highlighter-rouge">CataiLerlasur.csproj</code> 文件</p>

<!-- ![](image/dotnet core 使用 sqlite 部署到 Centos 服务器/dotnet core 使用 sqlite 部署到 Centos 服务器9.png) -->

<p><img src="http://image.acmx.xyz/lindexi%2F2018927211144928" alt="" /></p>

<p>输入下面两句代码</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">dotnet</span> <span class="n">ef</span> <span class="n">migrations</span> <span class="k">add</span> <span class="n">lindexi</span><span class="p">.</span><span class="n">github</span><span class="p">.</span><span class="n">io</span>

<span class="n">dotnet</span> <span class="n">ef</span> <span class="n">database</span> <span class="n">update</span>
</code></pre></div></div>

<p>如使用 PowerShell 请使用下面代码</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Add</span><span class="p">-</span><span class="n">Migration</span> <span class="n">InitialCreate</span>

<span class="n">Update</span><span class="p">-</span><span class="n">Database</span>
</code></pre></div></div>

<!-- ![](image/dotnet core 使用 sqlite 部署到 Centos 服务器/dotnet core 使用 sqlite 部署到 Centos 服务器10.png) -->

<p><img src="http://image.acmx.xyz/lindexi%2F2018927211716111" alt="" /></p>

<!-- ![](image/dotnet core 使用 sqlite 部署到 Centos 服务器/dotnet core 使用 sqlite 部署到 Centos 服务器11.png) -->

<p><img src="http://image.acmx.xyz/lindexi%2F2018927211716111" alt="" /></p>

<p>现在可以看到项目多了一个文件 <code class="language-plaintext highlighter-rouge">csdn.db</code> 和 Migrations 文件夹</p>

<p>上面两句代码是的意思是创建迁移版本，更新数据。更多请看<a href="https://www.cnblogs.com/GuZhenYin/p/8579420.html">Entity Framework Core 之数据库迁移 </a></p>

<h2 id="部署服务器">部署服务器</h2>

<p>在部署服务器之前先进行本地调试</p>

<p>在 LindexiController 的 GetLindexi 添加一些代码，这样可以在每次访问的时候都可以看到服务器将数据放在 Sqlite 而且在下一次使用的时候持久</p>

<p>这里添加的代码是如果 Sqlite 的数据太少了，就自动添加</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="k">public</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Lindexi</span><span class="p">&gt;</span> <span class="nf">GetLindexi</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">_context</span><span class="p">.</span><span class="n">Lindexi</span><span class="p">.</span><span class="nf">Count</span><span class="p">()</span> <span class="p">&lt;</span> <span class="m">10</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">_context</span><span class="p">.</span><span class="n">Lindexi</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">Lindexi</span><span class="p">()</span>
                <span class="p">{</span>
                    <span class="n">Blog</span> <span class="p">=</span> <span class="s">"http://blog.csdn.net/lindexi_gd"</span>
                <span class="p">});</span>

                <span class="n">_context</span><span class="p">.</span><span class="nf">SaveChanges</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="n">_context</span><span class="p">.</span><span class="n">Lindexi</span><span class="p">;</span>
        <span class="p">}</span>
</code></pre></div></div>

<p>这时还需要右击项目属性，点击调试，设置为默认打开浏览器就是打开 <code class="language-plaintext highlighter-rouge">api/Lindexi</code> 这样就可以调用刚才的 GetLindexi 方法</p>

<p>为什么需要设置路径是  <code class="language-plaintext highlighter-rouge">api/Lindexi</code> 请看 asp dotnet core 的路由</p>

<!-- ![](image/dotnet core 使用 sqlite 部署到 Centos 服务器/dotnet core 使用 sqlite 部署到 Centos 服务器12.png) -->

<p><img src="http://image.acmx.xyz/lindexi%2F2018927212642225" alt="" /></p>

<p>现在运行一下，可以看到出现了刚才放进去的字符</p>

<!-- ![](image/dotnet core 使用 sqlite 部署到 Centos 服务器/dotnet core 使用 sqlite 部署到 Centos 服务器13.png) -->

<p><img src="http://image.acmx.xyz/lindexi%2F201892721287551" alt="" /></p>

<p>在部署到 Linux 之前，需要设置端口和 ip 才可以在本地访问服务器的程序，在 ASP.NET Core 设置端口的方法很简单，通过在 Program 类添加设置 <code class="language-plaintext highlighter-rouge">UseUrls("http://0.0.0.0:5000")</code> 就可以</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="k">public</span> <span class="k">static</span> <span class="n">IWebHostBuilder</span> <span class="nf">CreateWebHostBuilder</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span> <span class="p">=&gt;</span>
            <span class="n">WebHost</span><span class="p">.</span><span class="nf">CreateDefaultBuilder</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
                <span class="p">.</span><span class="nf">UseUrls</span><span class="p">(</span><span class="s">"http://0.0.0.0:5000"</span><span class="p">)</span>
                <span class="p">.</span><span class="n">UseStartup</span><span class="p">&lt;</span><span class="n">Startup</span><span class="p">&gt;();</span>
</code></pre></div></div>

<p>上面的方法是可以让运行的 asp dotnet core 程序监听 5000 端口</p>

<p>现在可以将所有文件上传到 Linux 服务器，如何上传文件到服务器请自己谷歌，上传的是代码，实际上我是复制 <code class="language-plaintext highlighter-rouge">CataiLerlasur</code> 文件夹到服务器</p>

<p>上传之后在 Linux 进入对应的文件夹，也就是 <code class="language-plaintext highlighter-rouge">CataiLerlasur.csproj</code> 所在的文件夹，运行 <code class="language-plaintext highlighter-rouge">dotnet run</code> 就可以。在运行 dotnet run 之前需要先安装完成 dotnet core 才可以，如何安装请看<a href="https://www.microsoft.com/net/download/linux-package-manager/centos/sdk-current">Install .NET Core SDK  CentOS </a></p>

<!-- ![](image/dotnet core 使用 sqlite 部署到 Centos 服务器/dotnet core 使用 sqlite 部署到 Centos 服务器14.png) -->

<p><img src="http://image.acmx.xyz/lindexi%2F2018927213232378" alt="" /></p>

<p>在运行 <code class="language-plaintext highlighter-rouge">dotnet run</code> 就完成了在服务器部署了，现在可以在本地访问刚才的程序</p>

<p>在浏览器打开服务器的 ip 和端口号，输入 url 就可以看到访问的时候和本地调试一样的数据</p>

<p>这时的数据保存在 sqlite 文件，尝试将本地的 sqlite 文件替换到服务器，可以看到再次访问之后两条数据，也就是备份的时候只需要备份数据库就可以，数据库就是一个文件。如果想将自己的程序放在其他的服务器运行，也只需要复制整个文件夹就可以</p>

<!-- ![](image/dotnet core 使用 sqlite 部署到 Centos 服务器/dotnet core 使用 sqlite 部署到 Centos 服务器15.png) -->

<p><img src="http://image.acmx.xyz/lindexi%2F201892721349331" alt="" /></p>

<p>用 Sqlite 可以简单将数据保存在服务器，只需要定期保存文件就可以，这个文件可以放在 Window 进行调试，也就是在 Window 和 Linux 可以使用相同的 Sqlite 这样开发很简单</p>

<p>从 Linux 服务器下载 sqlite 文件，推荐使用 sqlite expert 工具打开 sqlite 文件</p>

<!-- ![](image/dotnet core 使用 sqlite 部署到 Centos 服务器/dotnet core 使用 sqlite 部署到 Centos 服务器16.png) -->

<p><img src="http://image.acmx.xyz/lindexi%2F2018927213928437" alt="" /></p>

<p>点击打开数据库文件，点击对应的数据就可以看到写进入的，不需要通过写 sql 语句就可以创建一个表，在表里添加列</p>

<!-- ![](image/dotnet core 使用 sqlite 部署到 Centos 服务器/dotnet core 使用 sqlite 部署到 Centos 服务器17.png) -->

<p><img src="http://image.acmx.xyz/lindexi%2F201892721404323" alt="" /></p>

:ET