I"|Y<p>每次发布 dotnet core 应用都会觉得发布文件太大，而如果使用极限压缩，用 CoreRT 能让发布的控制台文件到 5KB 左右，不需要带框架就能在其他设备运行</p>

<!--more-->

<!-- CreateTime:2019/10/4 14:59:36 -->

<!-- csdn -->

<p>这是微软 <a href="https://github.com/MichalStrehovsky">MichalStrehovsky</a> 大佬，也就是 CoreRT 项目开发者给的方法</p>

<p>在开始写代码之前，需要定义一些基础的类，因为不包含任何运行环境，所以基础的 object 这些都需要重新定义，这里的代码放在 <a href="https://github.com/MichalStrehovsky/zerosharp/blob/master/no-runtime/zerosharp.cs">github</a> 我也在本文最后贴出代码</p>

<p>现在输出控制台的代码不是原先的 Console.WriteLine 而是通过底层方法</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">unsafe</span> <span class="k">class</span> <span class="nc">Program</span>
<span class="p">{</span>
    <span class="p">[</span><span class="nf">DllImport</span><span class="p">(</span><span class="s">"api-ms-win-core-processenvironment-l1-1-0"</span><span class="p">)]</span>
    <span class="k">static</span> <span class="k">extern</span> <span class="n">IntPtr</span> <span class="nf">GetStdHandle</span><span class="p">(</span><span class="kt">int</span> <span class="n">nStdHandle</span><span class="p">);</span>

    <span class="p">[</span><span class="nf">DllImport</span><span class="p">(</span><span class="s">"api-ms-win-core-console-l1-1-0"</span><span class="p">)]</span>
    <span class="k">static</span> <span class="k">extern</span> <span class="n">IntPtr</span> <span class="nf">WriteConsoleW</span><span class="p">(</span><span class="n">IntPtr</span> <span class="n">hConsole</span><span class="p">,</span> <span class="k">void</span><span class="p">*</span> <span class="n">lpBuffer</span><span class="p">,</span> <span class="kt">int</span> <span class="n">charsToWrite</span><span class="p">,</span> <span class="k">out</span> <span class="kt">int</span> <span class="n">charsWritten</span><span class="p">,</span> <span class="k">void</span><span class="p">*</span> <span class="n">reserved</span><span class="p">);</span>

    <span class="k">static</span> <span class="kt">int</span> <span class="nf">Main</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="kt">string</span> <span class="n">hello</span> <span class="p">=</span> <span class="s">"Hello world!"</span><span class="p">;</span>
        <span class="k">fixed</span> <span class="p">(</span><span class="kt">char</span><span class="p">*</span> <span class="n">c</span> <span class="p">=</span> <span class="n">hello</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">int</span> <span class="n">charsWritten</span><span class="p">;</span>
            <span class="nf">WriteConsoleW</span><span class="p">(</span><span class="nf">GetStdHandle</span><span class="p">(-</span><span class="m">11</span><span class="p">),</span> <span class="n">c</span><span class="p">,</span> <span class="n">hello</span><span class="p">.</span><span class="n">Length</span><span class="p">,</span> <span class="k">out</span> <span class="n">charsWritten</span><span class="p">,</span> <span class="k">null</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="m">42</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>最难的是如何编译这个文件</p>

<p>编译需要先使用 csc 编译为 IL 代码，然后通过 ilcompiler 编译为obj文件，然后通过 link 编译为运行文件</p>

<p>从开始菜单找到 x64 Native Tools Command Prompt for VS 2019 然后进入上面代码所在文件夹，执行下面代码编译</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">csc</span> <span class="p">/</span><span class="n">debug</span><span class="p">:</span><span class="n">embedded</span> <span class="p">/</span><span class="n">noconfig</span> <span class="p">/</span><span class="n">nostdlib</span> <span class="p">/</span><span class="n">runtimemetadataversion</span><span class="p">:</span><span class="n">v4</span><span class="p">.</span><span class="m">0.30319</span> <span class="n">zerosharp</span><span class="p">.</span><span class="n">cs</span> <span class="p">/</span><span class="k">out</span><span class="p">:</span><span class="n">zerosharp</span><span class="p">.</span><span class="n">ilexe</span> <span class="p">/</span><span class="n">langversion</span><span class="p">:</span><span class="n">latest</span> <span class="p">/</span><span class="k">unsafe</span>
</code></pre></div></div>

<p>编译完成可以看到 zerosharp.ilexe 文件，然后通过 ilcompiler 将这个文件编译为 zerosharp.map 和 zerosharp.obj 文件</p>

<p>在自己的 NuGet 缓存文件里面找到 runtime.win-x64.microsoft.dotnet.ilcompiler 库，可以在资源管理器地址输入下面代码找到缓存文件</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">%</span><span class="n">appdata</span><span class="p">%..</span><span class="err">\</span><span class="p">..</span><span class="err">\</span><span class="p">..</span><span class="err">\</span><span class="p">.</span><span class="n">nuget</span><span class="err">\</span><span class="n">packages</span><span class="err">\</span><span class="n">runtime</span><span class="p">.</span><span class="n">win</span><span class="p">-</span><span class="n">x64</span><span class="p">.</span><span class="n">microsoft</span><span class="p">.</span><span class="n">dotnet</span><span class="p">.</span><span class="n">ilcompiler</span>
</code></pre></div></div>

<p>找到里面的最新版本，在文件夹里面的 tools 文件夹可以找到 ilc.exe 文件，如在我电脑的的文件是</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">c</span><span class="p">:</span><span class="err">\</span><span class="n">Users</span><span class="err">\</span><span class="n">lindexi</span><span class="err">\</span><span class="p">.</span><span class="n">nuget</span><span class="err">\</span><span class="n">packages</span><span class="err">\</span><span class="n">runtime</span><span class="p">.</span><span class="n">win</span><span class="p">-</span><span class="n">x64</span><span class="p">.</span><span class="n">microsoft</span><span class="p">.</span><span class="n">dotnet</span><span class="p">.</span><span class="n">ilcompiler</span><span class="err">\</span><span class="m">1.0</span><span class="p">.</span><span class="m">0</span><span class="p">-</span><span class="n">alpha</span><span class="p">-</span><span class="m">27606</span><span class="p">-</span><span class="m">05</span><span class="err">\</span><span class="n">tools</span><span class="err">\</span><span class="n">ilc</span><span class="p">.</span><span class="n">exe</span>
</code></pre></div></div>

<p>记下这个路径，接下来将使用这个工具编译</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">&gt;</span><span class="n">c</span><span class="p">:</span><span class="err">\</span><span class="n">Users</span><span class="err">\</span><span class="n">lindexi</span><span class="err">\</span><span class="p">.</span><span class="n">nuget</span><span class="err">\</span><span class="n">packages</span><span class="err">\</span><span class="n">runtime</span><span class="p">.</span><span class="n">win</span><span class="p">-</span><span class="n">x64</span><span class="p">.</span><span class="n">microsoft</span><span class="p">.</span><span class="n">dotnet</span><span class="p">.</span><span class="n">ilcompiler</span><span class="err">\</span><span class="m">1.0</span><span class="p">.</span><span class="m">0</span><span class="p">-</span><span class="n">alpha</span><span class="p">-</span><span class="m">27606</span><span class="p">-</span><span class="m">05</span><span class="err">\</span><span class="n">tools</span><span class="err">\</span><span class="n">ilc</span><span class="p">.</span><span class="n">exe</span> <span class="n">zerosharp</span><span class="p">.</span><span class="n">ilexe</span> <span class="p">-</span><span class="n">o</span> <span class="n">zerosharp</span><span class="p">.</span><span class="n">obj</span> <span class="p">--</span><span class="n">systemmodule</span> <span class="n">zerosharp</span> <span class="p">--</span><span class="n">map</span> <span class="n">zerosharp</span><span class="p">.</span><span class="n">map</span> <span class="p">-</span><span class="n">O</span>
</code></pre></div></div>

<p>然后用 link 连接</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">link</span> <span class="p">/</span><span class="n">subsystem</span><span class="p">:</span><span class="n">console</span> <span class="n">zerosharp</span><span class="p">.</span><span class="n">obj</span> <span class="p">/</span><span class="n">entry</span><span class="p">:</span><span class="n">__managed__Main</span> <span class="n">kernel32</span><span class="p">.</span><span class="n">lib</span> <span class="p">/</span><span class="n">merge</span><span class="p">:.</span><span class="n">modules</span><span class="p">=.</span><span class="n">pdata</span> <span class="p">/</span><span class="n">incremental</span><span class="p">:</span><span class="n">no</span>
</code></pre></div></div>

<p>执行上面代码就可以编译 zerosharp.exe 文件，这个文件只有5KB可以将这个程序放在其他设备运行</p>

<p>下面是所有代码</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Runtime.InteropServices</span><span class="p">;</span>

<span class="cp">#region A couple very basic things
</span><span class="k">namespace</span> <span class="nn">System</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">Object</span> <span class="p">{</span> <span class="n">IntPtr</span> <span class="n">m_pEEType</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="k">struct</span> <span class="nc">Void</span> <span class="p">{</span> <span class="p">}</span>
    <span class="k">public</span> <span class="k">struct</span> <span class="nc">Boolean</span> <span class="p">{</span> <span class="p">}</span>
    <span class="k">public</span> <span class="k">struct</span> <span class="nc">Char</span> <span class="p">{</span> <span class="p">}</span>
    <span class="k">public</span> <span class="k">struct</span> <span class="nc">SByte</span> <span class="p">{</span> <span class="p">}</span>
    <span class="k">public</span> <span class="k">struct</span> <span class="nc">Byte</span> <span class="p">{</span> <span class="p">}</span>
    <span class="k">public</span> <span class="k">struct</span> <span class="nc">Int16</span> <span class="p">{</span> <span class="p">}</span>
    <span class="k">public</span> <span class="k">struct</span> <span class="nc">UInt16</span> <span class="p">{</span> <span class="p">}</span>
    <span class="k">public</span> <span class="k">struct</span> <span class="nc">Int32</span> <span class="p">{</span> <span class="p">}</span>
    <span class="k">public</span> <span class="k">struct</span> <span class="nc">UInt32</span> <span class="p">{</span> <span class="p">}</span>
    <span class="k">public</span> <span class="k">struct</span> <span class="nc">Int64</span> <span class="p">{</span> <span class="p">}</span>
    <span class="k">public</span> <span class="k">struct</span> <span class="nc">UInt64</span> <span class="p">{</span> <span class="p">}</span>
    <span class="k">public</span> <span class="k">struct</span> <span class="nc">IntPtr</span> <span class="p">{</span> <span class="p">}</span>
    <span class="k">public</span> <span class="k">struct</span> <span class="nc">UIntPtr</span> <span class="p">{</span> <span class="p">}</span>
    <span class="k">public</span> <span class="k">struct</span> <span class="nc">Single</span> <span class="p">{</span> <span class="p">}</span>
    <span class="k">public</span> <span class="k">struct</span> <span class="nc">Double</span> <span class="p">{</span> <span class="p">}</span>
    <span class="k">public</span> <span class="k">abstract</span> <span class="k">class</span> <span class="nc">ValueType</span> <span class="p">{</span> <span class="p">}</span>
    <span class="k">public</span> <span class="k">abstract</span> <span class="k">class</span> <span class="nc">Enum</span> <span class="p">:</span> <span class="n">ValueType</span> <span class="p">{</span> <span class="p">}</span>
    <span class="k">public</span> <span class="k">struct</span> <span class="nc">Nullable</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="k">where</span> <span class="n">T</span> <span class="p">:</span> <span class="k">struct</span> <span class="err">{</span> <span class="err">}</span>
    
    <span class="nc">public</span> <span class="k">sealed</span> <span class="k">class</span> <span class="nc">String</span> <span class="p">{</span> <span class="k">public</span> <span class="k">readonly</span> <span class="kt">int</span> <span class="n">Length</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="k">abstract</span> <span class="k">class</span> <span class="nc">Array</span> <span class="p">{</span> <span class="p">}</span>
    <span class="k">public</span> <span class="k">abstract</span> <span class="k">class</span> <span class="nc">Delegate</span> <span class="p">{</span> <span class="p">}</span>
    <span class="k">public</span> <span class="k">abstract</span> <span class="k">class</span> <span class="nc">MulticastDelegate</span> <span class="p">:</span> <span class="n">Delegate</span> <span class="p">{</span> <span class="p">}</span>

    <span class="k">public</span> <span class="k">struct</span> <span class="nc">RuntimeTypeHandle</span> <span class="p">{</span> <span class="p">}</span>
    <span class="k">public</span> <span class="k">struct</span> <span class="nc">RuntimeMethodHandle</span> <span class="p">{</span> <span class="p">}</span>
    <span class="k">public</span> <span class="k">struct</span> <span class="nc">RuntimeFieldHandle</span> <span class="p">{</span> <span class="p">}</span>

    <span class="k">public</span> <span class="k">class</span> <span class="nc">Attribute</span> <span class="p">{</span> <span class="p">}</span>

    <span class="k">namespace</span> <span class="nn">Runtime.CompilerServices</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="k">class</span> <span class="nc">RuntimeHelpers</span>
        <span class="p">{</span>
            <span class="k">public</span> <span class="k">static</span> <span class="k">unsafe</span> <span class="kt">int</span> <span class="n">OffsetToStringData</span> <span class="p">=&gt;</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">IntPtr</span><span class="p">)</span> <span class="p">+</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="k">namespace</span> <span class="nn">System.Runtime.InteropServices</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">sealed</span> <span class="k">class</span> <span class="nc">DllImportAttribute</span> <span class="p">:</span> <span class="n">Attribute</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nf">DllImportAttribute</span><span class="p">(</span><span class="kt">string</span> <span class="n">dllName</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="cp">#endregion
</span>
<span class="cp">#region Things needed by ILC
</span><span class="k">namespace</span> <span class="nn">System</span>
<span class="p">{</span>
    <span class="k">namespace</span> <span class="nn">Runtime</span>
    <span class="p">{</span>
        <span class="k">internal</span> <span class="k">sealed</span> <span class="k">class</span> <span class="nc">RuntimeExportAttribute</span> <span class="p">:</span> <span class="n">Attribute</span>
        <span class="p">{</span>
            <span class="k">public</span> <span class="nf">RuntimeExportAttribute</span><span class="p">(</span><span class="kt">string</span> <span class="n">entry</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">class</span> <span class="nc">Array</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="p">:</span> <span class="n">Array</span> <span class="p">{</span> <span class="p">}</span>
<span class="p">}</span>

<span class="k">namespace</span> <span class="nn">Internal.Runtime.CompilerHelpers</span>
<span class="p">{</span>
    <span class="k">using</span> <span class="nn">System.Runtime</span><span class="p">;</span>

    <span class="k">class</span> <span class="nc">StartupCodeHelpers</span>
    <span class="p">{</span>
        <span class="p">[</span><span class="nf">RuntimeExport</span><span class="p">(</span><span class="s">"RhpReversePInvoke2"</span><span class="p">)]</span>
        <span class="k">static</span> <span class="k">void</span> <span class="nf">RhpReversePInvoke2</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>
        <span class="p">[</span><span class="nf">RuntimeExport</span><span class="p">(</span><span class="s">"RhpReversePInvokeReturn2"</span><span class="p">)]</span>
        <span class="k">static</span> <span class="k">void</span> <span class="nf">RhpReversePInvokeReturn2</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>
        <span class="p">[</span><span class="n">System</span><span class="p">.</span><span class="n">Runtime</span><span class="p">.</span><span class="nf">RuntimeExport</span><span class="p">(</span><span class="s">"__fail_fast"</span><span class="p">)]</span>
        <span class="k">static</span> <span class="k">void</span> <span class="nf">FailFast</span><span class="p">()</span> <span class="p">{</span> <span class="k">while</span> <span class="p">(</span><span class="k">true</span><span class="p">)</span> <span class="p">;</span> <span class="p">}</span>
        <span class="p">[</span><span class="n">System</span><span class="p">.</span><span class="n">Runtime</span><span class="p">.</span><span class="nf">RuntimeExport</span><span class="p">(</span><span class="s">"RhpPInvoke"</span><span class="p">)]</span>
        <span class="k">static</span> <span class="k">void</span> <span class="nf">RphPinvoke</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>
        <span class="p">[</span><span class="n">System</span><span class="p">.</span><span class="n">Runtime</span><span class="p">.</span><span class="nf">RuntimeExport</span><span class="p">(</span><span class="s">"RhpPInvokeReturn"</span><span class="p">)]</span>
        <span class="k">static</span> <span class="k">void</span> <span class="nf">RphPinvokeReturn</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="cp">#endregion
</span>
<span class="k">unsafe</span> <span class="k">class</span> <span class="nc">Program</span>
<span class="p">{</span>
    <span class="p">[</span><span class="nf">DllImport</span><span class="p">(</span><span class="s">"api-ms-win-core-processenvironment-l1-1-0"</span><span class="p">)]</span>
    <span class="k">static</span> <span class="k">extern</span> <span class="n">IntPtr</span> <span class="nf">GetStdHandle</span><span class="p">(</span><span class="kt">int</span> <span class="n">nStdHandle</span><span class="p">);</span>

    <span class="p">[</span><span class="nf">DllImport</span><span class="p">(</span><span class="s">"api-ms-win-core-console-l1-1-0"</span><span class="p">)]</span>
    <span class="k">static</span> <span class="k">extern</span> <span class="n">IntPtr</span> <span class="nf">WriteConsoleW</span><span class="p">(</span><span class="n">IntPtr</span> <span class="n">hConsole</span><span class="p">,</span> <span class="k">void</span><span class="p">*</span> <span class="n">lpBuffer</span><span class="p">,</span> <span class="kt">int</span> <span class="n">charsToWrite</span><span class="p">,</span> <span class="k">out</span> <span class="kt">int</span> <span class="n">charsWritten</span><span class="p">,</span> <span class="k">void</span><span class="p">*</span> <span class="n">reserved</span><span class="p">);</span>

    <span class="k">static</span> <span class="kt">int</span> <span class="nf">Main</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="kt">string</span> <span class="n">hello</span> <span class="p">=</span> <span class="s">"Hello world!"</span><span class="p">;</span>
        <span class="k">fixed</span> <span class="p">(</span><span class="kt">char</span><span class="p">*</span> <span class="n">c</span> <span class="p">=</span> <span class="n">hello</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">int</span> <span class="n">charsWritten</span><span class="p">;</span>
            <span class="nf">WriteConsoleW</span><span class="p">(</span><span class="nf">GetStdHandle</span><span class="p">(-</span><span class="m">11</span><span class="p">),</span> <span class="n">c</span><span class="p">,</span> <span class="n">hello</span><span class="p">.</span><span class="n">Length</span><span class="p">,</span> <span class="k">out</span> <span class="n">charsWritten</span><span class="p">,</span> <span class="k">null</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="m">42</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

:ET