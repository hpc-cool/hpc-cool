I"<p>有一些代码是在框架层写的，这部分代码不应该在后台线程抛出异常，如何将后台线程的异常在主线程抛出，同时不会带上主线程的堆栈可以保留异常的全部信息</p>

<!--more-->

<!-- CreateTime:2019/10/7 13:24:54 -->

<!-- csdn -->

<p>在 .NET 提供了 ExceptionDispatchInfo 类，可以用于捕获某个异常，然后使用提供的抛出方法重新抛出</p>

<p>可以用在某个地方统一收集异常，然后统一抛出，此时抛出的异常的堆栈和信息都不会改变，会比下面的方法更好</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">NalbibechaLuhaqayna</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="n">Exception</span> <span class="n">exception</span> <span class="p">=</span> <span class="nf">Foo</span><span class="p">();</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">exception</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="nf">ReThrowException</span><span class="p">(</span><span class="n">exception</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">private</span> <span class="k">static</span> <span class="n">Exception</span> <span class="nf">Foo</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="n">Exception</span> <span class="n">exception</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
            <span class="k">try</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">Exception</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">Exception</span> <span class="n">e</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">exception</span> <span class="p">=</span> <span class="n">e</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="n">exception</span><span class="p">;</span>
        <span class="p">}</span>
             
        <span class="k">private</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">ReThrowException</span><span class="p">(</span><span class="n">Exception</span> <span class="n">exception</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">throw</span> <span class="n">exception</span><span class="p">;</span>
        <span class="p">}</span>
</code></pre></div></div>

<p>上面代码使用 throw 在另一个函数抛出，可以从堆栈看到，没有原先抛异常 Foo 函数，将会让异常堆栈加上了抛出函数的调用堆栈，如果此时是在跨线程用的，那么将会找不到原有线程堆栈</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   at KicaicicayiJearjelrelur.MainWindow.ReThrowException(Exception exception)
   at KicaicicayiJearjelrelur.MainWindow.NalbibechaLuhaqayna()
   at KicaicicayiJearjelrelur.MainWindow..ctor()
</code></pre></div></div>

<p>这样进行异常调试就比较难知道是在哪个函数的异常，特别是空异常</p>

<p>如果使用下面方法抛出，那么可以保存异常堆栈</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="k">private</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">ReThrowException</span><span class="p">(</span><span class="n">Exception</span> <span class="n">exception</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">ExceptionDispatchInfo</span><span class="p">.</span><span class="nf">Capture</span><span class="p">(</span><span class="n">exception</span><span class="p">).</span><span class="nf">Throw</span><span class="p">();</span>
        <span class="p">}</span>
</code></pre></div></div>

<p>可以从调用堆栈看到开始的异常的堆栈</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   at KicaicicayiJearjelrelur.MainWindow.Foo()
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at KicaicicayiJearjelrelur.MainWindow.ReThrowException(Exception exception)
   at KicaicicayiJearjelrelur.MainWindow.NalbibechaLuhaqayna()
   at KicaicicayiJearjelrelur.MainWindow..ctor()
</code></pre></div></div>

<p>如果是在后台线程框架抛出的，建议放在主线程可以这样做</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="k">private</span> <span class="k">void</span> <span class="nf">ReThrowException</span><span class="p">(</span><span class="n">Exception</span> <span class="n">exception</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Dispatcher</span><span class="p">.</span><span class="nf">InvokeAsync</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span> <span class="n">ExceptionDispatchInfo</span><span class="p">.</span><span class="nf">Capture</span><span class="p">(</span><span class="n">exception</span><span class="p">).</span><span class="nf">Throw</span><span class="p">();</span> <span class="p">});</span>
        <span class="p">}</span>
</code></pre></div></div>

<p>代码放在 <a href="https://github.com/lindexi/lindexi_gd/tree/b418b8d562a9534b450488aa15e8ae58bd54542e/KicaicicayiJearjelrelur/KicaicicayiJearjelrelur">github</a> 欢迎下载</p>

<p>在 WPF 框架我使用这个方法提了建议，在触摸线程的异常抛到主线程，如果您觉得我的方法可以，请在 <a href="https://github.com/dotnet/wpf/pull/945">这里</a> 点赞</p>

<p>详细请看 <a href="https://blog.walterlv.com/post/exceptiondispatchinfo-capture-throw.html">使用 ExceptionDispatchInfo 捕捉并重新抛出异常 - walterlv</a></p>

:ET