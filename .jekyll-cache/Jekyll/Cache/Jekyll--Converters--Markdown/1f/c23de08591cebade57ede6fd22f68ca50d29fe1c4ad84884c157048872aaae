I"h:<p>本文主要是告诉大家一个省内存的方法，将整个文件夹的内容作为一个压缩包输出，但是实际上没有申请那么多的内存，也不需要升级创建一个压缩包文件。原理是通过逐个读文件然后按照压缩包格式输出</p>

<!--more-->

<!-- CreateTime:5/25/2020 7:09:13 PM -->

<p>在每个请求的方法可以拿到 HttpContext 属性，通过这个属性拿到 Response 属性，在这里可以使用 BodyWriter 属性，在这个属性里面写入的内容将会被客户端下载</p>

<p>而这个属性可以作为 Stream 请看下面代码</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>     <span class="k">using</span> <span class="nn">var</span> <span class="n">stream</span> <span class="p">=</span> <span class="n">HttpContext</span><span class="p">.</span><span class="n">Response</span><span class="p">.</span><span class="n">BodyWriter</span><span class="p">.</span><span class="nf">AsStream</span><span class="p">();</span>
</code></pre></div></div>

<p>在 .NET 中可以通过 ZipArchive 将一个文件夹的文件按照压缩文件格式写入，还可以设置压缩的压缩率等，可以设置文件所在文件夹的路径</p>

<p>通过在这个 stream 创建一个 ZipArchive 类，然后在这个类里面创建文件的方法就可以做到不断向客户端发送文件，发送的文件都在一个压缩包里面</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="c1">/// &lt;summary&gt;</span>
        <span class="c1">/// 将一个文件夹的内容读取为 Stream 的压缩包</span>
        <span class="c1">/// &lt;/summary&gt;</span>
        <span class="c1">/// &lt;param name="directory"&gt;&lt;/param&gt;</span>
        <span class="c1">/// &lt;param name="stream"&gt;&lt;/param&gt;</span>
        <span class="k">public</span> <span class="k">static</span> <span class="k">async</span> <span class="n">Task</span> <span class="nf">ReadDirectoryToZipStreamAsync</span><span class="p">(</span><span class="n">DirectoryInfo</span> <span class="n">directory</span><span class="p">,</span> <span class="n">Stream</span> <span class="n">stream</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">fileList</span> <span class="p">=</span> <span class="n">directory</span><span class="p">.</span><span class="nf">GetFiles</span><span class="p">();</span>

            <span class="k">using</span> <span class="nn">var</span> <span class="n">zipArchive</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">ZipArchive</span><span class="p">(</span><span class="n">stream</span><span class="p">,</span> <span class="n">ZipArchiveMode</span><span class="p">.</span><span class="n">Create</span><span class="p">);</span>
            <span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">file</span> <span class="k">in</span> <span class="n">fileList</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="kt">var</span> <span class="n">relativePath</span> <span class="p">=</span> <span class="n">file</span><span class="p">.</span><span class="n">FullName</span><span class="p">.</span><span class="nf">Replace</span><span class="p">(</span><span class="n">directory</span><span class="p">.</span><span class="n">FullName</span><span class="p">,</span> <span class="s">""</span><span class="p">);</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">relativePath</span><span class="p">.</span><span class="nf">StartsWith</span><span class="p">(</span><span class="s">"\\"</span><span class="p">)</span> <span class="p">||</span> <span class="n">relativePath</span><span class="p">.</span><span class="nf">StartsWith</span><span class="p">(</span><span class="s">"//"</span><span class="p">))</span>
                <span class="p">{</span>
                    <span class="n">relativePath</span> <span class="p">=</span> <span class="n">relativePath</span><span class="p">.</span><span class="nf">Substring</span><span class="p">(</span><span class="m">1</span><span class="p">);</span>
                <span class="p">}</span>

                <span class="kt">var</span> <span class="n">zipArchiveEntry</span> <span class="p">=</span> <span class="n">zipArchive</span><span class="p">.</span><span class="nf">CreateEntry</span><span class="p">(</span><span class="n">relativePath</span><span class="p">,</span> <span class="n">CompressionLevel</span><span class="p">.</span><span class="n">NoCompression</span><span class="p">);</span>

                <span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">entryStream</span> <span class="p">=</span> <span class="n">zipArchiveEntry</span><span class="p">.</span><span class="nf">Open</span><span class="p">())</span>
                <span class="p">{</span>
                    <span class="k">using</span> <span class="nn">var</span> <span class="n">toZipStream</span> <span class="p">=</span> <span class="n">file</span><span class="p">.</span><span class="nf">OpenRead</span><span class="p">();</span>
                    <span class="k">await</span> <span class="n">toZipStream</span><span class="p">.</span><span class="nf">CopyToAsync</span><span class="p">(</span><span class="n">entryStream</span><span class="p">);</span>
                <span class="p">}</span>

                <span class="k">await</span> <span class="n">stream</span><span class="p">.</span><span class="nf">FlushAsync</span><span class="p">();</span>
            <span class="p">}</span>
        <span class="p">}</span>
</code></pre></div></div>

<p>上面的代码可以让运行的程序不需要申请和需要传输一样大的内存空间，或者不需要先执行压缩放在本地文件，可以不断读取本地文件然后上传。读取本地文件等都通过 CopyToAsync 自动设置缓存大小。如果不放心 CopyToAsync 方法设置的缓存大小，可以通过重载的方法手动设置缓存的大小</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      <span class="k">await</span> <span class="n">toZipStream</span><span class="p">.</span><span class="nf">CopyToAsync</span><span class="p">(</span><span class="n">stream</span><span class="p">,</span> <span class="n">bufferSize</span><span class="p">:</span> <span class="m">100</span><span class="p">);</span>
</code></pre></div></div>

<p>上面的代码设置了文件不要压缩，因为作为文件传输的时候，实际上我的业务是在内网传输，我的磁盘读取速度大概是 20M 一秒，而网络传输是 10M 一秒，也就是此时的压缩其实没什么意义，压缩减少的内容减少的传输时间就和压缩的时间差不多</p>

<p>如果小伙伴需要传输的时候压缩，请设置 zipArchive.CreateEntry 方法</p>

<p>当然此方法的缺点是，也许传输的时候服务器自己读取文件炸了，此时就会传输的文件不对，同时客户端不知道服务器传的对不对，因为压缩的大小没有告诉客户端。如果要告诉客户端压缩后的大小就需要先在服务器端进行压缩。本文的方法设置的是没有压缩率的压缩，大概的大小还可以告诉用户</p>

<p>此方法可以如何使用？在随意一个 Get 方法里面就可以通过 HttpContext 传入 Response 属性</p>

<p>在使用 BodyWriter 写入之前需要先设置 StatusCode 的值</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>            <span class="n">HttpContext</span><span class="p">.</span><span class="n">Response</span><span class="p">.</span><span class="n">StatusCode</span> <span class="p">=</span> <span class="n">StatusCodes</span><span class="p">.</span><span class="n">Status200OK</span><span class="p">;</span>

            <span class="k">using</span> <span class="nn">var</span> <span class="n">stream</span> <span class="p">=</span> <span class="n">HttpContext</span><span class="p">.</span><span class="n">Response</span><span class="p">.</span><span class="n">BodyWriter</span><span class="p">.</span><span class="nf">AsStream</span><span class="p">();</span>
</code></pre></div></div>

<p>假设需要返回的文件夹是 <code class="language-plaintext highlighter-rouge">f:\lindexi\test\</code> 可以通过下面代码的方式将文件夹输出为压缩包</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="p">[</span><span class="n">HttpGet</span><span class="p">]</span>
        <span class="p">[</span><span class="nf">Route</span><span class="p">(</span><span class="s">"{id}"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span> <span class="nf">Get</span><span class="p">([</span><span class="n">FromRoute</span><span class="p">]</span> <span class="kt">string</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">folder</span> <span class="p">=</span> <span class="s">@"f:\lindexi\test\"</span><span class="p">;</span>
            <span class="n">HttpContext</span><span class="p">.</span><span class="n">Response</span><span class="p">.</span><span class="n">StatusCode</span> <span class="p">=</span> <span class="n">StatusCodes</span><span class="p">.</span><span class="n">Status200OK</span><span class="p">;</span>

            <span class="k">using</span> <span class="nn">var</span> <span class="n">stream</span> <span class="p">=</span> <span class="n">HttpContext</span><span class="p">.</span><span class="n">Response</span><span class="p">.</span><span class="n">BodyWriter</span><span class="p">.</span><span class="nf">AsStream</span><span class="p">();</span>

            <span class="k">await</span> <span class="nf">ReadDirectoryToZipStreamAsync</span><span class="p">(</span><span class="k">new</span> <span class="nf">DirectoryInfo</span><span class="p">(</span><span class="n">folder</span><span class="p">),</span> <span class="n">stream</span><span class="p">);</span>
        <span class="p">}</span>
</code></pre></div></div>

<p>本地我写了一个 PowerShell 脚本运行</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">For</span><span class="w"> </span><span class="p">(</span><span class="nv">$i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="nv">$i</span><span class="w"> </span><span class="o">-le</span><span class="w"> </span><span class="mi">100000</span><span class="p">;</span><span class="w"> </span><span class="nv">$i</span><span class="o">++</span><span class="p">)</span><span class="w"> 
</span><span class="p">{</span><span class="w">
 </span><span class="p">(</span><span class="n">new-object</span><span class="w"> </span><span class="nx">System.Net.WebClient</span><span class="p">)</span><span class="o">.</span><span class="nf">DownloadFile</span><span class="p">(</span><span class="s2">"http://localhost:5000/File/doubi"</span><span class="p">,</span><span class="w"> </span><span class="s2">"F:\lindexi\zip\2.zip"</span><span class="p">)</span><span class="w">
</span><span class="p">}</span><span class="w"> 
</span></code></pre></div></div>

<p>本地运行这个脚本可以看到内存其实没有 GC 也没有溢出，我运行看到内存大概在 100M 左右</p>

<p>获取的时候会占用一些 CPU 资源，但是很省内存</p>

<p>如果小伙伴有更好的方法欢迎告诉我</p>

<p>本文代码放在<a href="https://github.com/lindexi/lindexi_gd/tree/32e2de954d92cc9fa359ae6eacd327405e156fe4/LarnaceakemLachonanafemhejal">github</a>欢迎小伙伴访问</p>

<p>我将这个逻辑抽作为库，放在 NuGet 上，大家可以安装 <code class="language-plaintext highlighter-rouge">Lindexi.Src.DirectoryToZipStream</code> 库或 <code class="language-plaintext highlighter-rouge">Lindexi.Src.DirectoryToZipStream.Source</code> 源代码包安装使用。这个库的代码也在 GitHub 上完全开源，请看 <a href="https://github.com/lindexi/UWP/tree/94450971838749de2ff0f8bea5238379040c1998/package/Library/DirectoryToZipStream">https://github.com/lindexi/UWP/tree/94450971838749de2ff0f8bea5238379040c1998/package/Library/DirectoryToZipStream</a></p>

<p>在安装库之后，加上命名空间引用 <code class="language-plaintext highlighter-rouge">using Lindexi.Src.DirectoryToZipStream;</code> 接着就可以传入空间需要写入的 Stream 对象，如上面代码的 <code class="language-plaintext highlighter-rouge">HttpContext.Response.BodyWriter.AsStream()</code> 和一个文件夹，如下面代码的 folder 变量</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">var</span> <span class="n">stream</span> <span class="p">=</span> <span class="n">HttpContext</span><span class="p">.</span><span class="n">Response</span><span class="p">.</span><span class="n">BodyWriter</span><span class="p">.</span><span class="nf">AsStream</span><span class="p">();</span>
<span class="n">DirectoryToZipStreamHelper</span><span class="p">.</span><span class="nf">ReadDirectoryToZipStream</span><span class="p">(</span><span class="k">new</span> <span class="nf">DirectoryInfo</span><span class="p">(</span><span class="n">folder</span><span class="p">),</span> <span class="n">stream</span><span class="p">);</span>
</code></pre></div></div>

<p>当然，也有异步的方法，如下面代码</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">var</span> <span class="n">stream</span> <span class="p">=</span> <span class="n">HttpContext</span><span class="p">.</span><span class="n">Response</span><span class="p">.</span><span class="n">BodyWriter</span><span class="p">.</span><span class="nf">AsStream</span><span class="p">();</span>
<span class="k">await</span> <span class="n">DirectoryToZipStreamHelper</span><span class="p">.</span><span class="nf">ReadDirectoryToZipStreamAsync</span><span class="p">(</span><span class="k">new</span> <span class="nf">DirectoryInfo</span><span class="p">(</span><span class="n">folder</span><span class="p">),</span> <span class="n">stream</span><span class="p">);</span>
</code></pre></div></div>

<p>在调用完成 ReadDirectoryToZipStream 或 ReadDirectoryToZipStreamAsync 方法，都会自动关闭 stream 对象</p>

:ET