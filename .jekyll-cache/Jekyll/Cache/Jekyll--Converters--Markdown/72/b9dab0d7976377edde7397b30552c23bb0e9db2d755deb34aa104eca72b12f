I"<p>在 WPF 中，如果有一个样式是继承另一个样式，而样式没有使用 TargetType 那么在运行的时候会提示 只能根据带有基类型 IFrameworkInputElement 的目标类型的 Style 样式</p>

<!--more-->

<!-- CreateTime:2020/7/20 17:58:20 -->

<p>在界面添加下面代码</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nt">&lt;Window.Resources&gt;</span>
        <span class="nt">&lt;Style</span> <span class="na">x:Key=</span><span class="s">"Style1"</span> <span class="na">TargetType=</span><span class="s">"{x:Type ButtonBase}"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;/Style&gt;</span>
        <span class="nt">&lt;Style</span> <span class="na">x:Key=</span><span class="s">"ButtonStyle1"</span> <span class="na">BasedOn=</span><span class="s">"{StaticResource Style1}"</span><span class="nt">&gt;&lt;/Style&gt;</span>
    <span class="nt">&lt;/Window.Resources&gt;</span>

    <span class="nt">&lt;Grid&gt;</span>
        <span class="nt">&lt;ToggleButton</span> <span class="na">Style=</span><span class="s">"{StaticResource ButtonStyle1}"</span><span class="nt">&gt;&lt;/ToggleButton&gt;</span>
    <span class="nt">&lt;/Grid&gt;</span>
</code></pre></div></div>

<p>运行将会提示</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>只能根据带有基类型“IFrameworkInputElement”的目标类型的 Style。
</code></pre></div></div>

<p>调用的堆栈</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   at System.Windows.Style.Seal()
   at System.Windows.StyleHelper.UpdateStyleCache(FrameworkElement fe, FrameworkContentElement fce, Style oldStyle, Style newStyle, Style&amp; styleCache)
   at System.Windows.FrameworkElement.OnStyleChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
   at System.Windows.DependencyObject.OnPropertyChanged(DependencyPropertyChangedEventArgs e)
   at System.Windows.FrameworkElement.OnPropertyChanged(DependencyPropertyChangedEventArgs e)
   at System.Windows.DependencyObject.NotifyPropertyChange(DependencyPropertyChangedEventArgs args)
   at System.Windows.DependencyObject.UpdateEffectiveValue(EntryIndex entryIndex, DependencyProperty dp, PropertyMetadata metadata, EffectiveValueEntry oldEntry, EffectiveValueEntry&amp; newEntry, Boolean coerceWithDeferredReference, Boolean coerceWithCurrentValue, OperationType operationType)
   at System.Windows.DependencyObject.SetValueCommon(DependencyProperty dp, Object value, PropertyMetadata metadata, Boolean coerceWithDeferredReference, Boolean coerceWithCurrentValue, OperationType operationType, Boolean isInternal)
   at System.Windows.DependencyObject.SetValue(DependencyProperty dp, Object value)
   at System.Windows.Baml2006.WpfKnownMemberInvoker.SetValue(Object instance, Object value)
   at MS.Internal.Xaml.Runtime.ClrObjectRuntime.SetValue(XamlMember member, Object obj, Object value)
   at MS.Internal.Xaml.Runtime.ClrObjectRuntime.SetValue(Object inst, XamlMember property, Object value)
</code></pre></div></div>

<p>原因是 ButtonStyle1 没有设置 TargetType 所以解决方法如下</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="p">&lt;</span><span class="n">Style</span> <span class="n">x</span><span class="p">:</span><span class="n">Key</span><span class="p">=</span><span class="s">"ButtonStyle1"</span> <span class="n">TargetType</span><span class="p">=</span><span class="s">"{x:Type ButtonBase}"</span> <span class="n">BasedOn</span><span class="p">=</span><span class="s">"{StaticResource Style1}"</span><span class="p">&gt;&lt;/</span><span class="n">Style</span><span class="p">&gt;</span>
</code></pre></div></div>

<p>给 ButtonStyle1 添加 TargetType 属性</p>

<p>本文代码放在<a href="https://github.com/lindexi/lindexi_gd/tree/42addec904d5736ef5db9e48cadcc7a3471c4eb8/QeakalharjerhallnuLikegowe">github</a>欢迎小伙伴访问</p>

:ET