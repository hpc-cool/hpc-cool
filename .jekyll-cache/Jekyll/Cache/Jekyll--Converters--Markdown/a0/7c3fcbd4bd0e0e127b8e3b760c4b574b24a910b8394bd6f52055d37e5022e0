I"V<p>本文告诉大家多个不同的方法使用反射获得私有属性，最后通过测试性能发现所有的方法的性能都差不多</p>

<!--more-->

<!-- CreateTime:2019/4/16 10:13:03 -->

<p>在开始之前先添加一个测试的类</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="k">public</span> <span class="k">class</span> <span class="nc">Foo</span>
        <span class="p">{</span>
            <span class="k">private</span> <span class="kt">string</span> <span class="n">F</span> <span class="p">{</span> <span class="k">set</span><span class="p">;</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span> <span class="p">=</span> <span class="s">"123"</span><span class="p">;</span>
        <span class="p">}</span>
</code></pre></div></div>

<p>如果需要拿到 Foo 的 属性 F 可以通过 PropertyInfo 直接拿到，从一个类拿到对应的 PropertyInfo 可以通过下面的代码</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>           <span class="kt">var</span> <span class="n">foo</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Foo</span><span class="p">();</span>

            <span class="kt">var</span> <span class="n">type</span> <span class="p">=</span> <span class="n">foo</span><span class="p">.</span><span class="nf">GetType</span><span class="p">();</span>
            <span class="k">const</span> <span class="n">BindingFlags</span> <span class="n">InstanceBindFlags</span> <span class="p">=</span> <span class="n">BindingFlags</span><span class="p">.</span><span class="n">Instance</span> <span class="p">|</span> <span class="n">BindingFlags</span><span class="p">.</span><span class="n">Public</span> <span class="p">|</span> <span class="n">BindingFlags</span><span class="p">.</span><span class="n">NonPublic</span><span class="p">;</span>

            <span class="kt">var</span> <span class="n">propertyName</span> <span class="p">=</span> <span class="s">"F"</span><span class="p">;</span>


            <span class="n">PropertyInfo</span> <span class="n">property</span> <span class="p">=</span> <span class="n">type</span><span class="p">.</span><span class="nf">GetProperty</span><span class="p">(</span><span class="n">propertyName</span><span class="p">,</span> <span class="n">InstanceBindFlags</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">property</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">MissingFieldException</span><span class="p">(</span><span class="n">propertyName</span><span class="p">);</span>
            <span class="p">}</span>
</code></pre></div></div>

<p>实际上可能在 <code class="language-plaintext highlighter-rouge">type.GetProperty</code> 还拿不到 property 需要通过不断找到基类</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>            <span class="n">PropertyInfo</span> <span class="n">property</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>

            <span class="k">while</span> <span class="p">(</span><span class="n">type</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">property</span> <span class="p">=</span> <span class="n">type</span><span class="p">.</span><span class="nf">GetProperty</span><span class="p">(</span><span class="n">propertyName</span><span class="p">,</span> <span class="n">InstanceBindFlags</span><span class="p">);</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">property</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="k">break</span><span class="p">;</span>
                <span class="p">}</span>

                <span class="n">type</span> <span class="p">=</span> <span class="n">type</span><span class="p">.</span><span class="n">BaseType</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">property</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">MissingFieldException</span><span class="p">(</span><span class="n">propertyName</span><span class="p">);</span>
            <span class="p">}</span>
</code></pre></div></div>

<p>现在就获得了 PropertyInfo 通过这个属性可以拿到类的属性，这里拿到属性有三个不同的方法</p>

<ul>
  <li>
    <p>GetValue</p>
  </li>
  <li>
    <p>GetGetMethod</p>
  </li>
  <li>
    <p>GetAccessor</p>
  </li>
</ul>

<p>其中最简单的是通过 GetValue 的方法，请看下面</p>

<h3 id="getvalue">GetValue</h3>

<p>最简单的方法直接调用 GetValue 的方法</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>            <span class="kt">var</span> <span class="n">f</span> <span class="p">=</span> <span class="n">property</span><span class="p">.</span><span class="nf">GetValue</span><span class="p">(</span><span class="n">foo</span><span class="p">);</span>

</code></pre></div></div>

<p>这里的 f 就是属性</p>

<h3 id="getgetmethod">GetGetMethod</h3>

<p>这里的两个 Get 不是写错了，而是拿到 Get 方法的意思，也就是需要属性有 get 方法才可以使用下面代码</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="n">MethodInfo</span> <span class="n">getter</span> <span class="p">=</span> <span class="n">property</span><span class="p">.</span><span class="nf">GetGetMethod</span><span class="p">(</span><span class="n">nonPublic</span><span class="p">:</span> <span class="k">true</span><span class="p">);</span>
 <span class="kt">var</span> <span class="n">f</span> <span class="p">=</span> <span class="n">getter</span><span class="p">.</span><span class="nf">Invoke</span><span class="p">(</span><span class="n">foo</span><span class="p">,</span> <span class="k">null</span><span class="p">);</span>
</code></pre></div></div>

<p>通过 GetGetMethod 可以拿到 MethodInfo 方法，如果对属性的返回值是可见的，如上面的 Foo 是使用 string 作为属性的类，可以通过创建委托的方式提高性能。</p>

<p>如果对于属性的返回值是不可见的，也就是返回值是拿不到的，就无法通过创建委托的方式提高性能。</p>

<h3 id="getaccessor">GetAccessor</h3>

<p>最后一个方法是通过 GetAccessor 访问器的方法，需要引用表达式</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>       <span class="c1">/// &lt;summary&gt;</span>
        <span class="c1">/// 获取 &lt;paramref name="type"/&gt; 的给定 &lt;paramref name="propertyName"/&gt; 属性的获取方法</span>
        <span class="c1">/// &lt;/summary&gt;</span>
        <span class="c1">/// &lt;param name="type"&gt;&lt;/param&gt;</span>
        <span class="c1">/// &lt;param name="propertyName"&gt;属性名，属性可以是私有&lt;/param&gt;</span>
        <span class="c1">/// &lt;returns&gt;</span>
        <span class="c1">/// 属性的 get 方法，传入对应的实例返回属性</span>
        <span class="c1">/// &lt;example&gt;</span>
        <span class="c1">/// var f = new F();</span>
        <span class="c1">/// var getAccessor = GetPropertyGetAccessor(f.GetType(), "privateProperty");</span>
        <span class="c1">/// getAccessor(f);// 获取属性</span>
        <span class="c1">/// &lt;/example&gt;</span>
        <span class="c1">/// &lt;/returns&gt;</span>
        <span class="p">[</span><span class="n">Pure</span><span class="p">]</span>
        <span class="k">public</span> <span class="k">static</span> <span class="n">Func</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">,</span> <span class="kt">object</span><span class="p">&gt;</span> <span class="nf">GetPropertyGetAccessor</span><span class="p">([</span><span class="n">NotNull</span><span class="p">]</span> <span class="n">Type</span> <span class="n">type</span><span class="p">,</span> <span class="p">[</span><span class="n">NotNull</span><span class="p">]</span> <span class="kt">string</span> <span class="n">propertyName</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="nf">ReferenceEquals</span><span class="p">(</span><span class="n">type</span><span class="p">,</span> <span class="k">null</span><span class="p">))</span> <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentNullException</span><span class="p">(</span><span class="k">nameof</span><span class="p">(</span><span class="n">type</span><span class="p">));</span>
            <span class="k">if</span> <span class="p">(</span><span class="nf">ReferenceEquals</span><span class="p">(</span><span class="n">propertyName</span><span class="p">,</span> <span class="k">null</span><span class="p">))</span> <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentNullException</span><span class="p">(</span><span class="k">nameof</span><span class="p">(</span><span class="n">propertyName</span><span class="p">));</span>

            <span class="kt">var</span> <span class="n">property</span> <span class="p">=</span> <span class="n">type</span><span class="p">.</span><span class="nf">GetProperty</span><span class="p">(</span><span class="n">propertyName</span><span class="p">,</span> <span class="n">InstanceBindFlags</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">property</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">MissingFieldException</span><span class="p">(</span><span class="n">propertyName</span><span class="p">);</span>
            <span class="p">}</span>
         
            <span class="kt">var</span> <span class="n">method</span> <span class="p">=</span> <span class="n">property</span><span class="p">.</span><span class="nf">GetGetMethod</span><span class="p">(</span><span class="k">true</span><span class="p">);</span>

            <span class="kt">var</span> <span class="n">obj</span> <span class="p">=</span> <span class="n">Expression</span><span class="p">.</span><span class="nf">Parameter</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="kt">object</span><span class="p">),</span> <span class="s">"o"</span><span class="p">);</span>

            <span class="n">Debug</span><span class="p">.</span><span class="nf">Assert</span><span class="p">(</span><span class="n">method</span><span class="p">.</span><span class="n">DeclaringType</span> <span class="p">!=</span> <span class="k">null</span><span class="p">);</span>

            <span class="n">Expression</span><span class="p">&lt;</span><span class="n">Func</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">,</span> <span class="kt">object</span><span class="p">&gt;&gt;</span> <span class="n">expression</span> <span class="p">=</span>
                <span class="n">Expression</span><span class="p">.</span><span class="n">Lambda</span><span class="p">&lt;</span><span class="n">Func</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">,</span> <span class="kt">object</span><span class="p">&gt;&gt;</span>
                <span class="p">(</span>
                    <span class="n">Expression</span><span class="p">.</span><span class="nf">Convert</span>
                    <span class="p">(</span>
                        <span class="n">Expression</span><span class="p">.</span><span class="nf">Call</span>
                        <span class="p">(</span>
                            <span class="n">Expression</span><span class="p">.</span><span class="nf">Convert</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">method</span><span class="p">.</span><span class="n">DeclaringType</span><span class="p">),</span>
                            <span class="n">method</span>
                        <span class="p">),</span>
                        <span class="k">typeof</span><span class="p">(</span><span class="kt">object</span><span class="p">)</span>
                    <span class="p">),</span>
                    <span class="n">obj</span>
                <span class="p">);</span>

            <span class="k">return</span> <span class="n">expression</span><span class="p">.</span><span class="nf">Compile</span><span class="p">();</span>
        <span class="p">}</span>
</code></pre></div></div>

<p>通过这个方法可以创建一个委托出来，通过这个委托可以拿到很高的性能，在下面我测试了不同的方法的性能</p>

<h2 id="测试">测试</h2>

<p>首先是通过 GetValue 的方式经过 1 次 和 100 次运行，测试方法都是通过<a href="https://blog.csdn.net/lindexi_gd/article/details/80733217">C# 标准性能测试 </a> 但是在测试完成需要告诉大家结论</p>

<p>使用 GetValue 的方式和使用其他几个反射拿到属性的方法的性能都是差不多的，所以不需要对私有属性反射去优化</p>

<table>
  <thead>
    <tr>
      <th>Method</th>
      <th>Categories</th>
      <th style="text-align: right">Mean</th>
      <th style="text-align: right">Error</th>
      <th style="text-align: right">StdDev</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>'GetProperty 调用1次反射'</td>
      <td>1次调用</td>
      <td style="text-align: right">205.5 ns</td>
      <td style="text-align: right">2.882 ns</td>
      <td style="text-align: right">2.555 ns</td>
    </tr>
    <tr>
      <td>'GetProperty 调用100次反射'</td>
      <td>100次调用</td>
      <td style="text-align: right">20,059.9 ns</td>
      <td style="text-align: right">121.177 ns</td>
      <td style="text-align: right">113.349 ns</td>
    </tr>
  </tbody>
</table>

<p>因为 GetValue 没有使用缓存的方法，而缓存也只是缓存 PropertyInfo 的值，于是在下面测试 GetGetMethod 的方法，这个方法在跑100次就添加了缓存</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="k">public</span> <span class="k">void</span> <span class="nf">GetPropertyGetAccessorMethodInfo_Call100</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">foo</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Foo</span><span class="p">();</span>

            <span class="kt">var</span> <span class="n">type</span> <span class="p">=</span> <span class="n">foo</span><span class="p">.</span><span class="nf">GetType</span><span class="p">();</span>
            <span class="k">const</span> <span class="n">BindingFlags</span> <span class="n">InstanceBindFlags</span> <span class="p">=</span> <span class="n">BindingFlags</span><span class="p">.</span><span class="n">Instance</span> <span class="p">|</span> <span class="n">BindingFlags</span><span class="p">.</span><span class="n">Public</span> <span class="p">|</span> <span class="n">BindingFlags</span><span class="p">.</span><span class="n">NonPublic</span><span class="p">;</span>

            <span class="kt">var</span> <span class="n">propertyName</span> <span class="p">=</span> <span class="s">"F"</span><span class="p">;</span>


            <span class="n">PropertyInfo</span> <span class="n">property</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>

            <span class="k">while</span> <span class="p">(</span><span class="n">type</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">property</span> <span class="p">=</span> <span class="n">type</span><span class="p">.</span><span class="nf">GetProperty</span><span class="p">(</span><span class="n">propertyName</span><span class="p">,</span> <span class="n">InstanceBindFlags</span><span class="p">);</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">property</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="k">break</span><span class="p">;</span>
                <span class="p">}</span>

                <span class="n">type</span> <span class="p">=</span> <span class="n">type</span><span class="p">.</span><span class="n">BaseType</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">property</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">MissingFieldException</span><span class="p">(</span><span class="n">propertyName</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="n">MethodInfo</span> <span class="n">getter</span> <span class="p">=</span> <span class="n">property</span><span class="p">.</span><span class="nf">GetGetMethod</span><span class="p">(</span><span class="n">nonPublic</span><span class="p">:</span> <span class="k">true</span><span class="p">);</span>


            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="m">100</span><span class="p">;</span> <span class="n">i</span><span class="p">++)</span>
            <span class="p">{</span>
                <span class="kt">var</span> <span class="n">yasriWelducadow</span> <span class="p">=</span> <span class="n">getter</span><span class="p">.</span><span class="nf">Invoke</span><span class="p">(</span><span class="n">foo</span><span class="p">,</span> <span class="k">null</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>
</code></pre></div></div>

<p>运行测试可以看到</p>

<table>
  <thead>
    <tr>
      <th>Method</th>
      <th>Categories</th>
      <th style="text-align: right">Mean</th>
      <th style="text-align: right">Error</th>
      <th style="text-align: right">StdDev</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>'GetPropertGetAccessorMethodInfo 调用一次'</td>
      <td>1次调用</td>
      <td style="text-align: right">191.6 ns</td>
      <td style="text-align: right">0.7641 ns</td>
      <td style="text-align: right">0.6774 ns</td>
    </tr>
    <tr>
      <td>'GetPropertGetAccessorMethodInfo 调用100次'</td>
      <td>100次调用</td>
      <td style="text-align: right">10,341.9 ns</td>
      <td style="text-align: right">134.9177 ns</td>
      <td style="text-align: right">126.2021 ns</td>
    </tr>
  </tbody>
</table>

<p>相对于 GetValue 没有带缓存的 GetGetMethod 带缓存的性能是 GetValue 的一倍，也就是找到 PropertyInfo 占用的时间如果能减少，就可以提高速度。</p>

<p>最后通过 GetPropertyGetAccessor 创建委托，然后缓存委托的方式调用 1 次和 100 次。在调用 1 次的过程是包括第一次初始化的时间，而调用 100 次是包括和不包括第一次初始化</p>

<table>
  <thead>
    <tr>
      <th>Method</th>
      <th>Categories</th>
      <th style="text-align: right">Mean</th>
      <th style="text-align: right">Error</th>
      <th style="text-align: right">StdDev</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>'GetPropertyGetAccessor 调用一次'</td>
      <td>1次调用</td>
      <td style="text-align: right">206,282.4 ns</td>
      <td style="text-align: right">4,051.754 ns</td>
      <td style="text-align: right">5,939.008 ns</td>
    </tr>
    <tr>
      <td>'GetPropertyGetAccessor 调用100次'</td>
      <td>100次调用</td>
      <td style="text-align: right">222,227.4 ns</td>
      <td style="text-align: right">4,354.600 ns</td>
      <td style="text-align: right">6,906.857 ns</td>
    </tr>
    <tr>
      <td>'GetPropertGetAccessorMethodInfo 带缓存调用100次'</td>
      <td>100次调用</td>
      <td style="text-align: right">10,352.2 ns</td>
      <td style="text-align: right">141.629 ns</td>
      <td style="text-align: right">132.480 ns</td>
    </tr>
  </tbody>
</table>

<p>可以看到 GetPropertyGetAccessor 方法在初始化的时间很长，而带缓存的调用和 GetGetMethod 的方法调用的时间几乎一样长</p>

<p>建议反射私有属性使用 GetValue 的方法，因为只要调用非公有属性，调用的时间就是这么长，无论通过表达式或其他方法都无法减少时间。如果遇到需要提高反射属性的速度，建议修改属性为公开，这时可以通过 <a href="https://github.com/mgravell/fast-member/">fast member</a> 快速拿到属性</p>

<!-- 奥利奥\TIM图片20180824091733.jpg -->

<p><img src="https://i.loli.net/2018/08/24/5b7f5ce6d452c.jpg" alt="" /></p>

:ET