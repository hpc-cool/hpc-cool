I"SS<p>在 WPF 用的多的列表控件如 ListBox 或 ListView 等，本文告诉大家在这些列表控件上进行绑定多个数据集合来源的多个实现方法。如有一个显示动物列表的控件，需要绑定的数据来源是阿猫和阿狗两个 ObservableCollection 列表，不在后台代码编写合并集合的代码情况下，可以通过 XAML 的编写，绑定多个数据集合</p>

<!--more-->

<!-- CreateTime:2021/5/22 9:27:42 -->

<!-- 发布 -->

<h2 id="准备">准备</h2>

<p>在开始之前，咱先搭建一点测试使用的代码，假定咱有一个 列表控件 准备绑定到的数据源是两个 ObservableCollection 对象，下面来定义这两个 ObservableCollection 对象和对应的 阿猫和阿狗 的代码</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">public</span> <span class="k">partial</span> <span class="k">class</span> <span class="nc">MainWindow</span> <span class="p">:</span> <span class="n">Window</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nf">MainWindow</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="nf">InitializeComponent</span><span class="p">();</span>

            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="m">10</span><span class="p">;</span> <span class="n">i</span><span class="p">++)</span>
            <span class="p">{</span>
                <span class="n">Dogs</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">Dog</span><span class="p">()</span>
                <span class="p">{</span>
                    <span class="n">Name</span> <span class="p">=</span> <span class="s">"Dog"</span> <span class="p">+</span> <span class="n">i</span>
                <span class="p">});</span>

                <span class="n">Cats</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">Cat</span><span class="p">()</span>
                <span class="p">{</span>
                    <span class="n">Name</span> <span class="p">=</span> <span class="s">"Cat"</span> <span class="p">+</span> <span class="n">i</span>
                <span class="p">});</span>
            <span class="p">}</span>

            <span class="n">DataContext</span> <span class="p">=</span> <span class="k">this</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="n">ObservableCollection</span><span class="p">&lt;</span><span class="n">Dog</span><span class="p">&gt;</span> <span class="n">Dogs</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ObservableCollection</span><span class="p">&lt;</span><span class="n">Dog</span><span class="p">&gt;();</span>
        <span class="k">public</span> <span class="n">ObservableCollection</span><span class="p">&lt;</span><span class="n">Cat</span><span class="p">&gt;</span> <span class="n">Cats</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ObservableCollection</span><span class="p">&lt;</span><span class="n">Cat</span><span class="p">&gt;();</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">class</span> <span class="nc">Dog</span> <span class="p">:</span> <span class="n">Animal</span>
    <span class="p">{</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">class</span> <span class="nc">Cat</span> <span class="p">:</span> <span class="n">Animal</span>
    <span class="p">{</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">class</span> <span class="nc">Animal</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
</code></pre></div></div>

<p>可以看到以上代码里面存在两个 ObservableCollection 对象，同时 MainWindow 的 DataContext 就是 MainWindow 对象。咱需要将两个 ObservableCollection 对象作为数据源，放在相同的一个 ListBox 里面</p>

<p>下面是多个不同的实现方式，解决如何在 WPF 中在 ListBox 或 ListView 绑定多个数据集合 ObservableCollection 对象</p>

<h2 id="通过-collectionviewsource-方式">通过 CollectionViewSource 方式</h2>

<p>在 ListView 或 ListBox 资源里面，添加 CollectionViewSource 绑定到集合里面，然后在 ItemsSource 使用 CompositeCollection 进行绑定，代码如下</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nt">&lt;ListBox&gt;</span>
      <span class="nt">&lt;ListBox.Resources&gt;</span>
        <span class="nt">&lt;CollectionViewSource</span> <span class="na">x:Key=</span><span class="s">"DogCollection"</span> <span class="na">Source=</span><span class="s">"{Binding Dogs}"</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;CollectionViewSource</span> <span class="na">x:Key=</span><span class="s">"CatCollection"</span> <span class="na">Source=</span><span class="s">"{Binding Cats}"</span><span class="nt">/&gt;</span>
      <span class="nt">&lt;/ListBox.Resources&gt;</span>
      <span class="nt">&lt;ListBox.ItemsSource&gt;</span>
        <span class="nt">&lt;CompositeCollection&gt;</span>
          <span class="nt">&lt;CollectionContainer</span> <span class="na">Collection=</span><span class="s">"{Binding Source={StaticResource DogCollection}}"</span><span class="nt">/&gt;</span>
          <span class="nt">&lt;CollectionContainer</span> <span class="na">Collection=</span><span class="s">"{Binding Source={StaticResource CatCollection}}"</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;/CompositeCollection&gt;</span>
      <span class="nt">&lt;/ListBox.ItemsSource&gt;</span>

      <span class="nt">&lt;ListBox.ItemTemplate&gt;</span>
        <span class="nt">&lt;DataTemplate&gt;</span>
          <span class="nt">&lt;TextBlock</span> <span class="na">Text=</span><span class="s">"{Binding Name}"</span><span class="nt">&gt;&lt;/TextBlock&gt;</span>
        <span class="nt">&lt;/DataTemplate&gt;</span>
      <span class="nt">&lt;/ListBox.ItemTemplate&gt;</span>

    <span class="nt">&lt;/ListBox&gt;</span>
</code></pre></div></div>

<p>这个方法的优势在于可以完全使用 XAML 编写内容，但是缺点在于有重复的代码，如有多个绑定的集合对象，就需要在资源和 CompositeCollection 里面定义多个 CollectionViewSource 和 CollectionContainer 对象</p>

<p>如果绑定的集合数量不多，那么此写法还成，但如果集合数量比较多，而且需要不断变更顺序，那以上写法就有坑</p>

<p>此方法请参考 <a href="https://blog.walterlv.com/post/those-people-dont-know-about-wpf.html">WPF 很少人知道的科技 - walterlv</a></p>

<h2 id="通过-compositecollection-动态绑定">通过 CompositeCollection 动态绑定</h2>

<p>在 ListView 或 ListBox 的资源里面定义了 CompositeCollection 通过控件的 DataContext 绑定多个集合，代码如下</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="nt">&lt;CompositeCollection</span> <span class="na">x:Key=</span><span class="s">"MyColl"</span><span class="nt">&gt;</span>
          <span class="nt">&lt;CollectionContainer</span> <span class="na">Collection=</span><span class="s">"{Binding DataContext.Dogs, Source={x:Reference MyList}}"</span><span class="nt">/&gt;</span>
          <span class="nt">&lt;CollectionContainer</span> <span class="na">Collection=</span><span class="s">"{Binding DataContext.Cats, Source={x:Reference MyList}}"</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;/CompositeCollection&gt;</span>
</code></pre></div></div>

<p>以上代码的 MyList 就是集合控件，此方法需要用到 <code class="language-plaintext highlighter-rouge">x:Reference</code> 获取对象的引用，同时需要通过 <code class="language-plaintext highlighter-rouge">DataContext</code> 的某个属性获取到对应的属性，全部代码如下</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nt">&lt;ListBox</span> <span class="na">x:Name=</span><span class="s">"MyList"</span> <span class="na">ItemsSource=</span><span class="s">"{DynamicResource MyColl}"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;ListBox.Resources&gt;</span>
        <span class="nt">&lt;CompositeCollection</span> <span class="na">x:Key=</span><span class="s">"MyColl"</span><span class="nt">&gt;</span>
          <span class="nt">&lt;CollectionContainer</span> <span class="na">Collection=</span><span class="s">"{Binding DataContext.Dogs, Source={x:Reference MyList}}"</span><span class="nt">/&gt;</span>
          <span class="nt">&lt;CollectionContainer</span> <span class="na">Collection=</span><span class="s">"{Binding DataContext.Cats, Source={x:Reference MyList}}"</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;/CompositeCollection&gt;</span>
      <span class="nt">&lt;/ListBox.Resources&gt;</span>
      <span class="nt">&lt;ListBox.ItemTemplate&gt;</span>
        <span class="nt">&lt;DataTemplate&gt;</span>
          <span class="nt">&lt;TextBlock</span> <span class="na">Text=</span><span class="s">"{Binding Name}"</span><span class="nt">&gt;&lt;/TextBlock&gt;</span>
        <span class="nt">&lt;/DataTemplate&gt;</span>
      <span class="nt">&lt;/ListBox.ItemTemplate&gt;</span>
    <span class="nt">&lt;/ListBox&gt;</span>
</code></pre></div></div>

<p>对比上面的方法，此方法可以让绑定集合的代码只写一次，看起来代码更少一点。但不足的地方在于绑定 ItemsSource 需要用到 DynamicResource 的方式，相对性能不如上面方法。为什么需要 DynamicResource 资源？原因是资源本身定义在 Resources 里面。为什么资源需要定义在控件里面的 Resource 里面？原因是为了获取到控件的 <code class="language-plaintext highlighter-rouge">x:Reference</code> 对象。也就是说需要在控件创建出来之后，才能通过 <code class="language-plaintext highlighter-rouge">x:Reference</code> 获取控件，而控件的数据内容需要依赖资源的定义，因此也只有以上方式的写法</p>

<p>如果能从控件的上层容器拿到数据对象，那可以将资源定义在容器里面，通过 StaticResource 绑定到静态资源。如放在 Window 的 Resources 里</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;Window</span> <span class="na">x:Class=</span><span class="s">"CibairyafocairluYerkinemde.MainWindow"</span>
        <span class="na">xmlns=</span><span class="s">"http://schemas.microsoft.com/winfx/2006/xaml/presentation"</span>
        <span class="na">xmlns:x=</span><span class="s">"http://schemas.microsoft.com/winfx/2006/xaml"</span>
        <span class="na">xmlns:d=</span><span class="s">"http://schemas.microsoft.com/expression/blend/2008"</span>
        <span class="na">xmlns:mc=</span><span class="s">"http://schemas.openxmlformats.org/markup-compatibility/2006"</span>
        <span class="na">xmlns:local=</span><span class="s">"clr-namespace:CibairyafocairluYerkinemde"</span>
        <span class="na">mc:Ignorable=</span><span class="s">"d"</span>
        <span class="na">x:Name=</span><span class="s">"Root"</span>
        <span class="na">Title=</span><span class="s">"MainWindow"</span> <span class="na">Height=</span><span class="s">"450"</span> <span class="na">Width=</span><span class="s">"800"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;Window.Resources&gt;</span>
    <span class="nt">&lt;CompositeCollection</span> <span class="na">x:Key=</span><span class="s">"MyColl"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;CollectionContainer</span> <span class="na">Collection=</span><span class="s">"{Binding DataContext.Dogs, Source={x:Reference Root}}"</span><span class="nt">/&gt;</span>
      <span class="nt">&lt;CollectionContainer</span> <span class="na">Collection=</span><span class="s">"{Binding DataContext.Cats, Source={x:Reference Root}}"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/CompositeCollection&gt;</span>
  <span class="nt">&lt;/Window.Resources&gt;</span>

  <span class="nt">&lt;Grid&gt;</span>
   <span class="nt">&lt;ListBox</span> <span class="na">x:Name=</span><span class="s">"MyList"</span> <span class="na">ItemsSource=</span><span class="s">"{StaticResource MyColl}"</span> <span class="nt">&gt;</span>
      <span class="nt">&lt;ListBox.ItemTemplate&gt;</span>
        <span class="nt">&lt;DataTemplate&gt;</span>
          <span class="nt">&lt;TextBlock</span> <span class="na">Text=</span><span class="s">"{Binding Name}"</span><span class="nt">&gt;&lt;/TextBlock&gt;</span>
        <span class="nt">&lt;/DataTemplate&gt;</span>
      <span class="nt">&lt;/ListBox.ItemTemplate&gt;</span>
    <span class="nt">&lt;/ListBox&gt;</span>
  <span class="nt">&lt;/Grid&gt;</span>
<span class="nt">&lt;/Window&gt;</span>
</code></pre></div></div>

<p>以上写法没有啥缺点，也不存在动态资源的性能问题。但实际上在有动态资源下，性能问题也是很小的问题，对比渲染控件本身，动态绑定性能可以忽略</p>

<h2 id="通过多绑定方法">通过多绑定方法</h2>

<p>此方法需要添加一点后台代码，定义 CompositeCollectionConverter 转换器，实现逻辑是通过多绑定的方法，将多个数据集合当成多个参数进行绑定</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="p">&lt;</span><span class="n">ListBox</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="n">ListBox</span><span class="p">.</span><span class="n">ItemsSource</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="n">MultiBinding</span> <span class="n">Converter</span><span class="p">=</span><span class="s">"{x:Static local:CompositeCollectionConverter.Default}"</span><span class="p">&gt;</span>
          <span class="p">&lt;</span><span class="n">Binding</span> <span class="n">Path</span><span class="p">=</span><span class="s">"Dogs"</span> <span class="p">/&gt;</span>
          <span class="p">&lt;</span><span class="n">Binding</span> <span class="n">Path</span><span class="p">=</span><span class="s">"Cats"</span> <span class="p">/&gt;</span>
        <span class="p">&lt;/</span><span class="n">MultiBinding</span><span class="p">&gt;</span>
      <span class="p">&lt;/</span><span class="n">ListBox</span><span class="p">.</span><span class="n">ItemsSource</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="n">ListBox</span><span class="p">.</span><span class="n">ItemTemplate</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="n">DataTemplate</span><span class="p">&gt;</span>
          <span class="p">&lt;</span><span class="n">TextBlock</span> <span class="n">Text</span><span class="p">=</span><span class="s">"{Binding Name}"</span><span class="p">&gt;&lt;/</span><span class="n">TextBlock</span><span class="p">&gt;</span>
        <span class="p">&lt;/</span><span class="n">DataTemplate</span><span class="p">&gt;</span>
      <span class="p">&lt;/</span><span class="n">ListBox</span><span class="p">.</span><span class="n">ItemTemplate</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="n">ListBox</span><span class="p">&gt;</span>
</code></pre></div></div>

<p>可以看到此方法的 XAML 代码量最小，只是需要一个辅助的 CompositeCollectionConverter 类，代码如下</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">public</span> <span class="k">class</span> <span class="nc">CompositeCollectionConverter</span> <span class="p">:</span> <span class="n">IMultiValueConverter</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="k">static</span> <span class="k">readonly</span> <span class="n">CompositeCollectionConverter</span> <span class="n">Default</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">CompositeCollectionConverter</span><span class="p">();</span>

        <span class="k">public</span> <span class="kt">object</span> <span class="nf">Convert</span><span class="p">(</span><span class="kt">object</span><span class="p">[]</span> <span class="n">values</span><span class="p">,</span> <span class="n">Type</span> <span class="n">targetType</span><span class="p">,</span> <span class="kt">object</span> <span class="n">parameter</span><span class="p">,</span> <span class="n">CultureInfo</span> <span class="n">culture</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">compositeCollection</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">CompositeCollection</span><span class="p">();</span>
            <span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="k">value</span> <span class="k">in</span> <span class="n">values</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="k">value</span> <span class="k">is</span> <span class="n">IEnumerable</span> <span class="n">enumerable</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="n">compositeCollection</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="n">CollectionContainer</span> <span class="p">{</span> <span class="n">Collection</span> <span class="p">=</span> <span class="n">enumerable</span> <span class="p">});</span>
                <span class="p">}</span>
                <span class="k">else</span>
                <span class="p">{</span>
                    <span class="n">compositeCollection</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">value</span><span class="p">);</span>
                <span class="p">}</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="n">compositeCollection</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="kt">object</span><span class="p">[]</span> <span class="nf">ConvertBack</span><span class="p">(</span><span class="kt">object</span> <span class="k">value</span><span class="p">,</span> <span class="n">Type</span><span class="p">[]</span> <span class="n">targetTypes</span><span class="p">,</span> <span class="kt">object</span> <span class="n">parameter</span><span class="p">,</span> <span class="n">CultureInfo</span> <span class="n">culture</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">NotSupportedException</span><span class="p">(</span><span class="s">"CompositeCollectionConverter ony supports oneway bindings"</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
</code></pre></div></div>

<p>可以将 CompositeCollectionConverter 放在库里面，这样就可以让 XAML 代码看起来简单</p>

<p>本文所有代码放在 <a href="https://github.com/lindexi/lindexi_gd/tree/17789b4bd8e121e2469cfc534094903994cbab81/CibairyafocairluYerkinemde">github</a> 和 <a href="https://gitee.com/lindexi/lindexi_gd/tree/17789b4bd8e121e2469cfc534094903994cbab81/CibairyafocairluYerkinemde">gitee</a> 欢迎小伙伴访问</p>

<h2 id="参考">参考</h2>

<p>本文以上方法参考了如下博客</p>

<p><a href="https://stackoverflow.com/questions/19243109/compositecollection-collectioncontainer-bind-collectioncontainer-collection-t">c# - CompositeCollection + CollectionContainer: Bind CollectionContainer.Collection to property of ViewModel that is used as DataTemplates DataType - Stack Overflow</a></p>

<p><a href="https://stackoverflow.com/q/6446699/6116637">wpf - How do you bind a CollectionContainer to a collection in a view model? - Stack Overflow</a></p>

<p><a href="https://blog.walterlv.com/post/those-people-dont-know-about-wpf.html">WPF 很少人知道的科技 - walterlv</a></p>

:ET