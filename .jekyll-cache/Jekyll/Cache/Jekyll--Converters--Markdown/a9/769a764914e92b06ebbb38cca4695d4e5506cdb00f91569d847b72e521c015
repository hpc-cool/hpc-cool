I"m9<p>如果我们每次把临时处理的文件保存，都要让用户选择一次，用户会不会觉得uwp垃圾？如果我们每次打开应用，都从某个文件读取，而这个文件不在应用目录和已知的目录，那么每次都需要用户选择，用户会不会觉得uwp垃圾？</p>

<!--more-->

<!-- CreateTime:2019/9/2 12:57:38 -->

<div id="toc"></div>

<p>其实垃圾wr给了一个类，我们可以用这个类获得用户选择过的文件、文件夹。我们可以保存用户选择过的文件和文件夹。</p>

<p>这个类在<code class="language-plaintext highlighter-rouge">Windows.Storage.AccessCache</code>，可以使用最近使用或一个比较大的存储，最近使用StorageItemMostRecentlyUsedList 只有存储25个，我这里就不说。如果需要存多点，我们可以使用 FutureAccessList ，使用<code class="language-plaintext highlighter-rouge">StorageApplicationPermissions.FutureAccessList</code> 可以存储1k个文件或文件夹，但垃圾wr给了我们这个东西，就不知道为何他就给1k而不是无限。</p>

<p>其实说是 1k ，和无限也差不多，因为他算的不只是文件，如果是文件夹，也算一个。假如我们有1000000000个文件，我们把它放在一个文件夹，把文件夹放 FutureAccessList ，算一个，不是 1000000000 个 。这个问题在博客上次没有说明白，让花神认为可以放的文件就 1k 个，其实可以放的文件比较多，就把文件放在文件夹，存文件夹。</p>

<p>要使用这个类，其实我们就只用三个函数，其中我们需要知道，使用 FutureAccessList 拿出一个我们保存的文件或文件夹时需要一个 token 。它是如何来的，在我们添加一个文件或文件夹，就会返回的，于是我们要把它保存。</p>

<p>我们先从让用户选择选择文件夹，选择文件夹需要 FolderPicker 。</p>

<p>不知道 FolderPicker 需要 FileTypeFilter，这个设计有个r用。他还必须要给，于是我们需要给他一个值，开头是”.” 后面还需要一些e文，当然中文也可以。</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>            <span class="n">FolderPicker</span> <span class="n">pick</span><span class="p">=</span><span class="k">new</span> <span class="nf">FolderPicker</span><span class="p">();</span>
            <span class="n">pick</span><span class="p">.</span><span class="n">FileTypeFilter</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">".png"</span><span class="p">);</span> <span class="err">我不想说他这个有什么用，垃圾</span><span class="n">wr</span>
</code></pre></div></div>

<p>然后让用户选择，这里是异步，我们可以让用户选择，然后我们在后台继续做我们的。</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
            <span class="n">IAsyncOperation</span><span class="p">&lt;</span><span class="n">StorageFolder</span><span class="p">&gt;</span> <span class="n">folderTask</span><span class="p">=</span> <span class="n">pick</span><span class="p">.</span><span class="nf">PickSingleFolderAsync</span><span class="p">();</span>
            <span class="c1">//做我们的 </span>
            <span class="n">StorageFolder</span> <span class="n">folder</span> <span class="p">=</span> <span class="k">await</span> <span class="n">folderTask</span><span class="p">;</span>
</code></pre></div></div>

<p>我们可以写省一点，让用户选择文件夹，而我们不做什么</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
            <span class="kt">var</span> <span class="n">folder</span> <span class="p">=</span> <span class="k">await</span> <span class="n">pick</span><span class="p">.</span><span class="nf">PickSingleFolderAsync</span><span class="p">();</span>

</code></pre></div></div>

<p>判断用户选择，如果有选择文件夹，可以看到 folder ！=null</p>

<p>判断选择之后，我们需要把它放进 FutureAccessList，放进去可以拿到token</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
            <span class="k">if</span> <span class="p">(</span><span class="n">folder</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">Folder</span> <span class="p">=</span> <span class="n">folder</span><span class="p">;</span>
                <span class="n">Address</span> <span class="p">=</span> <span class="n">folder</span><span class="p">.</span><span class="n">Path</span><span class="p">;</span>
                <span class="n">Token</span> <span class="p">=</span> <span class="n">StorageApplicationPermissions</span><span class="p">.</span><span class="n">FutureAccessList</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">folder</span><span class="p">);</span>
            <span class="p">}</span>
</code></pre></div></div>

<p>我们想拿出文件或文件夹，需要token，我们需要把token放到我们本地文件的位置。</p>

<p>我放在 <code class="language-plaintext highlighter-rouge">account/account.json</code> 文件里</p>

<p>先拿到本地文件夹</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
            <span class="kt">string</span> <span class="n">folderStr</span> <span class="p">=</span> <span class="s">"account"</span><span class="p">;</span>
            <span class="n">StorageFolder</span> <span class="n">folder</span> <span class="p">=</span> <span class="n">ApplicationData</span><span class="p">.</span><span class="n">Current</span><span class="p">.</span><span class="n">LocalFolder</span><span class="p">;</span>
</code></pre></div></div>

<p>创建一个文件夹 account ，因为如果是第一次我们就没有文件夹，如果不是我们就有</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
            <span class="k">try</span>
            <span class="p">{</span>
                <span class="n">folder</span> <span class="p">=</span> <span class="k">await</span> <span class="n">folder</span><span class="p">.</span><span class="nf">GetFolderAsync</span><span class="p">(</span><span class="n">folderStr</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">catch</span> <span class="p">(</span><span class="n">FileNotFoundException</span><span class="p">)</span>  <span class="err">我们使用的是</span><span class="n">File</span><span class="err">没找到，不爽自己做一个</span><span class="n">Folder</span><span class="err">没找到</span>
            <span class="p">{</span>
                <span class="n">folder</span> <span class="p">=</span> <span class="k">await</span> <span class="n">folder</span><span class="p">.</span><span class="nf">CreateFolderAsync</span><span class="p">(</span><span class="n">folderStr</span><span class="p">);</span>
            <span class="p">}</span>
</code></pre></div></div>

<p>创建文件可以覆盖存在的Account.json</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
            <span class="n">StorageFile</span> <span class="n">file</span> <span class="p">=</span> <span class="k">await</span> <span class="n">folder</span><span class="p">.</span><span class="nf">CreateFileAsync</span><span class="p">(</span>
                <span class="n">folderStr</span><span class="p">+</span><span class="s">".json"</span><span class="p">,</span> <span class="n">CreationCollisionOption</span><span class="p">.</span><span class="n">ReplaceExisting</span><span class="p">);</span>
</code></pre></div></div>

<p>因为我们就保存一次，如果在保存中，用户关机，那么就和微软的诺基亚差不多了。一个好的做法是创建 temp 文件，写入 temp 文件，然后做完所有再把原来的改名字为以前做的，然后把temp改名字为account.json，注意保存原先改名字的文件，并把原先改名字的之前的文件删除。</p>

<p>如果我们在保存失败，那么我们的原先文件不会影响，如果我们保存文件在改名字出错了，可以通过原先恢复，这样才好。</p>

<p>我们使用json保存，json可以使用第三方，我有写过 win10 uwp json 保存相关的。</p>

<p><img src="http://jycloud.9uads.com/web/GetObject.aspx?filekey=eb992e37cd0bd5c07ae125648f6328bb" alt="" /></p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
  <span class="kt">var</span> <span class="n">json</span> <span class="p">=</span> <span class="n">JsonSerializer</span><span class="p">.</span><span class="nf">Create</span><span class="p">();</span>
</code></pre></div></div>

<p>我们需要用 StringBuilder 来把json序列存放，如果直接用</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
            <span class="n">json</span><span class="p">.</span><span class="nf">Serialize</span><span class="p">(</span><span class="k">new</span> <span class="nf">JsonTextWriter</span><span class="p">(</span>
                <span class="k">new</span> <span class="nf">StreamWriter</span><span class="p">(</span><span class="k">await</span> <span class="n">file</span><span class="p">.</span><span class="nf">OpenStreamForWriteAsync</span><span class="p">())),</span> <span class="n">Account</span><span class="p">);</span>
</code></pre></div></div>

<p>就会出现下次使用 UnauthorizedException，UWP UnauthorizedException 创建文件在 LocalFolder 。这个一般就是我们使用json错误，我提供简单方法，可以让保存不出现这个异常
。</p>

<p>我写的方法应该可以是可以把 token 保存的</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
            <span class="n">StringBuilder</span> <span class="n">str</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">StringBuilder</span><span class="p">();</span>
            <span class="n">StringWriter</span> <span class="n">stream</span><span class="p">=</span><span class="k">new</span> <span class="nf">StringWriter</span><span class="p">(</span><span class="n">str</span><span class="p">);</span>
            <span class="n">json</span><span class="p">.</span><span class="nf">Serialize</span><span class="p">(</span><span class="k">new</span> <span class="nf">JsonTextWriter</span><span class="p">(</span>
               <span class="n">stream</span> <span class="p">),</span> <span class="n">Account</span><span class="p">);</span>
            <span class="k">using</span> <span class="p">(</span><span class="n">StorageStreamTransaction</span> <span class="n">transaction</span> <span class="p">=</span> <span class="k">await</span> <span class="n">file</span><span class="p">.</span><span class="nf">OpenTransactedWriteAsync</span><span class="p">())</span>
            <span class="p">{</span>
                <span class="k">using</span> <span class="p">(</span><span class="n">DataWriter</span> <span class="n">dataWriter</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">DataWriter</span><span class="p">(</span><span class="n">transaction</span><span class="p">.</span><span class="n">Stream</span><span class="p">))</span>
                <span class="p">{</span>
                    <span class="n">dataWriter</span><span class="p">.</span><span class="nf">WriteString</span><span class="p">(</span><span class="n">str</span><span class="p">.</span><span class="nf">ToString</span><span class="p">());</span>
                    <span class="n">transaction</span><span class="p">.</span><span class="n">Stream</span><span class="p">.</span><span class="n">Size</span> <span class="p">=</span> <span class="k">await</span> <span class="n">dataWriter</span><span class="p">.</span><span class="nf">StoreAsync</span><span class="p">();</span>
                    <span class="k">await</span> <span class="n">transaction</span><span class="p">.</span><span class="nf">CommitAsync</span><span class="p">();</span>
                <span class="p">}</span>
            <span class="p">}</span>
</code></pre></div></div>

<p>我们应用开始我们就可以读取 account.json</p>

<p>读取就可以用 json 的 Deserialize</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
                    <span class="n">StorageFile</span> <span class="n">file</span> <span class="p">=</span> <span class="k">await</span> <span class="n">folder</span><span class="p">.</span><span class="nf">GetFileAsync</span><span class="p">(</span><span class="n">folderStr</span> <span class="p">+</span> <span class="s">".json"</span><span class="p">);</span>
                    <span class="kt">var</span> <span class="n">json</span> <span class="p">=</span> <span class="n">JsonSerializer</span><span class="p">.</span><span class="nf">Create</span><span class="p">();</span>
                    <span class="n">Account</span> <span class="p">=</span> <span class="n">json</span><span class="p">.</span><span class="n">Deserialize</span><span class="p">&lt;</span><span class="n">Account</span><span class="p">&gt;(</span><span class="k">new</span> <span class="nf">JsonTextReader</span><span class="p">(</span>
                        <span class="k">new</span> <span class="nf">StreamReader</span><span class="p">(</span><span class="k">await</span> <span class="n">file</span><span class="p">.</span><span class="nf">OpenStreamForReadAsync</span><span class="p">())));</span>
          
</code></pre></div></div>

<p>我们从 FutureAccessList 拿文件就可以用 StorageApplicationPermissions.FutureAccessList.GetFileAsync</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
             <span class="n">file</span> <span class="p">=</span> <span class="k">await</span> <span class="n">StorageApplicationPermissions</span><span class="p">.</span><span class="n">FutureAccessList</span><span class="p">.</span><span class="nf">GetFileAsync</span><span class="p">(</span><span class="n">Account</span><span class="p">.</span><span class="n">Token</span><span class="p">);</span>

</code></pre></div></div>

:ET