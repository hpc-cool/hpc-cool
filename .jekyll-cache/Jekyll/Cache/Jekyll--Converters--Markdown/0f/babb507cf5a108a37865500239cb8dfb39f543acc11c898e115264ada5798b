I"e;<p>我看到朋友的代码出现绑定了 一个 TextBlock 的 Text 的 length ，那时候我觉得 length 不是依赖属性，绑定了是无法通知的。最后我做了实验才发现，原因有 Text 可以通知。</p>

<!--more-->

<!-- CreateTime:2018/2/13 17:23:03 -->

<!-- csdn -->

<p>请看简单的代码，界面就是一个 TextBlock 和两个按钮，其中一个按钮是绑定了 length 如果大于 0 才可以使用。一个按钮是把 TextBlock 的文字设置为空或者设置为任意字符串。</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="p">&lt;</span><span class="n">Grid</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="n">Grid</span><span class="p">.</span><span class="n">Resources</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="n">local</span><span class="p">:</span><span class="n">LengthToBoolenConverter</span> <span class="n">x</span><span class="p">:</span><span class="n">Key</span><span class="p">=</span><span class="s">"LengthToBoolenConverter"</span><span class="p">/&gt;</span>
        <span class="p">&lt;/</span><span class="n">Grid</span><span class="p">.</span><span class="n">Resources</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="n">Grid</span><span class="p">.</span><span class="n">RowDefinitions</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="n">RowDefinition</span> <span class="n">Height</span><span class="p">=</span><span class="s">"79*"</span><span class="p">/&gt;</span>
            <span class="p">&lt;</span><span class="n">RowDefinition</span> <span class="n">Height</span><span class="p">=</span><span class="s">"28*"</span><span class="p">/&gt;</span>
        <span class="p">&lt;/</span><span class="n">Grid</span><span class="p">.</span><span class="n">RowDefinitions</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="n">TextBlock</span> <span class="n">x</span><span class="p">:</span><span class="n">Name</span><span class="p">=</span><span class="s">"TitleBlock"</span> <span class="n">Margin</span><span class="p">=</span><span class="s">"0,0,-0.6,-0.2"</span> <span class="p">&gt;&lt;/</span><span class="n">TextBlock</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="n">Grid</span> <span class="n">Grid</span><span class="p">.</span><span class="n">Row</span><span class="p">=</span><span class="s">"1"</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="n">Button</span> <span class="n">Margin</span><span class="p">=</span><span class="s">"10,10,10,10"</span> <span class="n">HorizontalAlignment</span><span class="p">=</span><span class="s">"Left"</span> <span class="n">Content</span><span class="p">=</span><span class="s">"确定"</span> <span class="n">Click</span><span class="p">=</span><span class="s">"ButtonBase_OnClick"</span><span class="p">&gt;&lt;/</span><span class="n">Button</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="n">Button</span> <span class="n">Margin</span><span class="p">=</span><span class="s">"10,10,10,10"</span> <span class="n">HorizontalAlignment</span><span class="p">=</span><span class="s">"Right"</span> <span class="n">IsEnabled</span><span class="p">=</span><span class="s">"{Binding ElementName=TitleBlock,Path=Text.Length,Converter={StaticResource LengthToBoolenConverter}}"</span> <span class="n">Content</span><span class="p">=</span><span class="s">"确定"</span><span class="p">&gt;&lt;/</span><span class="n">Button</span><span class="p">&gt;</span>
        <span class="p">&lt;/</span><span class="n">Grid</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="n">Grid</span><span class="p">&gt;</span>

      <span class="k">public</span> <span class="k">class</span> <span class="nc">LengthToBoolenConverter</span> <span class="p">:</span> <span class="n">IValueConverter</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">object</span> <span class="nf">Convert</span><span class="p">(</span><span class="kt">object</span> <span class="k">value</span><span class="p">,</span> <span class="n">Type</span> <span class="n">targetType</span><span class="p">,</span> <span class="kt">object</span> <span class="n">parameter</span><span class="p">,</span> <span class="n">CultureInfo</span> <span class="n">culture</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">length</span> <span class="p">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">?)</span> <span class="k">value</span><span class="p">;</span>
            <span class="k">return</span> <span class="n">length</span> <span class="p">&gt;</span> <span class="m">0</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="kt">object</span> <span class="nf">ConvertBack</span><span class="p">(</span><span class="kt">object</span> <span class="k">value</span><span class="p">,</span> <span class="n">Type</span> <span class="n">targetType</span><span class="p">,</span> <span class="kt">object</span> <span class="n">parameter</span><span class="p">,</span> <span class="n">CultureInfo</span> <span class="n">culture</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">NotImplementedException</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>

            <span class="k">private</span> <span class="k">void</span> <span class="nf">ButtonBase_OnClick</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">RoutedEventArgs</span> <span class="n">e</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="kt">string</span><span class="p">.</span><span class="nf">IsNullOrEmpty</span><span class="p">(</span><span class="n">TitleBlock</span><span class="p">.</span><span class="n">Text</span><span class="p">))</span>
            <span class="p">{</span>
                <span class="n">TitleBlock</span><span class="p">.</span><span class="n">Text</span> <span class="p">=</span> <span class="s">"1"</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">else</span>
            <span class="p">{</span>
                <span class="n">TitleBlock</span><span class="p">.</span><span class="n">Text</span> <span class="p">=</span> <span class="s">""</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
</code></pre></div></div>

<p>看到<code class="language-plaintext highlighter-rouge">IsEnabled="{Binding ElementName=TitleBlock,Path=Text.Length,Converter={StaticResource LengthToBoolenConverter}}"</code> 绑定就是 Text.Length ，但是 Length 不是依赖属性，没有通知，那么在 Text 变化时是否会通知？会的，因为使用的是 Text 的 Length，所以在 Text 修改时就会改变了 Length 。</p>

<p>如果有一个 Model 类，这个类是没有继承通知的，那么如何在里面的属性修改时，可以通知？一个方法就是在 ViewModel 使用 Model 属性，每次都是修改整个 Model</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">class</span> <span class="nc">Model</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="kt">string</span> <span class="n">Foo</span> <span class="p">{</span> <span class="k">set</span><span class="p">;</span> <span class="k">get</span><span class="p">}</span>
        <span class="c1">//其他就不写了</span>
    <span class="p">}</span>

    <span class="k">class</span> <span class="nc">ViewModel</span> <span class="p">:</span> <span class="n">INotifyPropertyChanged</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="k">void</span> <span class="nf">Foo</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">model</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Model</span><span class="p">()</span>
            <span class="p">{</span>
                <span class="n">Foo</span> <span class="p">=</span> <span class="n">Model</span><span class="p">.</span><span class="n">Foo</span><span class="p">,</span>
                <span class="c1">//复制所有属性</span>
            <span class="p">};</span>
            <span class="n">model</span><span class="p">.</span><span class="n">Foo</span> <span class="p">=</span> <span class="s">"新的"</span><span class="p">;</span>
            <span class="n">Model</span> <span class="p">=</span> <span class="n">model</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">private</span> <span class="n">Model</span> <span class="n">_model</span><span class="p">;</span>

        <span class="k">public</span> <span class="n">Model</span> <span class="n">Model</span>
        <span class="p">{</span>
            <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">_model</span><span class="p">;</span> <span class="p">}</span>
            <span class="k">set</span>
            <span class="p">{</span>
                <span class="n">_model</span> <span class="p">=</span> <span class="k">value</span><span class="p">;</span>
                <span class="nf">OnPropertyChanged</span><span class="p">();</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">event</span> <span class="n">PropertyChangedEventHandler</span> <span class="n">PropertyChanged</span><span class="p">;</span>

        <span class="k">protected</span> <span class="k">virtual</span> <span class="k">void</span> <span class="nf">OnPropertyChanged</span><span class="p">([</span><span class="n">CallerMemberName</span><span class="p">]</span> <span class="kt">string</span> <span class="n">propertyName</span> <span class="p">=</span> <span class="k">null</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">PropertyChanged</span><span class="p">?.</span><span class="nf">Invoke</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="k">new</span> <span class="nf">PropertyChangedEventArgs</span><span class="p">(</span><span class="n">propertyName</span><span class="p">));</span>
        <span class="p">}</span>
    <span class="p">}</span>
</code></pre></div></div>

<p>这样可以不修改 Model 就可以在修改属性通知，但是可以看到这需要复制所有属性，不过我有写了<a href="https://blog.lindexi.com/post/C-%E4%BD%BF%E7%94%A8Emit%E6%B7%B1%E5%85%8B%E9%9A%86.html">C# 使用Emit深克隆</a>使用这个就可以做快复制，而且还是深复制，但是复制不是真的深，代码复制是一层，如果需要实现真的复制，还需要自己去写</p>

<p>那么不复制是否可以做？可以，只需要调用<code class="language-plaintext highlighter-rouge">OnPropertyChanged</code></p>

<p>请把上面的代码做修改，添加一个函数，这个函数更新会自动通知。</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="k">public</span> <span class="k">void</span> <span class="nf">Foo</span><span class="p">(</span><span class="kt">string</span> <span class="n">str</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Model</span><span class="p">.</span><span class="n">Foo</span> <span class="p">=</span> <span class="n">str</span><span class="p">;</span>
            <span class="nf">OnPropertyChanged</span><span class="p">(</span><span class="k">nameof</span><span class="p">(</span><span class="n">Model</span><span class="p">));</span>
        <span class="p">}</span>
</code></pre></div></div>

<p>在按钮点击就把代码修改为</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="k">private</span> <span class="k">void</span> <span class="nf">ButtonBase_OnClick</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">RoutedEventArgs</span> <span class="n">e</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="kt">string</span><span class="p">.</span><span class="nf">IsNullOrEmpty</span><span class="p">(</span><span class="n">TitleBlock</span><span class="p">.</span><span class="n">Text</span><span class="p">))</span>
            <span class="p">{</span>
                <span class="n">ViewModel</span><span class="p">.</span><span class="nf">Foo</span><span class="p">(</span><span class="s">"1"</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">else</span>
            <span class="p">{</span>
                <span class="n">ViewModel</span><span class="p">.</span><span class="nf">Foo</span><span class="p">(</span><span class="s">""</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>
</code></pre></div></div>

<p>需要添加一些绑定，请看代码</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="k">public</span> <span class="n">ViewModel</span> <span class="n">ViewModel</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">ViewModel</span><span class="p">();</span>

</code></pre></div></div>

<p>设置了 DataContext 之后就可以在界面绑定，这时可以看到和直接设置TextBlock的文字看起来是一样</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="p">&lt;</span><span class="n">TextBlock</span> <span class="n">x</span><span class="p">:</span><span class="n">Name</span><span class="p">=</span><span class="s">"TitleBlock"</span> <span class="n">Margin</span><span class="p">=</span><span class="s">"0,0,-0.6,-0.2"</span> <span class="n">Text</span><span class="p">=</span><span class="s">"{Binding Model.Foo}"</span><span class="p">&gt;&lt;/</span><span class="n">TextBlock</span><span class="p">&gt;</span>

</code></pre></div></div>

<p>源代码：<a href="http://download.csdn.net/download/lindexi_gd/9968341">[免费]WpfTextLengthdc-CSDN下载</a></p>
:ET