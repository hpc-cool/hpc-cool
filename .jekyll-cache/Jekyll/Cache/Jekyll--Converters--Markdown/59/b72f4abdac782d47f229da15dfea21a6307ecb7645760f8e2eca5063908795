I"	<p>默认的 GitLab 的 Runner 在构建时不会去拉取 Git Submodules 仓库，将会提示 Skipping Git submodules setup 跳过初始化 Git Submodule 仓库</p>

<!--more-->

<!-- CreateTime:2021/3/30 16:42:37 -->

<!-- 发布 -->

<p>如<a href="https://docs.gitlab.com/ee/ci/git_submodules.html">官方文档</a> 的描述，只需要加上以下代码在 <code class="language-plaintext highlighter-rouge">.gitlab-ci.yml</code> 文件即可</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">variables</span><span class="pi">:</span>
  <span class="na">GIT_SUBMODULE_STRATEGY</span><span class="pi">:</span> <span class="s">recursive</span> <span class="c1"># 拉取 Submodule 内容</span>
</code></pre></div></div>

<p>加入的逻辑和 stages 是同级，如下面例子</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">stages</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">build</span>
  <span class="pi">-</span> <span class="s">test</span>
  <span class="pi">-</span> <span class="s">publish</span>
<span class="c1"># 上面代码定义了打包步骤，定义编译需要两个 job 分别是编译测试和发布，注意不同的 job 是在完全空白的项目，不会用到上一个job编译的文件</span>

<span class="na">variables</span><span class="pi">:</span>
  <span class="na">GIT_SUBMODULE_STRATEGY</span><span class="pi">:</span> <span class="s">recursive</span> <span class="c1"># 拉取 Submodule 内容</span>
</code></pre></div></div>

<p>设置之后可以在 GitLab 的 Runner 构建时看到如下输出</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Updating</span><span class="p">/</span><span class="n">initializing</span> <span class="n">submodules</span> <span class="n">recursively</span>
</code></pre></div></div>

<p>也就是说将会自动拉取 submodules 内容</p>

:ET