I"n7<p>我有一个强大的功能，这个功能就是在 Linux 下使用 GDI 转换 EMF 格式图片为 png 图片，但是有一些有趣的图片会让转换的进程炸掉。因此我就想让转换服务放在独立的进程，通过进程间调用，也就是命令行调用传入参数的方式，让另一个进程转换图片。而此时就会遇到一个问题，如何让这个进程也被构建，然后输出到输出路径</p>

<!--more-->

<!-- CreateTime:2020/9/3 17:05:44 -->

<p>在 .NET Core 里面，如果想要让输出文件夹包含两个不同的进程入口文件，最简单的方法是让一个项目引用另一个项目。这个做法在 .NET Framework 里面很好用，因为此时将会在输出文件夹里面包含两个项目的输出文件。也就解决了如果让另一个进程也被构建的问题</p>

<p>不过在 dotnet core 里面将会存在一个文件，如果项目引用了一个输出为 exe 的项目，此时想要让这个可执行程序运行，将会遇到这样的坑，在 .NET Core 里面规定了可执行程序需要有两个配置文件，而默认项目引用将会缺少这两个配置文件</p>

<ul>
  <li>.deps.json</li>
  <li>.runtimeconfig.json</li>
</ul>

<p>在默认构建一个可执行程序，如 exe 程序的 .NET Core 项目，将可以在输出路径看到 xx.deps.json 文件和 xx.runtimeconfig.json 两个文件。如果没有这两个文件会如何？在运行可执行程序将会提示下面代码</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>A fatal error was encountered. The library 'hostpolicy.dll' required to execute the application was not found in 'C:\
Failed to run as a self-contained app. If this should be a framework-dependent app, add the C:\
</code></pre></div></div>

<p>提示找不到 <code class="language-plaintext highlighter-rouge">The library 'hostpolicy.dll' required to execute the application was not found</code> 的原因就是因为不存在 runtimeconfig.json 文件</p>

<p>那么这两个文件的作用是什么，请看 <a href="https://www.cnblogs.com/lwqlun/p/9704702.html">深入理解.NET Core的基元: deps.json, runtimeconfig.json, dll文件 - LamondLu - 博客园</a></p>

<p>而如果我单个项目构建的时候，其实是可以在项目输出文件夹看到这两个配置文件。但是如果被引用了，那么将找不到这两个文件</p>

<p>解决方法就是在被引用的项目的 csproj 文件里面添加如下代码</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>     <span class="p">&lt;</span><span class="n">Target</span> <span class="n">Name</span><span class="p">=</span><span class="s">"AddRuntimeDependenciesToContent"</span> <span class="n">Condition</span><span class="p">=</span><span class="s">" '$(TargetFrameworkIdentifier)' == '.NETCoreApp'"</span> <span class="n">BeforeTargets</span><span class="p">=</span><span class="s">"GetCopyToOutputDirectoryItems"</span> <span class="n">DependsOnTargets</span><span class="p">=</span><span class="s">"GenerateBuildDependencyFile;GenerateBuildRuntimeConfigurationFiles"</span> <span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="n">ItemGroup</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="n">ContentWithTargetPath</span> <span class="n">Include</span><span class="p">=</span><span class="s">"$(ProjectDepsFilePath)"</span> <span class="n">CopyToOutputDirectory</span><span class="p">=</span><span class="s">"PreserveNewest"</span> <span class="n">TargetPath</span><span class="p">=</span><span class="s">"$(ProjectDepsFileName)"</span> <span class="p">/&gt;</span>

            <span class="p">&lt;</span><span class="n">ContentWithTargetPath</span> <span class="n">Include</span><span class="p">=</span><span class="s">"$(ProjectRuntimeConfigFilePath)"</span> <span class="n">CopyToOutputDirectory</span><span class="p">=</span><span class="s">"PreserveNewest"</span> <span class="n">TargetPath</span><span class="p">=</span><span class="s">"$(ProjectRuntimeConfigFileName)"</span> <span class="p">/&gt;</span>
        <span class="p">&lt;/</span><span class="n">ItemGroup</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="n">Target</span><span class="p">&gt;</span>
</code></pre></div></div>

<p>上面代码的含义是什么？其实就是将这两个配置文件加入到 <code class="language-plaintext highlighter-rouge">ContentWithTargetPath</code> 项，将会被其他项目放在输出文件夹里面</p>

<p>上面代码的 <code class="language-plaintext highlighter-rouge">AddRuntimeDependenciesToContent</code> 是一个随意的名字，小伙伴可以根据自己的需求随意更改</p>

<p>而核心的逻辑是在 <code class="language-plaintext highlighter-rouge">BeforeTargets="GetCopyToOutputDirectoryItems" DependsOnTargets="GenerateBuildDependencyFile;GenerateBuildRuntimeConfigurationFiles"</code> 这里</p>

<p>在 BeforeTargets 也就是说明这个 Target 在构建过程的执行时机是需要在 <code class="language-plaintext highlighter-rouge">GetCopyToOutputDirectoryItems</code> 执行之前，这个 <code class="language-plaintext highlighter-rouge">GetCopyToOutputDirectoryItems</code> 就是决定有哪些内容将会需要输出到最终输出文件夹里面。因此需要在他之前之前，给他设置需要输出的内容</p>

<p>然后在 <code class="language-plaintext highlighter-rouge">DependsOnTargets="GenerateBuildDependencyFile;GenerateBuildRuntimeConfigurationFiles"</code> 是因为在 <code class="language-plaintext highlighter-rouge">GenerateBuildDependencyFile</code> 之后才输出 .deps.json 文件，在 <code class="language-plaintext highlighter-rouge">GenerateBuildRuntimeConfigurationFiles</code> 才输出 .runtimeconfig.json 文件</p>

<p>如果没有写 DependsOnTargets 那么将会构建提示 <code class="language-plaintext highlighter-rouge">error MSB3030</code> 找不到复制文件</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">error</span> <span class="n">MSB3030</span><span class="p">:</span> <span class="err">无法复制文件“</span><span class="n">C</span><span class="p">:</span><span class="err">\</span><span class="n">lindexi</span><span class="err">\</span><span class="n">bin</span><span class="err">\</span><span class="n">Release</span><span class="err">\</span><span class="n">netcoreapp3</span><span class="p">.</span><span class="m">1</span><span class="err">\</span><span class="n">lindexi</span><span class="p">.</span><span class="n">runtimeconfig</span><span class="p">.</span><span class="n">json</span><span class="err">”，原因是找不到该文件</span>
</code></pre></div></div>

<p>而如果后续你觉得这个原本是输出为可执行文件的进程不想继续作为输出为 exe 了，将 OutputType 修改为库，那么请记得删除上面的代码，因此此时的输出里面将没有包含配置文件</p>

<p>更多关于 Roslyn 请看 <a href="https://blog.lindexi.com/post/roslyn.html">手把手教你写 Roslyn 修改编译</a></p>

<p>如果不想使用引用项目的方法，还有其他方法可以做到，让多个项目没有依赖，但是都能构建。请看 <a href="https://blog.walterlv.com/post/affects-project-building-order.html">三种方法设置 .NET/C# 项目的编译顺序，而不影响项目之间的引用 - walterlv</a></p>

<p>本文的方法存在的不足是，如果最后是作为框架依赖发布的，那么也许会遇到这样的问题，实际安装的库被作为框架的一部分，此时引用路径将会不相同。构建的项目里面依赖的是本地的 lib 文件的路径，而框架发布的项目使用的是 ref 的文件夹路径。如 GDI 库的实现里面，在运行的时候将会看到输出是找不到</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">dotnet</span> <span class="n">ImageOptimizationProcess</span><span class="p">.</span><span class="n">dll</span>
<span class="n">Error</span><span class="p">:</span>
  <span class="n">An</span> <span class="n">assembly</span> <span class="n">specified</span> <span class="k">in</span> <span class="n">the</span> <span class="n">application</span> <span class="n">dependencies</span> <span class="nf">manifest</span> <span class="p">(</span><span class="n">ImageOptimizationProcess</span><span class="p">.</span><span class="n">deps</span><span class="p">.</span><span class="n">json</span><span class="p">)</span> <span class="n">was</span> <span class="n">not</span> <span class="n">found</span><span class="p">:</span>
    <span class="n">package</span><span class="p">:</span> <span class="err">'</span><span class="n">Microsoft</span><span class="p">.</span><span class="n">Win32</span><span class="p">.</span><span class="n">SystemEvents</span><span class="err">'</span><span class="p">,</span> <span class="n">version</span><span class="p">:</span> <span class="err">'</span><span class="m">4.7</span><span class="p">.</span><span class="m">0</span><span class="err">'</span>
    <span class="n">path</span><span class="p">:</span> <span class="err">'</span><span class="n">lib</span><span class="p">/</span><span class="n">netstandard2</span><span class="p">.</span><span class="m">0</span><span class="p">/</span><span class="n">Microsoft</span><span class="p">.</span><span class="n">Win32</span><span class="p">.</span><span class="n">SystemEvents</span><span class="p">.</span><span class="n">dll</span><span class="err">'</span>
</code></pre></div></div>

<!-- ![](image/Roslyn 解决 dotnet core 应用进程间引用找不到 runtimeconfig 依赖文件/Roslyn 解决 dotnet core 应用进程间引用找不到 runtimeconfig 依赖文件0.png) -->

<p><img src="http://image.acmx.xyz/lindexi%2F2020931729581851.jpg" alt="" /></p>

<p>原因是可执行项目输出的配置文件内容如下</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">      </span><span class="nl">"System.Drawing.Common/4.7.0"</span><span class="p">:</span><span class="w"> 
       </span><span class="p">{</span><span class="w">
        </span><span class="nl">"dependencies"</span><span class="p">:</span><span class="w"> 
        </span><span class="p">{</span><span class="w">
          </span><span class="nl">"Microsoft.NETCore.Platforms"</span><span class="p">:</span><span class="w"> </span><span class="s2">"3.1.0"</span><span class="p">,</span><span class="w">
          </span><span class="nl">"Microsoft.Win32.SystemEvents"</span><span class="p">:</span><span class="w"> </span><span class="s2">"4.7.0"</span><span class="w">
        </span><span class="p">},</span><span class="w">
        </span><span class="nl">"runtime"</span><span class="p">:</span><span class="w"> 
        </span><span class="p">{</span><span class="w">
          </span><span class="nl">"lib/netstandard2.0/System.Drawing.Common.dll"</span><span class="p">:</span><span class="w"> 
          </span><span class="p">{</span><span class="w">
            </span><span class="nl">"assemblyVersion"</span><span class="p">:</span><span class="w"> </span><span class="s2">"4.0.0.1"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"fileVersion"</span><span class="p">:</span><span class="w"> </span><span class="s2">"4.6.26919.2"</span><span class="w">
          </span><span class="p">}</span><span class="w">
        </span><span class="p">},</span><span class="w">
        </span><span class="nl">"runtimeTargets"</span><span class="p">:</span><span class="w"> 
        </span><span class="p">{</span><span class="w">
          </span><span class="nl">"runtimes/unix/lib/netcoreapp3.0/System.Drawing.Common.dll"</span><span class="p">:</span><span class="w"> 
          </span><span class="p">{</span><span class="w">
            </span><span class="nl">"rid"</span><span class="p">:</span><span class="w"> </span><span class="s2">"unix"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"assetType"</span><span class="p">:</span><span class="w"> </span><span class="s2">"runtime"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"assemblyVersion"</span><span class="p">:</span><span class="w"> </span><span class="s2">"4.0.2.0"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"fileVersion"</span><span class="p">:</span><span class="w"> </span><span class="s2">"4.700.19.56404"</span><span class="w">
          </span><span class="p">},</span><span class="w">
          </span><span class="nl">"runtimes/win/lib/netcoreapp3.0/System.Drawing.Common.dll"</span><span class="p">:</span><span class="w"> 
          </span><span class="p">{</span><span class="w">
            </span><span class="nl">"rid"</span><span class="p">:</span><span class="w"> </span><span class="s2">"win"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"assetType"</span><span class="p">:</span><span class="w"> </span><span class="s2">"runtime"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"assemblyVersion"</span><span class="p">:</span><span class="w"> </span><span class="s2">"4.0.2.0"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"fileVersion"</span><span class="p">:</span><span class="w"> </span><span class="s2">"4.700.19.56404"</span><span class="w">
          </span><span class="p">}</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>但是实际的 GDI 的库是作为框架共享的，放在 <code class="language-plaintext highlighter-rouge">/usr/share/dotnet/shared/Microsoft.AspNetCore.App/3.1.6/System.Drawing.Common.dll</code> 路径，因此找不到库，进程执行失败</p>

:ET