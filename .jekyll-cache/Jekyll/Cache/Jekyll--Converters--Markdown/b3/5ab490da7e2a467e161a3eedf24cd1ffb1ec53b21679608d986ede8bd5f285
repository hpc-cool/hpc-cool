I"<p>虽然这是 C# 的技术，但是我是用在 uwp ，于是就把标题写这个名。有一天，我的小伙伴让我优化一个列表。这个列表是 ListView 他绑定了一个 ObservableCollection 所以需要对他做很少的修改。</p>

<!--more-->

<!-- CreateTime:2018/8/10 19:16:50 -->

<p>我绑定一个数量很多的 ObservableCollection 这个ListView 不能做虚拟化，所以性能问题是如果对这个列表做的修改多，那么速度很慢。我知道的就是一个 数组，他是表示修改后的列表需要的顺序。</p>

<p>于是这个数组我叫 sort ，是一个 <code class="language-plaintext highlighter-rouge">IList&lt;int&gt;</code> ，他记录了需要排序的顺序</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">IList</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="n">sort</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;()</span>
<span class="p">{</span>
    <span class="m">0</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">3</span>
<span class="p">};</span>
</code></pre></div></div>

<p>上面的代码就是希望把 2 和 1 的位置换一下，当然，实际的是比较复杂的。于是我寻找了两个方法，简单的方法请看下面</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="k">private</span> <span class="k">static</span> <span class="k">void</span> <span class="n">Sort</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="n">ObservableCollection</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">list</span><span class="p">,</span> <span class="n">IList</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="n">sort</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="c1">//按照给出的数组排序</span>
            <span class="kt">var</span> <span class="n">source</span> <span class="p">=</span> <span class="n">list</span><span class="p">.</span><span class="nf">ToList</span><span class="p">();</span>
            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="n">sort</span><span class="p">.</span><span class="n">Count</span><span class="p">;</span> <span class="n">i</span><span class="p">++)</span>
            <span class="p">{</span>
                <span class="c1">//假如原来的是 0 1 2</span>
                <span class="c1">//排序需要 0 2 1</span>
                <span class="c1">//那么在sort[1]的时候，发现 list[1] = 1 =2  所以需要在 1 的地方插入 2，同时移除 1 ，这个方法可以获得最少改动</span>
                <span class="c1">//如果当前的值和排序要的不相同</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">list</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="nf">Equals</span><span class="p">(</span><span class="n">source</span><span class="p">[</span><span class="n">sort</span><span class="p">[</span><span class="n">i</span><span class="p">]]))</span>
                <span class="p">{</span>
                    <span class="k">continue</span><span class="p">;</span>
                <span class="p">}</span>
                <span class="c1">//拿出排序需要的值，插入到现在的位置</span>
                <span class="n">list</span><span class="p">.</span><span class="nf">Move</span><span class="p">(</span><span class="n">sort</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">i</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>
</code></pre></div></div>

<p>这个方法性能很好，可以使用 ObservableCollection 的 CollectionChanged 查看列表修改的数量</p>

<p>第二个方法是使用插入和删除，因为 Move 只有通知列表才有，为了可以使用 List 的，所以就写了第二个方法。</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="k">private</span> <span class="k">static</span> <span class="k">void</span> <span class="n">Sort</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="n">IList</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">list</span><span class="p">,</span> <span class="n">List</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="n">sort</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">source</span> <span class="p">=</span> <span class="n">list</span><span class="p">.</span><span class="nf">ToList</span><span class="p">();</span>
            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="n">sort</span><span class="p">.</span><span class="n">Count</span><span class="p">;</span> <span class="n">i</span><span class="p">++)</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">list</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="nf">Equals</span><span class="p">(</span><span class="n">source</span><span class="p">[</span><span class="n">sort</span><span class="p">[</span><span class="n">i</span><span class="p">]]))</span>
                <span class="p">{</span>
                    <span class="k">continue</span><span class="p">;</span>
                <span class="p">}</span>
                <span class="kt">var</span> <span class="n">temp</span> <span class="p">=</span> <span class="n">source</span><span class="p">[</span><span class="n">sort</span><span class="p">[</span><span class="n">i</span><span class="p">]];</span>
                <span class="n">list</span><span class="p">.</span><span class="nf">Remove</span><span class="p">(</span><span class="n">temp</span><span class="p">);</span>
                <span class="n">list</span><span class="p">.</span><span class="nf">Insert</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">temp</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>
</code></pre></div></div>

<p>可以看到这两个方法的速度都比较好，之前使用的是清除整个列表才添加，可以看到这个方法的速度比上面两个方法差。</p>

<p><img src="http://image.acmx.xyz/34fdad35-5dfe-a75b-2b4b-8c5e313038e2%2F201792391832.jpg" alt="" /></p>

:ET