I"yW<p>其实点击这个事件是可以通过按下移动和抬起三个事件封装出来的，本文提供给大家一个辅助的方法，方便给任意的控件附加点击事件</p>

<!--more-->

<!-- CreateTime:6/15/2020 2:55:27 PM -->

<p>在开始前需要了解一些本文点击的定义，本文点击的定义就是在按下到抬起过程中，不会出现长距离的移动，也就是从点击到抬起的点都是在一定范围内的。同时可以设置一定的时间范围，超过一定时间就是长按了，而不是点击了</p>

<p>根据这个特点咱开始来进行一个简单的封装，在封装之前先告诉大家封装之后的使用方法，下面代码的 uiElement 是一个 UIElement 控件</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>            <span class="n">InputHelper</span><span class="p">.</span><span class="nf">AttachMouseDownMoveUpToClick</span><span class="p">(</span><span class="n">uiElement</span><span class="p">,</span> <span class="n">UIElement_OnClicked</span><span class="p">);</span>

        <span class="k">private</span> <span class="k">void</span> <span class="nf">UIElement_OnClicked</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">EventArgs</span> <span class="n">e</span><span class="p">)</span>
        <span class="p">{</span>
            
        <span class="p">}</span>
</code></pre></div></div>

<p>实现 InputHelper 请看下面代码</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="c1">/// &lt;summary&gt;</span>
    <span class="c1">/// 输入层的帮助类</span>
    <span class="c1">/// &lt;/summary&gt;</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">InputHelper</span>
    <span class="p">{</span>
        <span class="c1">/// &lt;summary&gt;</span>
        <span class="c1">/// 将 MouseDown MouseMove MouseUp 封装为点击事件</span>
        <span class="c1">/// &lt;/summary&gt;</span>
        <span class="c1">/// &lt;param name="element"&gt;要被附加的元素&lt;/param&gt;</span>
        <span class="c1">/// &lt;param name="clickEventHandler"&gt;点击的事件&lt;/param&gt;</span>
        <span class="c1">/// &lt;param name="dragStarted"&gt;因为拖动而结束点击时触发&lt;/param&gt;</span>
        <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">AttachMouseDownMoveUpToClick</span><span class="p">(</span><span class="n">UIElement</span> <span class="n">element</span><span class="p">,</span> <span class="n">EventHandler</span> <span class="n">clickEventHandler</span><span class="p">,</span>
            <span class="n">EventHandler</span> <span class="n">dragStarted</span> <span class="p">=</span> <span class="k">null</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">inputInfo</span> <span class="p">=</span> <span class="nf">GetOrCreateInputInfo</span><span class="p">(</span><span class="n">element</span><span class="p">);</span>
            <span class="n">inputInfo</span><span class="p">.</span><span class="n">ClickEventHandler</span> <span class="p">+=</span> <span class="n">clickEventHandler</span><span class="p">;</span>

            <span class="n">inputInfo</span><span class="p">.</span><span class="n">DragStarted</span> <span class="p">+=</span> <span class="n">dragStarted</span><span class="p">;</span>

            <span class="n">element</span><span class="p">.</span><span class="n">MouseDown</span> <span class="p">-=</span> <span class="n">Element_MouseDown</span><span class="p">;</span>
            <span class="n">element</span><span class="p">.</span><span class="n">MouseDown</span> <span class="p">+=</span> <span class="n">Element_MouseDown</span><span class="p">;</span>
            <span class="n">element</span><span class="p">.</span><span class="n">MouseMove</span> <span class="p">-=</span> <span class="n">Element_MouseMove</span><span class="p">;</span>
            <span class="n">element</span><span class="p">.</span><span class="n">MouseMove</span> <span class="p">+=</span> <span class="n">Element_MouseMove</span><span class="p">;</span>
            <span class="n">element</span><span class="p">.</span><span class="n">MouseUp</span> <span class="p">-=</span> <span class="n">Element_MouseUp</span><span class="p">;</span>
            <span class="n">element</span><span class="p">.</span><span class="n">MouseUp</span> <span class="p">+=</span> <span class="n">Element_MouseUp</span><span class="p">;</span>
            <span class="n">element</span><span class="p">.</span><span class="n">LostMouseCapture</span> <span class="p">-=</span> <span class="n">Element_LostMouseCapture</span><span class="p">;</span>
            <span class="n">element</span><span class="p">.</span><span class="n">LostMouseCapture</span> <span class="p">+=</span> <span class="n">Element_LostMouseCapture</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="c1">/// &lt;summary&gt;</span>
        <span class="c1">/// 去掉对 &lt;paramref name="element"/&gt; 的点击时间的监听</span>
        <span class="c1">/// &lt;/summary&gt;</span>
        <span class="c1">/// &lt;param name="element"&gt;&lt;/param&gt;</span>
        <span class="c1">/// &lt;param name="clickEventHandler"&gt;点击的事件&lt;/param&gt;</span>
        <span class="c1">/// &lt;param name="dragStarted"&gt;因为拖动而结束点击时触发的事件&lt;/param&gt;</span>
        <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">DetachMouseDownMoveUpToClick</span><span class="p">(</span><span class="n">UIElement</span> <span class="n">element</span><span class="p">,</span> <span class="n">EventHandler</span> <span class="n">clickEventHandler</span><span class="p">,</span>
            <span class="n">EventHandler</span> <span class="n">dragStarted</span> <span class="p">=</span> <span class="k">null</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">inputInfo</span> <span class="p">=</span> <span class="nf">GetInputInfo</span><span class="p">(</span><span class="n">element</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">inputInfo</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">return</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="n">inputInfo</span><span class="p">.</span><span class="n">ClickEventHandler</span> <span class="p">-=</span> <span class="n">clickEventHandler</span><span class="p">;</span>
            <span class="n">inputInfo</span><span class="p">.</span><span class="n">DragStarted</span> <span class="p">-=</span> <span class="n">dragStarted</span><span class="p">;</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">inputInfo</span><span class="p">.</span><span class="nf">IsEmpty</span><span class="p">())</span>
            <span class="p">{</span>
                <span class="n">element</span><span class="p">.</span><span class="nf">ClearValue</span><span class="p">(</span><span class="n">InputInfoProperty</span><span class="p">);</span>
                <span class="n">element</span><span class="p">.</span><span class="n">MouseDown</span> <span class="p">-=</span> <span class="n">Element_MouseDown</span><span class="p">;</span>
                <span class="n">element</span><span class="p">.</span><span class="n">MouseMove</span> <span class="p">-=</span> <span class="n">Element_MouseMove</span><span class="p">;</span>
                <span class="n">element</span><span class="p">.</span><span class="n">MouseUp</span> <span class="p">-=</span> <span class="n">Element_MouseUp</span><span class="p">;</span>
                <span class="n">element</span><span class="p">.</span><span class="n">LostMouseCapture</span> <span class="p">-=</span> <span class="n">Element_LostMouseCapture</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">private</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Element_LostMouseCapture</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">MouseEventArgs</span> <span class="n">e</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">element</span> <span class="p">=</span> <span class="p">(</span><span class="n">UIElement</span><span class="p">)</span> <span class="n">sender</span><span class="p">;</span>
            <span class="nf">GetInputInfo</span><span class="p">(</span><span class="n">element</span><span class="p">)?.</span><span class="nf">LostCapture</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">private</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Element_MouseUp</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">MouseButtonEventArgs</span> <span class="n">e</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">element</span> <span class="p">=</span> <span class="p">(</span><span class="n">UIElement</span><span class="p">)</span> <span class="n">sender</span><span class="p">;</span>

            <span class="nf">GetInputInfo</span><span class="p">(</span><span class="n">element</span><span class="p">)?.</span><span class="nf">Up</span><span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="nf">GetPosition</span><span class="p">(</span><span class="n">element</span><span class="p">));</span>
        <span class="p">}</span>

        <span class="k">private</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Element_MouseMove</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">MouseEventArgs</span> <span class="n">e</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">element</span> <span class="p">=</span> <span class="p">(</span><span class="n">UIElement</span><span class="p">)</span> <span class="n">sender</span><span class="p">;</span>

            <span class="nf">GetInputInfo</span><span class="p">(</span><span class="n">element</span><span class="p">)?.</span><span class="nf">Move</span><span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="nf">GetPosition</span><span class="p">(</span><span class="n">element</span><span class="p">));</span>
        <span class="p">}</span>

        <span class="k">private</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Element_MouseDown</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">MouseButtonEventArgs</span> <span class="n">e</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">element</span> <span class="p">=</span> <span class="p">(</span><span class="n">UIElement</span><span class="p">)</span> <span class="n">sender</span><span class="p">;</span>

            <span class="nf">GetInputInfo</span><span class="p">(</span><span class="n">element</span><span class="p">)?.</span><span class="nf">Down</span><span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="nf">GetPosition</span><span class="p">(</span><span class="n">element</span><span class="p">));</span>
        <span class="p">}</span>

        <span class="k">private</span> <span class="k">static</span> <span class="k">readonly</span> <span class="n">DependencyProperty</span> <span class="n">InputInfoProperty</span> <span class="p">=</span> <span class="n">DependencyProperty</span><span class="p">.</span><span class="nf">RegisterAttached</span><span class="p">(</span>
            <span class="s">"InputInfo"</span><span class="p">,</span> <span class="k">typeof</span><span class="p">(</span><span class="n">InputInfo</span><span class="p">),</span> <span class="k">typeof</span><span class="p">(</span><span class="n">InputHelper</span><span class="p">),</span> <span class="k">new</span> <span class="nf">PropertyMetadata</span><span class="p">(</span><span class="k">default</span><span class="p">(</span><span class="n">InputInfo</span><span class="p">)));</span>

        <span class="k">private</span> <span class="k">static</span> <span class="n">InputInfo</span> <span class="nf">GetOrCreateInputInfo</span><span class="p">(</span><span class="n">UIElement</span> <span class="n">element</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">inputInfo</span> <span class="p">=</span> <span class="nf">GetInputInfo</span><span class="p">(</span><span class="n">element</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">inputInfo</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">inputInfo</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">InputInfo</span><span class="p">();</span>
                <span class="nf">SetInputInfo</span><span class="p">(</span><span class="n">element</span><span class="p">,</span> <span class="n">inputInfo</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="k">return</span> <span class="n">inputInfo</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">private</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">SetInputInfo</span><span class="p">(</span><span class="n">DependencyObject</span> <span class="n">element</span><span class="p">,</span> <span class="n">InputInfo</span> <span class="k">value</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">element</span><span class="p">.</span><span class="nf">SetValue</span><span class="p">(</span><span class="n">InputInfoProperty</span><span class="p">,</span> <span class="k">value</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">private</span> <span class="k">static</span> <span class="n">InputInfo</span> <span class="nf">GetInputInfo</span><span class="p">(</span><span class="n">DependencyObject</span> <span class="n">element</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="p">(</span><span class="n">InputInfo</span><span class="p">)</span> <span class="n">element</span><span class="p">.</span><span class="nf">GetValue</span><span class="p">(</span><span class="n">InputInfoProperty</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">private</span> <span class="k">class</span> <span class="nc">InputInfo</span>
        <span class="p">{</span>
            <span class="k">public</span> <span class="k">void</span> <span class="nf">Down</span><span class="p">(</span><span class="n">Point</span> <span class="n">position</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">_downedPosition</span> <span class="p">=</span> <span class="n">position</span><span class="p">;</span>
                <span class="n">_downedTime</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">;</span>
                <span class="n">_isClick</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="k">public</span> <span class="k">void</span> <span class="nf">Move</span><span class="p">(</span><span class="n">Point</span> <span class="n">position</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(!</span><span class="n">_isClick</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>

                <span class="k">if</span> <span class="p">((</span><span class="n">position</span> <span class="p">-</span> <span class="n">_downedPosition</span><span class="p">).</span><span class="n">LengthSquared</span> <span class="p">&gt;</span> <span class="n">ToleranceSquared</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="n">_isClick</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
                    <span class="n">DragStarted</span><span class="p">?.</span><span class="nf">Invoke</span><span class="p">(</span><span class="k">null</span><span class="p">,</span> <span class="n">EventArgs</span><span class="p">.</span><span class="n">Empty</span><span class="p">);</span>
                <span class="p">}</span>
            <span class="p">}</span>

            <span class="k">public</span> <span class="k">void</span> <span class="nf">Up</span><span class="p">(</span><span class="n">Point</span> <span class="n">position</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">_isClick</span> <span class="p">=</span> <span class="n">_isClick</span>
                           <span class="p">&amp;&amp;</span> <span class="p">(</span><span class="n">position</span> <span class="p">-</span> <span class="n">_downedPosition</span><span class="p">).</span><span class="n">LengthSquared</span> <span class="p">&lt;=</span> <span class="n">ToleranceSquared</span>
                           <span class="p">&amp;&amp;</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span> <span class="p">-</span> <span class="n">_downedTime</span> <span class="p">&lt;</span> <span class="n">ClickDuringTime</span><span class="p">;</span>

                <span class="k">if</span> <span class="p">(!</span><span class="n">_isClick</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>

                <span class="n">ClickEventHandler</span><span class="p">?.</span><span class="nf">Invoke</span><span class="p">(</span><span class="k">null</span><span class="p">,</span> <span class="n">EventArgs</span><span class="p">.</span><span class="n">Empty</span><span class="p">);</span>

                <span class="n">_isClick</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="k">public</span> <span class="k">void</span> <span class="nf">LostCapture</span><span class="p">()</span>
            <span class="p">{</span>
                <span class="n">_isClick</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="k">public</span> <span class="kt">double</span> <span class="n">ToleranceSquared</span> <span class="p">{</span> <span class="k">set</span><span class="p">;</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span> <span class="p">=</span> <span class="m">0.01</span><span class="p">;</span>
            <span class="k">public</span> <span class="n">TimeSpan</span> <span class="n">ClickDuringTime</span> <span class="p">{</span> <span class="k">set</span><span class="p">;</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span> <span class="p">=</span> <span class="n">TimeSpan</span><span class="p">.</span><span class="n">MaxValue</span><span class="p">;</span>

            <span class="k">public</span> <span class="k">event</span> <span class="n">EventHandler</span> <span class="n">ClickEventHandler</span><span class="p">;</span>
            <span class="k">public</span> <span class="k">event</span> <span class="n">EventHandler</span> <span class="n">DragStarted</span><span class="p">;</span>

            <span class="k">public</span> <span class="kt">bool</span> <span class="nf">IsEmpty</span><span class="p">()</span> <span class="p">=&gt;</span> <span class="n">ClickEventHandler</span> <span class="k">is</span> <span class="k">null</span> <span class="p">&amp;&amp;</span> <span class="n">DragStarted</span> <span class="k">is</span> <span class="k">null</span><span class="p">;</span>

            <span class="k">private</span> <span class="n">Point</span> <span class="n">_downedPosition</span><span class="p">;</span>
            <span class="k">private</span> <span class="n">DateTime</span> <span class="n">_downedTime</span><span class="p">;</span>
            <span class="k">private</span> <span class="kt">bool</span> <span class="n">_isClick</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
</code></pre></div></div>

<p>当前这个类还有什么不足？没有提供外面可以设置点击的范围，也就是从按下开始可以移动的范围的值，以及运行点击的时间。从上面代码可以看到写的是 TimeSpan.MaxValue 也就是没有分开点击和长按的设置</p>

<p>另外方法里面还添加一个可选的委托是点击变拖动的事件，这个事件用来了解当前本来是点击的，但是点击的时候移动的距离判断为拖动</p>

<p>这个封装的方法没有用到什么框架里面的功能，因此换个框架，如 UWP 按照这个思路修改一点代码应该也可以做出来</p>

<p>现在这个逻辑放进了<a href="https://github.com/HandyOrg/HandyControl/pull/414">HandyControl</a>欢迎小伙伴使用</p>

:ET