I"/<p>在 WPF 中的 ResourceDictionary 资源字典大部分都是在 XAML 里面定义的，但是在 C# 代码定义一个资源字典也是可行的，只是写起来有点诡异</p>

<!--more-->

<!-- CreateTime:2020/11/20 17:14:59 -->

<p>在 CSharp 后台代码里面给 WPF 定义资源字典需要重新创建一个类，让这个类继承 ResourceDictionary 如以下代码</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">public</span> <span class="k">class</span> <span class="nc">Foo</span> <span class="p">:</span> <span class="n">ResourceDictionary</span>
    <span class="p">{</span>

    <span class="p">}</span>
</code></pre></div></div>

<p>然后在构造函数里面加入测试的代码，添加一个颜色作为资源</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">public</span> <span class="k">class</span> <span class="nc">Foo</span> <span class="p">:</span> <span class="n">ResourceDictionary</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nf">Foo</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="nf">Add</span><span class="p">(</span><span class="s">"Foo"</span><span class="p">,</span> <span class="n">Brushes</span><span class="p">.</span><span class="n">Gray</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
</code></pre></div></div>

<p>在后台代码添加的资源需要在被加入到使用之前，完成资源的添加，因此建议写在构造函数里面</p>

<p>使用这个在后台代码定义的资源字典有两个方法，一个是在 XAML 引用，另一个是在后台代码添加</p>

<p>在 XAML 引用的逻辑如下</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nt">&lt;Window.Resources&gt;</span>
        <span class="nt">&lt;ResourceDictionary&gt;</span>
            <span class="nt">&lt;ResourceDictionary.MergedDictionaries&gt;</span>
                <span class="nt">&lt;local:Foo&gt;&lt;/local:Foo&gt;</span>
            <span class="nt">&lt;/ResourceDictionary.MergedDictionaries&gt;</span>
        <span class="nt">&lt;/ResourceDictionary&gt;</span>
    <span class="nt">&lt;/Window.Resources&gt;</span>

    <span class="nt">&lt;Grid</span> <span class="na">Background=</span><span class="s">"{StaticResource Foo}"</span><span class="nt">&gt;</span>

    <span class="nt">&lt;/Grid&gt;</span>
</code></pre></div></div>

<p>需要注意的是在 C# 后台定义的 WPF 资源字典不能通过 Url 的方式引用，而是需要通过实例的方式。可以选择创建实例或引用资源的方式，如上面代码是创建实例</p>

<p>在上面代码定义了一个测试使用的代码，尝试使用 <code class="language-plaintext highlighter-rouge">StaticResource Foo</code> 静态资源，这个静态资源是定义在后台代码的资源字典的，运行代码可以看到能绑定上</p>

<p>而在后台代码添加引用的方法如下</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="n">Resources</span><span class="p">.</span><span class="n">MergedDictionaries</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="k">new</span> <span class="nf">Foo</span><span class="p">());</span>
</code></pre></div></div>

<p>这就是在后台定义资源字典的用法了</p>

<p>在后台代码定义资源字典还有一个有趣的黑科技是重新返回资源的值</p>

<p>大概代码逻辑如下</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">public</span> <span class="k">class</span> <span class="nc">Foo</span> <span class="p">:</span> <span class="n">ResourceDictionary</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nf">Foo</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="nf">Add</span><span class="p">(</span><span class="s">"Foo"</span><span class="p">,</span> <span class="n">Brushes</span><span class="p">.</span><span class="n">Gray</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">protected</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">OnGettingValue</span><span class="p">(</span><span class="kt">object</span> <span class="n">key</span><span class="p">,</span> <span class="k">ref</span> <span class="kt">object</span> <span class="k">value</span><span class="p">,</span> <span class="k">out</span> <span class="kt">bool</span> <span class="n">canCache</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">value</span> <span class="p">=</span> <span class="n">Brushes</span><span class="p">.</span><span class="n">Blue</span><span class="p">;</span>
            <span class="n">canCache</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
</code></pre></div></div>

<p>在这个资源字典里面定义了 Foo 是灰色，但是在 OnGettingValue 方法里面返回的是蓝色。因此在 XAML 里面绑定静态资源的时候，将会显示的实际颜色是蓝色</p>

<p>另外只要资源里面的值不是 null 空，那么都会进入 OnGettingValue 方法去读取实际返回的值，而实际返回值是 object 类型，意味着可以愉快更改返回类型</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="k">public</span> <span class="nf">Foo</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="nf">Add</span><span class="p">(</span><span class="s">"Foo"</span><span class="p">,</span> <span class="k">null</span><span class="p">);</span> <span class="c1">// 传入 null 将不会进入 OnGettingValue 方法</span>
        <span class="p">}</span>

        <span class="k">protected</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">OnGettingValue</span><span class="p">(</span><span class="kt">object</span> <span class="n">key</span><span class="p">,</span> <span class="k">ref</span> <span class="kt">object</span> <span class="k">value</span><span class="p">,</span> <span class="k">out</span> <span class="kt">bool</span> <span class="n">canCache</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">value</span> <span class="p">=</span> <span class="n">Brushes</span><span class="p">.</span><span class="n">Blue</span><span class="p">;</span>
            <span class="n">canCache</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
        <span class="p">}</span>
</code></pre></div></div>

<p>如以下代码，传入的是 object 但是在 OnGettingValue 方法可以返回颜色</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>        <span class="k">public</span> <span class="nf">Foo</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="nf">Add</span><span class="p">(</span><span class="s">"Foo"</span><span class="p">,</span> <span class="k">new</span> <span class="kt">object</span><span class="p">());</span>
        <span class="p">}</span>

        <span class="k">protected</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">OnGettingValue</span><span class="p">(</span><span class="kt">object</span> <span class="n">key</span><span class="p">,</span> <span class="k">ref</span> <span class="kt">object</span> <span class="k">value</span><span class="p">,</span> <span class="k">out</span> <span class="kt">bool</span> <span class="n">canCache</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">value</span> <span class="p">=</span> <span class="n">Brushes</span><span class="p">.</span><span class="n">Blue</span><span class="p">;</span>
            <span class="n">canCache</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
        <span class="p">}</span>
</code></pre></div></div>

<p>利用这个有趣的科技也可以用来做多语言或者主题色等，只是这个方法没有自动的更新值机制</p>

<p>本文代码放在<a href="https://github.com/lindexi/lindexi_gd/tree/9b4f948b/LojafeajahaykaWiweyarcerhelralya">github</a>欢迎小伙伴访问</p>

<p>而在 XAML 定义内容，同时支持对应的后台代码也可以，但是没有什么意义，至少我还不知道这个功能有什么作用</p>

<p>做法就是和上面代码一样，定义一个继承 ResourceDictionary 的类，如下面代码</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">public</span> <span class="k">class</span> <span class="nc">ResourceJainahijainenelHuceenukur</span> <span class="p">:</span> <span class="n">ResourceDictionary</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="nf">ResourceJainahijainenelHuceenukur</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="n">Debugger</span><span class="p">.</span><span class="nf">Break</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">protected</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">OnGettingValue</span><span class="p">(</span><span class="kt">object</span> <span class="n">key</span><span class="p">,</span> <span class="k">ref</span> <span class="kt">object</span> <span class="k">value</span><span class="p">,</span> <span class="k">out</span> <span class="kt">bool</span> <span class="n">canCache</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">Debugger</span><span class="p">.</span><span class="nf">Break</span><span class="p">();</span>
            <span class="k">base</span><span class="p">.</span><span class="nf">OnGettingValue</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="k">ref</span> <span class="k">value</span><span class="p">,</span> <span class="k">out</span> <span class="n">canCache</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
</code></pre></div></div>

<p>接着创建一个资源字典，创建之后修改 ResourceDictionary 为刚才创建的类名</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nt">&lt;local:ResourceJainahijainenelHuceenukur</span> <span class="na">xmlns=</span><span class="s">"http://schemas.microsoft.com/winfx/2006/xaml/presentation"</span>
                           <span class="na">xmlns:x=</span><span class="s">"http://schemas.microsoft.com/winfx/2006/xaml"</span>
                           <span class="na">xmlns:local=</span><span class="s">"clr-namespace:KemkicemdurFemceloja"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;SolidColorBrush</span> <span class="na">x:Key=</span><span class="s">"Foo"</span> <span class="na">Color=</span><span class="s">"Aquamarine"</span><span class="nt">&gt;&lt;/SolidColorBrush&gt;</span>
<span class="nt">&lt;/local:ResourceJainahijainenelHuceenukur&gt;</span>
</code></pre></div></div>

<p>此时就完成了，依然使用的时候使用 url 的形式</p>

<p>但是这样做我想不到有多少意义，因为 OnGettingValue 方法尽管重写了，但是实际不会被调用进入</p>

<p>本文代码放在<a href="https://github.com/lindexi/lindexi_gd/tree/d98030cf4a7c21b945466d993a4bfaf5f7cc477e/KemkicemdurFemceloja">github</a>欢迎小伙伴访问</p>

:ET